
F103_Pertinaks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033fc  080033fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033fc  080033fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033fc  080033fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08003410  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003410  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e5c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ed  00000000  00000000  00029e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016791  00000000  00000000  0002cb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a79e  00000000  00000000  000432a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844d9  00000000  00000000  0004da47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1f20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d04  00000000  00000000  000d1f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080033c4 	.word	0x080033c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080033c4 	.word	0x080033c4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <HAL_TIM_PeriodElapsedCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim1.Instance ){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	429a      	cmp	r2, r3
 800037a:	d113      	bne.n	80003a4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		Motor_Speed = Rott_Count*60/24;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	4613      	mov	r3, r2
 8000382:	011b      	lsls	r3, r3, #4
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	461a      	mov	r2, r3
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800038c:	fba3 2302 	umull	r2, r3, r3, r2
 8000390:	091b      	lsrs	r3, r3, #4
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff90 	bl	80002b8 <__aeabi_ui2f>
 8000398:	4603      	mov	r3, r0
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800039c:	6013      	str	r3, [r2, #0]

		Rott_Count = 0;
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
	}
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000050 	.word	0x20000050
 80003b0:	20000148 	.word	0x20000148
 80003b4:	aaaaaaab 	.word	0xaaaaaaab
 80003b8:	20000144 	.word	0x20000144

080003bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80003c2:	af3e      	add	r7, sp, #248	; 0xf8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c4:	f000 ff72 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c8:	f000 f932 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003cc:	f000 faf2 	bl	80009b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003d0:	f000 f9fc 	bl	80007cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80003d4:	f000 fa6e 	bl	80008b4 <MX_TIM3_Init>
  MX_CAN_Init();
 80003d8:	f000 f970 	bl	80006bc <MX_CAN_Init>
  MX_TIM1_Init();
 80003dc:	f000 f9a4 	bl	8000728 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	Mosfet_Driver_Typedef MD_One;
	MD_One.LS_Pin = GPIOB;
 80003e0:	4b83      	ldr	r3, [pc, #524]	; (80005f0 <main+0x234>)
 80003e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	MD_One.LSP_Number = GPIO_PIN_10;
 80003e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ea:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	MD_One.HS_Tim = htim2;
 80003ee:	4a81      	ldr	r2, [pc, #516]	; (80005f4 <main+0x238>)
 80003f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80003f4:	4611      	mov	r1, r2
 80003f6:	2248      	movs	r2, #72	; 0x48
 80003f8:	4618      	mov	r0, r3
 80003fa:	f002 ffcd 	bl	8003398 <memcpy>
	MD_One.HST_Channel = TIM_CHANNEL_4;
 80003fe:	230c      	movs	r3, #12
 8000400:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114

	Mosfet_Driver_Typedef MD_Two;
	MD_Two.LS_Pin = GPIOB;
 8000404:	4b7a      	ldr	r3, [pc, #488]	; (80005f0 <main+0x234>)
 8000406:	673b      	str	r3, [r7, #112]	; 0x70
	MD_Two.LSP_Number = GPIO_PIN_0;
 8000408:	2301      	movs	r3, #1
 800040a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	MD_Two.HS_Tim = htim3;
 800040e:	4a7a      	ldr	r2, [pc, #488]	; (80005f8 <main+0x23c>)
 8000410:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000414:	4611      	mov	r1, r2
 8000416:	2248      	movs	r2, #72	; 0x48
 8000418:	4618      	mov	r0, r3
 800041a:	f002 ffbd 	bl	8003398 <memcpy>
	MD_Two.HST_Channel = TIM_CHANNEL_4;
 800041e:	230c      	movs	r3, #12
 8000420:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

	Mosfet_Driver_Typedef MD_Three;
	MD_Three.LS_Pin = GPIOA;
 8000424:	4b75      	ldr	r3, [pc, #468]	; (80005fc <main+0x240>)
 8000426:	61fb      	str	r3, [r7, #28]
	MD_Three.LSP_Number = GPIO_PIN_6;
 8000428:	2340      	movs	r3, #64	; 0x40
 800042a:	843b      	strh	r3, [r7, #32]
	MD_Three.HS_Tim = htim3;
 800042c:	4a72      	ldr	r2, [pc, #456]	; (80005f8 <main+0x23c>)
 800042e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000432:	4611      	mov	r1, r2
 8000434:	2248      	movs	r2, #72	; 0x48
 8000436:	4618      	mov	r0, r3
 8000438:	f002 ffae 	bl	8003398 <memcpy>
	MD_Three.HST_Channel = TIM_CHANNEL_2;
 800043c:	2304      	movs	r3, #4
 800043e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	// --

	// Hall Sensor Typedef
	Hall_Sensor_Typedef Hall_A;
	Hall_A.H_Pin = GPIOB;
 8000442:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800044a:	4a69      	ldr	r2, [pc, #420]	; (80005f0 <main+0x234>)
 800044c:	601a      	str	r2, [r3, #0]
	Hall_A.HP_Number = GPIO_PIN_7;
 800044e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	809a      	strh	r2, [r3, #4]

	Hall_Sensor_Typedef Hall_B;
	Hall_B.H_Pin = GPIOB;
 800045a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800045e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000462:	4a63      	ldr	r2, [pc, #396]	; (80005f0 <main+0x234>)
 8000464:	601a      	str	r2, [r3, #0]
	Hall_B.HP_Number = GPIO_PIN_8;
 8000466:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800046a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800046e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000472:	809a      	strh	r2, [r3, #4]

	Hall_Sensor_Typedef Hall_C;
	Hall_C.H_Pin = GPIOB;
 8000474:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000478:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800047c:	4a5c      	ldr	r2, [pc, #368]	; (80005f0 <main+0x234>)
 800047e:	601a      	str	r2, [r3, #0]
	Hall_C.HP_Number = GPIO_PIN_9;
 8000480:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000484:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800048c:	809a      	strh	r2, [r3, #4]


	HAL_TIM_Base_Start_IT(&htim1);
 800048e:	485c      	ldr	r0, [pc, #368]	; (8000600 <main+0x244>)
 8000490:	f002 f808 	bl	80024a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8000494:	4857      	ldr	r0, [pc, #348]	; (80005f4 <main+0x238>)
 8000496:	f001 ffc1 	bl	800241c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 800049a:	4857      	ldr	r0, [pc, #348]	; (80005f8 <main+0x23c>)
 800049c:	f001 ffbe 	bl	800241c <HAL_TIM_Base_Start>
	HAL_CAN_Start(&hcan);
 80004a0:	4858      	ldr	r0, [pc, #352]	; (8000604 <main+0x248>)
 80004a2:	f001 f860 	bl	8001566 <HAL_CAN_Start>


	// Burdakİ FIFO0 veya FIFO1 olması senin mesaj bekleme fonksiyonunda doldurduğun alanıda etkiler
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004a6:	2102      	movs	r1, #2
 80004a8:	4856      	ldr	r0, [pc, #344]	; (8000604 <main+0x248>)
 80004aa:	f001 f8a0 	bl	80015ee <HAL_CAN_ActivateNotification>

	Com_TxHeader.DLC = 8;
 80004ae:	4b56      	ldr	r3, [pc, #344]	; (8000608 <main+0x24c>)
 80004b0:	2208      	movs	r2, #8
 80004b2:	611a      	str	r2, [r3, #16]
	Com_TxHeader.IDE = CAN_ID_STD;
 80004b4:	4b54      	ldr	r3, [pc, #336]	; (8000608 <main+0x24c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
	Com_TxHeader.RTR = CAN_RTR_DATA;
 80004ba:	4b53      	ldr	r3, [pc, #332]	; (8000608 <main+0x24c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
	Com_TxHeader.StdId = 0x00011111;
 80004c0:	4b51      	ldr	r3, [pc, #324]	; (8000608 <main+0x24c>)
 80004c2:	4a52      	ldr	r2, [pc, #328]	; (800060c <main+0x250>)
 80004c4:	601a      	str	r2, [r3, #0]
	Com_TxHeader.TransmitGlobalTime = DISABLE;
 80004c6:	4b50      	ldr	r3, [pc, #320]	; (8000608 <main+0x24c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1){
		User_Speed = 20;
 80004cc:	4b50      	ldr	r3, [pc, #320]	; (8000610 <main+0x254>)
 80004ce:	2214      	movs	r2, #20
 80004d0:	701a      	strb	r2, [r3, #0]
		// Is_break = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
		Is_reverse = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80004d2:	2108      	movs	r1, #8
 80004d4:	4846      	ldr	r0, [pc, #280]	; (80005f0 <main+0x234>)
 80004d6:	f001 fb39 	bl	8001b4c <HAL_GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	461a      	mov	r2, r3
 80004de:	4b4d      	ldr	r3, [pc, #308]	; (8000614 <main+0x258>)
 80004e0:	701a      	strb	r2, [r3, #0]

		/* HAL SENSÖR OKUMASI*/
		HA_Res = HAL_GPIO_ReadPin(Hall_A.H_Pin, Hall_A.HP_Number);
 80004e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80004f4:	889b      	ldrh	r3, [r3, #4]
 80004f6:	4619      	mov	r1, r3
 80004f8:	4610      	mov	r0, r2
 80004fa:	f001 fb27 	bl	8001b4c <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	461a      	mov	r2, r3
 8000502:	4b45      	ldr	r3, [pc, #276]	; (8000618 <main+0x25c>)
 8000504:	701a      	strb	r2, [r3, #0]
		HB_Res = HAL_GPIO_ReadPin(Hall_B.H_Pin, Hall_B.HP_Number);
 8000506:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800050a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000514:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000518:	889b      	ldrh	r3, [r3, #4]
 800051a:	4619      	mov	r1, r3
 800051c:	4610      	mov	r0, r2
 800051e:	f001 fb15 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000522:	4603      	mov	r3, r0
 8000524:	461a      	mov	r2, r3
 8000526:	4b3d      	ldr	r3, [pc, #244]	; (800061c <main+0x260>)
 8000528:	701a      	strb	r2, [r3, #0]
		HC_Res = HAL_GPIO_ReadPin(Hall_C.H_Pin, Hall_C.HP_Number);
 800052a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800052e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000538:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800053c:	889b      	ldrh	r3, [r3, #4]
 800053e:	4619      	mov	r1, r3
 8000540:	4610      	mov	r0, r2
 8000542:	f001 fb03 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	4b35      	ldr	r3, [pc, #212]	; (8000620 <main+0x264>)
 800054c:	701a      	strb	r2, [r3, #0]

		HB_Res = HB_Res << 1;
 800054e:	4b33      	ldr	r3, [pc, #204]	; (800061c <main+0x260>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b31      	ldr	r3, [pc, #196]	; (800061c <main+0x260>)
 8000558:	701a      	strb	r2, [r3, #0]
		HC_Res = HC_Res << 2;
 800055a:	4b31      	ldr	r3, [pc, #196]	; (8000620 <main+0x264>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <main+0x264>)
 8000564:	701a      	strb	r2, [r3, #0]
		HT_Res = HC_Res | HB_Res | HA_Res;
 8000566:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <main+0x264>)
 8000568:	781a      	ldrb	r2, [r3, #0]
 800056a:	4b2c      	ldr	r3, [pc, #176]	; (800061c <main+0x260>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	4313      	orrs	r3, r2
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b29      	ldr	r3, [pc, #164]	; (8000618 <main+0x25c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4313      	orrs	r3, r2
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <main+0x268>)
 800057c:	701a      	strb	r2, [r3, #0]

		/* MOToR HIZ SAYACI */
		if (Prvs_Hal != HT_Res) {
 800057e:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <main+0x26c>)
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <main+0x268>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	429a      	cmp	r2, r3
 8000588:	d010      	beq.n	80005ac <main+0x1f0>
			if ((Prvs_Hal + HT_Res) == 10) {
 800058a:	4b27      	ldr	r3, [pc, #156]	; (8000628 <main+0x26c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <main+0x268>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4413      	add	r3, r2
 8000596:	2b0a      	cmp	r3, #10
 8000598:	d104      	bne.n	80005a4 <main+0x1e8>
				Rott_Count++ ;
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <main+0x270>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a22      	ldr	r2, [pc, #136]	; (800062c <main+0x270>)
 80005a2:	6013      	str	r3, [r2, #0]
			}
			Prvs_Hal = HT_Res;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <main+0x268>)
 80005a6:	781a      	ldrb	r2, [r3, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <main+0x26c>)
 80005aa:	701a      	strb	r2, [r3, #0]
		}


		/* SÜRERSE GENEL SÜRÜCÜ */

		Motor_Driver(MD_One, MD_Two, MD_Three, HT_Res, User_Speed);
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <main+0x268>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <main+0x254>)
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	923c      	str	r2, [sp, #240]	; 0xf0
 80005b6:	933b      	str	r3, [sp, #236]	; 0xec
 80005b8:	a826      	add	r0, sp, #152	; 0x98
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2254      	movs	r2, #84	; 0x54
 80005c0:	4619      	mov	r1, r3
 80005c2:	f002 fee9 	bl	8003398 <memcpy>
 80005c6:	a811      	add	r0, sp, #68	; 0x44
 80005c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005cc:	2254      	movs	r2, #84	; 0x54
 80005ce:	4619      	mov	r1, r3
 80005d0:	f002 fee2 	bl	8003398 <memcpy>
 80005d4:	4668      	mov	r0, sp
 80005d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80005da:	2244      	movs	r2, #68	; 0x44
 80005dc:	4619      	mov	r1, r3
 80005de:	f002 fedb 	bl	8003398 <memcpy>
 80005e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e8:	f000 fa52 	bl	8000a90 <Motor_Driver>
		User_Speed = 20;
 80005ec:	e76e      	b.n	80004cc <main+0x110>
 80005ee:	bf00      	nop
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	20000098 	.word	0x20000098
 80005f8:	200000e0 	.word	0x200000e0
 80005fc:	40010800 	.word	0x40010800
 8000600:	20000050 	.word	0x20000050
 8000604:	20000028 	.word	0x20000028
 8000608:	20000128 	.word	0x20000128
 800060c:	00011111 	.word	0x00011111
 8000610:	2000014d 	.word	0x2000014d
 8000614:	2000014e 	.word	0x2000014e
 8000618:	20000140 	.word	0x20000140
 800061c:	20000141 	.word	0x20000141
 8000620:	20000142 	.word	0x20000142
 8000624:	20000143 	.word	0x20000143
 8000628:	2000014c 	.word	0x2000014c
 800062c:	20000148 	.word	0x20000148

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2228      	movs	r2, #40	; 0x28
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 feb8 	bl	80033b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800066e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fa97 	bl	8001bac <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000684:	f000 fc64 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fd04 	bl	80020b0 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006ae:	f000 fc4f 	bl	8000f50 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3740      	adds	r7, #64	; 0x40
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_CAN_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_CAN_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_CAN_Init+0x64>)
 80006c8:	2212      	movs	r2, #18
 80006ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_CAN_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_CAN_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_CAN_Init+0x64>)
 80006da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006de:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_CAN_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_CAN_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_CAN_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_CAN_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_CAN_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_CAN_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_CAN_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_CAN_Init+0x64>)
 800070c:	f000 fe30 	bl	8001370 <HAL_CAN_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000716:	f000 fc1b 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000028 	.word	0x20000028
 8000724:	40006400 	.word	0x40006400

08000728 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_TIM1_Init+0x9c>)
 8000746:	4a20      	ldr	r2, [pc, #128]	; (80007c8 <MX_TIM1_Init+0xa0>)
 8000748:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8999;
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_TIM1_Init+0x9c>)
 800074c:	f242 3227 	movw	r2, #8999	; 0x2327
 8000750:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_TIM1_Init+0x9c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_TIM1_Init+0x9c>)
 800075a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800075e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_TIM1_Init+0x9c>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_TIM1_Init+0x9c>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_TIM1_Init+0x9c>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000772:	4814      	ldr	r0, [pc, #80]	; (80007c4 <MX_TIM1_Init+0x9c>)
 8000774:	f001 fe02 	bl	800237c <HAL_TIM_Base_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800077e:	f000 fbe7 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	4619      	mov	r1, r3
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_TIM1_Init+0x9c>)
 8000790:	f002 f9f2 	bl	8002b78 <HAL_TIM_ConfigClockSource>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800079a:	f000 fbd9 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800079e:	2320      	movs	r3, #32
 80007a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_TIM1_Init+0x9c>)
 80007ac:	f002 fd66 	bl	800327c <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80007b6:	f000 fbcb 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000050 	.word	0x20000050
 80007c8:	40012c00 	.word	0x40012c00

080007cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	; 0x38
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
 80007f8:	615a      	str	r2, [r3, #20]
 80007fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <MX_TIM2_Init+0xe4>)
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <MX_TIM2_Init+0xe4>)
 8000806:	2223      	movs	r2, #35	; 0x23
 8000808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_TIM2_Init+0xe4>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_TIM2_Init+0xe4>)
 8000812:	2263      	movs	r2, #99	; 0x63
 8000814:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_TIM2_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_TIM2_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000822:	4823      	ldr	r0, [pc, #140]	; (80008b0 <MX_TIM2_Init+0xe4>)
 8000824:	f001 fdaa 	bl	800237c <HAL_TIM_Base_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800082e:	f000 fb8f 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083c:	4619      	mov	r1, r3
 800083e:	481c      	ldr	r0, [pc, #112]	; (80008b0 <MX_TIM2_Init+0xe4>)
 8000840:	f002 f99a 	bl	8002b78 <HAL_TIM_ConfigClockSource>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800084a:	f000 fb81 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <MX_TIM2_Init+0xe4>)
 8000850:	f001 fe74 	bl	800253c <HAL_TIM_PWM_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800085a:	f000 fb79 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	4619      	mov	r1, r3
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <MX_TIM2_Init+0xe4>)
 800086e:	f002 fd05 	bl	800327c <HAL_TIMEx_MasterConfigSynchronization>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000878:	f000 fb6a 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087c:	2360      	movs	r3, #96	; 0x60
 800087e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	220c      	movs	r2, #12
 8000890:	4619      	mov	r1, r3
 8000892:	4807      	ldr	r0, [pc, #28]	; (80008b0 <MX_TIM2_Init+0xe4>)
 8000894:	f002 f8b2 	bl	80029fc <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800089e:	f000 fb57 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_TIM2_Init+0xe4>)
 80008a4:	f000 fc24 	bl	80010f0 <HAL_TIM_MspPostInit>

}
 80008a8:	bf00      	nop
 80008aa:	3738      	adds	r7, #56	; 0x38
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000098 	.word	0x20000098

080008b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	; 0x38
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e4:	4b31      	ldr	r3, [pc, #196]	; (80009ac <MX_TIM3_Init+0xf8>)
 80008e6:	4a32      	ldr	r2, [pc, #200]	; (80009b0 <MX_TIM3_Init+0xfc>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 80008ea:	4b30      	ldr	r3, [pc, #192]	; (80009ac <MX_TIM3_Init+0xf8>)
 80008ec:	2223      	movs	r2, #35	; 0x23
 80008ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <MX_TIM3_Init+0xf8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <MX_TIM3_Init+0xf8>)
 80008f8:	2263      	movs	r2, #99	; 0x63
 80008fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <MX_TIM3_Init+0xf8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <MX_TIM3_Init+0xf8>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000908:	4828      	ldr	r0, [pc, #160]	; (80009ac <MX_TIM3_Init+0xf8>)
 800090a:	f001 fd37 	bl	800237c <HAL_TIM_Base_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000914:	f000 fb1c 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800091e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000922:	4619      	mov	r1, r3
 8000924:	4821      	ldr	r0, [pc, #132]	; (80009ac <MX_TIM3_Init+0xf8>)
 8000926:	f002 f927 	bl	8002b78 <HAL_TIM_ConfigClockSource>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000930:	f000 fb0e 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000934:	481d      	ldr	r0, [pc, #116]	; (80009ac <MX_TIM3_Init+0xf8>)
 8000936:	f001 fe01 	bl	800253c <HAL_TIM_PWM_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000940:	f000 fb06 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094c:	f107 0320 	add.w	r3, r7, #32
 8000950:	4619      	mov	r1, r3
 8000952:	4816      	ldr	r0, [pc, #88]	; (80009ac <MX_TIM3_Init+0xf8>)
 8000954:	f002 fc92 	bl	800327c <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800095e:	f000 faf7 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000962:	2360      	movs	r3, #96	; 0x60
 8000964:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2204      	movs	r2, #4
 8000976:	4619      	mov	r1, r3
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <MX_TIM3_Init+0xf8>)
 800097a:	f002 f83f 	bl	80029fc <HAL_TIM_PWM_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000984:	f000 fae4 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	220c      	movs	r2, #12
 800098c:	4619      	mov	r1, r3
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <MX_TIM3_Init+0xf8>)
 8000990:	f002 f834 	bl	80029fc <HAL_TIM_PWM_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800099a:	f000 fad9 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <MX_TIM3_Init+0xf8>)
 80009a0:	f000 fba6 	bl	80010f0 <HAL_TIM_MspPostInit>

}
 80009a4:	bf00      	nop
 80009a6:	3738      	adds	r7, #56	; 0x38
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000e0 	.word	0x200000e0
 80009b0:	40000400 	.word	0x40000400

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c8:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a2d      	ldr	r2, [pc, #180]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0320 	and.w	r3, r3, #32
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a27      	ldr	r2, [pc, #156]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0308 	and.w	r3, r3, #8
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2140      	movs	r1, #64	; 0x40
 8000a14:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_GPIO_Init+0xd4>)
 8000a16:	f001 f8b0 	bl	8001b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f240 4101 	movw	r1, #1025	; 0x401
 8000a20:	481a      	ldr	r0, [pc, #104]	; (8000a8c <MX_GPIO_Init+0xd8>)
 8000a22:	f001 f8aa 	bl	8001b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_GPIO_Init+0xd4>)
 8000a3e:	f000 ff09 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8000a42:	f240 4301 	movw	r3, #1025	; 0x401
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_GPIO_Init+0xd8>)
 8000a5c:	f000 fefa 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000a60:	f44f 7362 	mov.w	r3, #904	; 0x388
 8000a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_GPIO_Init+0xd8>)
 8000a76:	f000 feed 	bl	8001854 <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3720      	adds	r7, #32
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	40010c00 	.word	0x40010c00

08000a90 <Motor_Driver>:

/* USER CODE BEGIN 4 */
void Motor_Driver(Mosfet_Driver_Typedef MD_one, Mosfet_Driver_Typedef MD_two,
		Mosfet_Driver_Typedef MD_three, uint8_t Hall_T, uint8_t User_Speed) {
 8000a90:	b084      	sub	sp, #16
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	f107 0c08 	add.w	ip, r7, #8
 8000a9a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	 MD_one_HS = 0;
 8000a9e:	4bc7      	ldr	r3, [pc, #796]	; (8000dbc <Motor_Driver+0x32c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
	 MD_one_LS = 0;
 8000aa4:	4bc6      	ldr	r3, [pc, #792]	; (8000dc0 <Motor_Driver+0x330>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]

	 MD_two_HS = 0;
 8000aaa:	4bc6      	ldr	r3, [pc, #792]	; (8000dc4 <Motor_Driver+0x334>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
	 MD_two_LS = 0;
 8000ab0:	4bc5      	ldr	r3, [pc, #788]	; (8000dc8 <Motor_Driver+0x338>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]

	 MD_three_HS = 0;
 8000ab6:	4bc5      	ldr	r3, [pc, #788]	; (8000dcc <Motor_Driver+0x33c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
	 MD_three_LS = 0;
 8000abc:	4bc4      	ldr	r3, [pc, #784]	; (8000dd0 <Motor_Driver+0x340>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]

	switch (Hall_T) {
 8000ac2:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	f200 8233 	bhi.w	8000f34 <Motor_Driver+0x4a4>
 8000ace:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <Motor_Driver+0x44>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000e85 	.word	0x08000e85
 8000ad8:	08000dd5 	.word	0x08000dd5
 8000adc:	08000d0d 	.word	0x08000d0d
 8000ae0:	08000c55 	.word	0x08000c55
 8000ae4:	08000b9d 	.word	0x08000b9d
 8000ae8:	08000aed 	.word	0x08000aed

	case 6:
		// 2 > 1
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aee:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 f840 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000afa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000afe:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000b02:	2201      	movs	r2, #1
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 f838 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000b0a:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000b0e:	461a      	mov	r2, r3
 8000b10:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b14:	3308      	adds	r3, #8
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fe03 	bl	8002724 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000b1e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000b22:	461a      	mov	r2, r3
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 fdfa 	bl	8002724 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_RESET);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	89b9      	ldrh	r1, [r7, #12]
 8000b34:	2200      	movs	r2, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f81f 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000b3c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b40:	461a      	mov	r2, r3
 8000b42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b46:	3308      	adds	r3, #8
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fd4e 	bl	80025ec <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, User_Speed);
 8000b50:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d104      	bne.n	8000b62 <Motor_Driver+0xd2>
 8000b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b5a:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000b5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b60:	e015      	b.n	8000b8e <Motor_Driver+0xfe>
 8000b62:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d104      	bne.n	8000b74 <Motor_Driver+0xe4>
 8000b6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b6c:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000b70:	6393      	str	r3, [r2, #56]	; 0x38
 8000b72:	e00c      	b.n	8000b8e <Motor_Driver+0xfe>
 8000b74:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d104      	bne.n	8000b86 <Motor_Driver+0xf6>
 8000b7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b7e:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000b82:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000b84:	e003      	b.n	8000b8e <Motor_Driver+0xfe>
 8000b86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b88:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40

		 MD_two_HS = 1;
 8000b8e:	4b8d      	ldr	r3, [pc, #564]	; (8000dc4 <Motor_Driver+0x334>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
		 MD_one_LS = 1;
 8000b94:	4b8a      	ldr	r3, [pc, #552]	; (8000dc0 <Motor_Driver+0x330>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]

		break;
 8000b9a:	e1cb      	b.n	8000f34 <Motor_Driver+0x4a4>
	case 5:
		// 3 > 2
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000b9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ba0:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 ffe7 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	89b9      	ldrh	r1, [r7, #12]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 ffe1 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000bb8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fdad 	bl	8002724 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000bca:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000bce:	461a      	mov	r2, r3
 8000bd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fda3 	bl	8002724 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_RESET);
 8000bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000be0:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000be4:	2200      	movs	r2, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 ffc7 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000bec:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fcf6 	bl	80025ec <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, User_Speed);
 8000c00:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d105      	bne.n	8000c14 <Motor_Driver+0x184>
 8000c08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c0c:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
 8000c12:	e018      	b.n	8000c46 <Motor_Driver+0x1b6>
 8000c14:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d105      	bne.n	8000c28 <Motor_Driver+0x198>
 8000c1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000c20:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000c24:	6393      	str	r3, [r2, #56]	; 0x38
 8000c26:	e00e      	b.n	8000c46 <Motor_Driver+0x1b6>
 8000c28:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d105      	bne.n	8000c3c <Motor_Driver+0x1ac>
 8000c30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000c34:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000c38:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c3a:	e004      	b.n	8000c46 <Motor_Driver+0x1b6>
 8000c3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000c40:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40

		 MD_three_HS = 1;
 8000c46:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <Motor_Driver+0x33c>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
		 MD_two_LS = 1;
 8000c4c:	4b5e      	ldr	r3, [pc, #376]	; (8000dc8 <Motor_Driver+0x338>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]

		break;
 8000c52:	e16f      	b.n	8000f34 <Motor_Driver+0x4a4>
	case 4:
		// 3 > 1
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000c58:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 ff8b 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c66:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 ff84 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000c72:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000c76:	461a      	mov	r2, r3
 8000c78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fd4f 	bl	8002724 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000c86:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fd46 	bl	8002724 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_RESET);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	89b9      	ldrh	r1, [r7, #12]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 ff6b 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000ca4:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000ca8:	461a      	mov	r2, r3
 8000caa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000cae:	3308      	adds	r3, #8
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fc9a 	bl	80025ec <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, User_Speed);
 8000cb8:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d105      	bne.n	8000ccc <Motor_Driver+0x23c>
 8000cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000cc4:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cca:	e018      	b.n	8000cfe <Motor_Driver+0x26e>
 8000ccc:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d105      	bne.n	8000ce0 <Motor_Driver+0x250>
 8000cd4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000cd8:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000cdc:	6393      	str	r3, [r2, #56]	; 0x38
 8000cde:	e00e      	b.n	8000cfe <Motor_Driver+0x26e>
 8000ce0:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d105      	bne.n	8000cf4 <Motor_Driver+0x264>
 8000ce8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000cec:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000cf0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000cf2:	e004      	b.n	8000cfe <Motor_Driver+0x26e>
 8000cf4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000cf8:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
		/* =====================================
		HAL_TIM_PWM_Start(&MD_two.HS_Tim, MD_two.HST_Channel);
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, (int) User_Speed/2);
		*/

		 MD_three_HS = 1;
 8000cfe:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <Motor_Driver+0x33c>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
		 MD_one_LS = 1;
 8000d04:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <Motor_Driver+0x330>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]


		break;
 8000d0a:	e113      	b.n	8000f34 <Motor_Driver+0x4a4>
	case 3:
		// 1 > 3
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	89b9      	ldrh	r1, [r7, #12]
 8000d10:	2201      	movs	r2, #1
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 ff31 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d1a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 ff2a 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000d26:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d30:	3308      	adds	r3, #8
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fcf5 	bl	8002724 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000d3a:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000d3e:	461a      	mov	r2, r3
 8000d40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000d44:	3308      	adds	r3, #8
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 fceb 	bl	8002724 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_RESET);
 8000d4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d52:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000d56:	2200      	movs	r2, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 ff0e 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000d5e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d62:	461a      	mov	r2, r3
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fc3e 	bl	80025ec <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, User_Speed);
 8000d70:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d104      	bne.n	8000d82 <Motor_Driver+0x2f2>
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000d7e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d80:	e015      	b.n	8000dae <Motor_Driver+0x31e>
 8000d82:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d104      	bne.n	8000d94 <Motor_Driver+0x304>
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000d90:	6393      	str	r3, [r2, #56]	; 0x38
 8000d92:	e00c      	b.n	8000dae <Motor_Driver+0x31e>
 8000d94:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d104      	bne.n	8000da6 <Motor_Driver+0x316>
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000da2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000da4:	e003      	b.n	8000dae <Motor_Driver+0x31e>
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40

		 MD_one_HS = 1;
 8000dae:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <Motor_Driver+0x32c>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
		 MD_three_LS = 1;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <Motor_Driver+0x340>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]

		break;
 8000dba:	e0bb      	b.n	8000f34 <Motor_Driver+0x4a4>
 8000dbc:	2000014f 	.word	0x2000014f
 8000dc0:	20000150 	.word	0x20000150
 8000dc4:	20000151 	.word	0x20000151
 8000dc8:	20000152 	.word	0x20000152
 8000dcc:	20000153 	.word	0x20000153
 8000dd0:	20000154 	.word	0x20000154
	case 2:
		// 2 > 3
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dd6:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fecc 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	89b9      	ldrh	r1, [r7, #12]
 8000de6:	2201      	movs	r2, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fec6 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000dee:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000df2:	461a      	mov	r2, r3
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fc92 	bl	8002724 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000e00:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000e04:	461a      	mov	r2, r3
 8000e06:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 fc88 	bl	8002724 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_RESET);
 8000e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e18:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 feab 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000e24:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000e28:	461a      	mov	r2, r3
 8000e2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e2e:	3308      	adds	r3, #8
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fbda 	bl	80025ec <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, User_Speed);
 8000e38:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d104      	bne.n	8000e4a <Motor_Driver+0x3ba>
 8000e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e42:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34
 8000e48:	e015      	b.n	8000e76 <Motor_Driver+0x3e6>
 8000e4a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d104      	bne.n	8000e5c <Motor_Driver+0x3cc>
 8000e52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e54:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000e58:	6393      	str	r3, [r2, #56]	; 0x38
 8000e5a:	e00c      	b.n	8000e76 <Motor_Driver+0x3e6>
 8000e5c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	d104      	bne.n	8000e6e <Motor_Driver+0x3de>
 8000e64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e66:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000e6a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000e6c:	e003      	b.n	8000e76 <Motor_Driver+0x3e6>
 8000e6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e70:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
		/* =====================================/
		HAL_TIM_PWM_Start(&MD_one.HS_Tim, MD_one.HST_Channel);
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, (int) User_Speed/2);
		*/

		 MD_two_HS = 1;
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <Motor_Driver+0x4b0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
		 MD_three_LS = 1;
 8000e7c:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <Motor_Driver+0x4b4>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]


		break;
 8000e82:	e057      	b.n	8000f34 <Motor_Driver+0x4a4>
	case 1:
		// 1 > 2
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	89b9      	ldrh	r1, [r7, #12]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fe75 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000e90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e94:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fe6d 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000ea0:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000eaa:	3308      	adds	r3, #8
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fc38 	bl	8002724 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000eb4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fc2e 	bl	8002724 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_RESET);
 8000ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eca:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 fe52 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000ed6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000eda:	461a      	mov	r2, r3
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fb82 	bl	80025ec <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, User_Speed);
 8000ee8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d104      	bne.n	8000efa <Motor_Driver+0x46a>
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef8:	e015      	b.n	8000f26 <Motor_Driver+0x496>
 8000efa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d104      	bne.n	8000f0c <Motor_Driver+0x47c>
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000f08:	6393      	str	r3, [r2, #56]	; 0x38
 8000f0a:	e00c      	b.n	8000f26 <Motor_Driver+0x496>
 8000f0c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d104      	bne.n	8000f1e <Motor_Driver+0x48e>
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000f1a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f1c:	e003      	b.n	8000f26 <Motor_Driver+0x496>
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
		/* =====================================
		HAL_TIM_PWM_Start(&MD_three.HS_Tim, MD_three.HST_Channel);
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, (int) User_Speed/2);
		*/

		 MD_one_HS = 1;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <Motor_Driver+0x4b8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
		 MD_two_LS = 1;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <Motor_Driver+0x4bc>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]

		break;
 8000f32:	bf00      	nop
	}

}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4770      	bx	lr
 8000f40:	20000151 	.word	0x20000151
 8000f44:	20000154 	.word	0x20000154
 8000f48:	2000014f 	.word	0x2000014f
 8000f4c:	20000152 	.word	0x20000152

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_MspInit+0x60>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_MspInit+0x60>)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <HAL_CAN_MspInit+0x8c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d131      	bne.n	8001044 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_CAN_MspInit+0x90>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	4a1a      	ldr	r2, [pc, #104]	; (8001050 <HAL_CAN_MspInit+0x90>)
 8000fe6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fea:	61d3      	str	r3, [r2, #28]
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_CAN_MspInit+0x90>)
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_CAN_MspInit+0x90>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_CAN_MspInit+0x90>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_CAN_MspInit+0x90>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001014:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4619      	mov	r1, r3
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_CAN_MspInit+0x94>)
 8001026:	f000 fc15 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_CAN_MspInit+0x94>)
 8001040:	f000 fc08 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40006400 	.word	0x40006400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800

08001058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <HAL_TIM_Base_MspInit+0x8c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d114      	bne.n	8001094 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <HAL_TIM_Base_MspInit+0x90>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <HAL_TIM_Base_MspInit+0x90>)
 8001070:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HAL_TIM_Base_MspInit+0x90>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2019      	movs	r0, #25
 8001088:	f000 fbad 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800108c:	2019      	movs	r0, #25
 800108e:	f000 fbc6 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001092:	e022      	b.n	80010da <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800109c:	d10c      	bne.n	80010b8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_TIM_Base_MspInit+0x90>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_TIM_Base_MspInit+0x90>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_TIM_Base_MspInit+0x90>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
}
 80010b6:	e010      	b.n	80010da <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <HAL_TIM_Base_MspInit+0x94>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d10b      	bne.n	80010da <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_TIM_Base_MspInit+0x90>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_TIM_Base_MspInit+0x90>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_TIM_Base_MspInit+0x90>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40012c00 	.word	0x40012c00
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40000400 	.word	0x40000400

080010f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110e:	d12b      	bne.n	8001168 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_TIM_MspPostInit+0xec>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a31      	ldr	r2, [pc, #196]	; (80011dc <HAL_TIM_MspPostInit+0xec>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_TIM_MspPostInit+0xec>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001128:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2302      	movs	r3, #2
 8001134:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4828      	ldr	r0, [pc, #160]	; (80011e0 <HAL_TIM_MspPostInit+0xf0>)
 800113e:	f000 fb89 	bl	8001854 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <HAL_TIM_MspPostInit+0xf4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <HAL_TIM_MspPostInit+0xf4>)
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001166:	e034      	b.n	80011d2 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <HAL_TIM_MspPostInit+0xf8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12f      	bne.n	80011d2 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_TIM_MspPostInit+0xec>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a19      	ldr	r2, [pc, #100]	; (80011dc <HAL_TIM_MspPostInit+0xec>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_TIM_MspPostInit+0xec>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_TIM_MspPostInit+0xec>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a13      	ldr	r2, [pc, #76]	; (80011dc <HAL_TIM_MspPostInit+0xec>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_TIM_MspPostInit+0xec>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2302      	movs	r3, #2
 80011ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <HAL_TIM_MspPostInit+0xfc>)
 80011b6:	f000 fb4d 	bl	8001854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011ba:	2302      	movs	r3, #2
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2302      	movs	r3, #2
 80011c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <HAL_TIM_MspPostInit+0xf0>)
 80011ce:	f000 fb41 	bl	8001854 <HAL_GPIO_Init>
}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40010800 	.word	0x40010800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f87f 	bl	8001338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <TIM1_UP_IRQHandler+0x10>)
 8001246:	f001 fad1 	bl	80027ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000050 	.word	0x20000050

08001254 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	; (8001298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	; (80012a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001286:	f7ff ffe5 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f002 f861 	bl	8003350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128e:	f7ff f895 	bl	80003bc <main>
  bx lr
 8001292:	4770      	bx	lr
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800129c:	08003404 	.word	0x08003404
  ldr r2, =_sbss
 80012a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012a4:	2000015c 	.word	0x2000015c

080012a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC1_2_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_Init+0x28>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_Init+0x28>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 fa87 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c2:	200f      	movs	r0, #15
 80012c4:	f000 f808 	bl	80012d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c8:	f7ff fe48 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40022000 	.word	0x40022000

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x54>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x58>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fa9f 	bl	800183a <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00e      	b.n	8001324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d80a      	bhi.n	8001322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f000 fa67 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_InitTick+0x5c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000000 	.word	0x20000000
 8001330:	20000008 	.word	0x20000008
 8001334:	20000004 	.word	0x20000004

08001338 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_IncTick+0x1c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_IncTick+0x20>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a03      	ldr	r2, [pc, #12]	; (8001358 <HAL_IncTick+0x20>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000008 	.word	0x20000008
 8001358:	20000158 	.word	0x20000158

0800135c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <HAL_GetTick+0x10>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	20000158 	.word	0x20000158

08001370 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0ed      	b.n	800155e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fe16 	bl	8000fc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a4:	f7ff ffda 	bl	800135c <HAL_GetTick>
 80013a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013aa:	e012      	b.n	80013d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013ac:	f7ff ffd6 	bl	800135c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b0a      	cmp	r3, #10
 80013b8:	d90b      	bls.n	80013d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2205      	movs	r2, #5
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0c5      	b.n	800155e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0e5      	beq.n	80013ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0202 	bic.w	r2, r2, #2
 80013ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f0:	f7ff ffb4 	bl	800135c <HAL_GetTick>
 80013f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013f6:	e012      	b.n	800141e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013f8:	f7ff ffb0 	bl	800135c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b0a      	cmp	r3, #10
 8001404:	d90b      	bls.n	800141e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2205      	movs	r2, #5
 8001416:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e09f      	b.n	800155e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1e5      	bne.n	80013f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7e1b      	ldrb	r3, [r3, #24]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d108      	bne.n	8001446 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e007      	b.n	8001456 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7e5b      	ldrb	r3, [r3, #25]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d108      	bne.n	8001470 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	e007      	b.n	8001480 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800147e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7e9b      	ldrb	r3, [r3, #26]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d108      	bne.n	800149a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0220 	orr.w	r2, r2, #32
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e007      	b.n	80014aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0220 	bic.w	r2, r2, #32
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7edb      	ldrb	r3, [r3, #27]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d108      	bne.n	80014c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0210 	bic.w	r2, r2, #16
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e007      	b.n	80014d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0210 	orr.w	r2, r2, #16
 80014d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7f1b      	ldrb	r3, [r3, #28]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d108      	bne.n	80014ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0208 	orr.w	r2, r2, #8
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e007      	b.n	80014fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0208 	bic.w	r2, r2, #8
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7f5b      	ldrb	r3, [r3, #29]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d108      	bne.n	8001518 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0204 	orr.w	r2, r2, #4
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e007      	b.n	8001528 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0204 	bic.w	r2, r2, #4
 8001526:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	ea42 0103 	orr.w	r1, r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d12e      	bne.n	80015d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2202      	movs	r2, #2
 800157e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0201 	bic.w	r2, r2, #1
 8001590:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001592:	f7ff fee3 	bl	800135c <HAL_GetTick>
 8001596:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001598:	e012      	b.n	80015c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800159a:	f7ff fedf 	bl	800135c <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b0a      	cmp	r3, #10
 80015a6:	d90b      	bls.n	80015c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2205      	movs	r2, #5
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e012      	b.n	80015e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1e5      	bne.n	800159a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e006      	b.n	80015e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d002      	beq.n	800160c <HAL_CAN_ActivateNotification+0x1e>
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d109      	bne.n	8001620 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6959      	ldr	r1, [r3, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	e006      	b.n	800162e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
  }
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db0b      	blt.n	80016c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	4906      	ldr	r1, [pc, #24]	; (80016d0 <__NVIC_EnableIRQ+0x34>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	2001      	movs	r0, #1
 80016be:	fa00 f202 	lsl.w	r2, r0, r2
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff ff90 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff2d 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff42 	bl	8001680 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff90 	bl	8001728 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5f 	bl	80016d4 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff35 	bl	800169c <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b08b      	sub	sp, #44	; 0x2c
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	e161      	b.n	8001b2c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001868:	2201      	movs	r2, #1
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8150 	bne.w	8001b26 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a97      	ldr	r2, [pc, #604]	; (8001ae8 <HAL_GPIO_Init+0x294>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d05e      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 8001890:	4a95      	ldr	r2, [pc, #596]	; (8001ae8 <HAL_GPIO_Init+0x294>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d875      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 8001896:	4a95      	ldr	r2, [pc, #596]	; (8001aec <HAL_GPIO_Init+0x298>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d058      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 800189c:	4a93      	ldr	r2, [pc, #588]	; (8001aec <HAL_GPIO_Init+0x298>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d86f      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018a2:	4a93      	ldr	r2, [pc, #588]	; (8001af0 <HAL_GPIO_Init+0x29c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d052      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018a8:	4a91      	ldr	r2, [pc, #580]	; (8001af0 <HAL_GPIO_Init+0x29c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d869      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ae:	4a91      	ldr	r2, [pc, #580]	; (8001af4 <HAL_GPIO_Init+0x2a0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d04c      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018b4:	4a8f      	ldr	r2, [pc, #572]	; (8001af4 <HAL_GPIO_Init+0x2a0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d863      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ba:	4a8f      	ldr	r2, [pc, #572]	; (8001af8 <HAL_GPIO_Init+0x2a4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d046      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018c0:	4a8d      	ldr	r2, [pc, #564]	; (8001af8 <HAL_GPIO_Init+0x2a4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d85d      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018c6:	2b12      	cmp	r3, #18
 80018c8:	d82a      	bhi.n	8001920 <HAL_GPIO_Init+0xcc>
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d859      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <HAL_GPIO_Init+0x80>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	0800194f 	.word	0x0800194f
 80018d8:	08001929 	.word	0x08001929
 80018dc:	0800193b 	.word	0x0800193b
 80018e0:	0800197d 	.word	0x0800197d
 80018e4:	08001983 	.word	0x08001983
 80018e8:	08001983 	.word	0x08001983
 80018ec:	08001983 	.word	0x08001983
 80018f0:	08001983 	.word	0x08001983
 80018f4:	08001983 	.word	0x08001983
 80018f8:	08001983 	.word	0x08001983
 80018fc:	08001983 	.word	0x08001983
 8001900:	08001983 	.word	0x08001983
 8001904:	08001983 	.word	0x08001983
 8001908:	08001983 	.word	0x08001983
 800190c:	08001983 	.word	0x08001983
 8001910:	08001983 	.word	0x08001983
 8001914:	08001983 	.word	0x08001983
 8001918:	08001931 	.word	0x08001931
 800191c:	08001945 	.word	0x08001945
 8001920:	4a76      	ldr	r2, [pc, #472]	; (8001afc <HAL_GPIO_Init+0x2a8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001926:	e02c      	b.n	8001982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e029      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	3304      	adds	r3, #4
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e024      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	3308      	adds	r3, #8
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e01f      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	330c      	adds	r3, #12
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e01a      	b.n	8001984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001956:	2304      	movs	r3, #4
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e013      	b.n	8001984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001964:	2308      	movs	r3, #8
 8001966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	611a      	str	r2, [r3, #16]
          break;
 800196e:	e009      	b.n	8001984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001970:	2308      	movs	r3, #8
 8001972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	615a      	str	r2, [r3, #20]
          break;
 800197a:	e003      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x130>
          break;
 8001982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2bff      	cmp	r3, #255	; 0xff
 8001988:	d801      	bhi.n	800198e <HAL_GPIO_Init+0x13a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_Init+0x13e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2bff      	cmp	r3, #255	; 0xff
 8001998:	d802      	bhi.n	80019a0 <HAL_GPIO_Init+0x14c>
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x152>
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	3b08      	subs	r3, #8
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	210f      	movs	r1, #15
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	6a39      	ldr	r1, [r7, #32]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80a9 	beq.w	8001b26 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d4:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_GPIO_Init+0x2ac>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a49      	ldr	r2, [pc, #292]	; (8001b00 <HAL_GPIO_Init+0x2ac>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_GPIO_Init+0x2ac>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ec:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <HAL_GPIO_Init+0x2b0>)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3d      	ldr	r2, [pc, #244]	; (8001b08 <HAL_GPIO_Init+0x2b4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1e0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3c      	ldr	r2, [pc, #240]	; (8001b0c <HAL_GPIO_Init+0x2b8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1dc>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a3b      	ldr	r2, [pc, #236]	; (8001b10 <HAL_GPIO_Init+0x2bc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1d8>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e004      	b.n	8001a36 <HAL_GPIO_Init+0x1e2>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e002      	b.n	8001a36 <HAL_GPIO_Init+0x1e2>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <HAL_GPIO_Init+0x1e2>
 8001a34:	2300      	movs	r3, #0
 8001a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a38:	f002 0203 	and.w	r2, r2, #3
 8001a3c:	0092      	lsls	r2, r2, #2
 8001a3e:	4093      	lsls	r3, r2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a46:	492f      	ldr	r1, [pc, #188]	; (8001b04 <HAL_GPIO_Init+0x2b0>)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	492b      	ldr	r1, [pc, #172]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4927      	ldr	r1, [pc, #156]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4921      	ldr	r1, [pc, #132]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	491d      	ldr	r1, [pc, #116]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4917      	ldr	r1, [pc, #92]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4913      	ldr	r1, [pc, #76]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01f      	beq.n	8001b18 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	490d      	ldr	r1, [pc, #52]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
 8001ae4:	e01f      	b.n	8001b26 <HAL_GPIO_Init+0x2d2>
 8001ae6:	bf00      	nop
 8001ae8:	10320000 	.word	0x10320000
 8001aec:	10310000 	.word	0x10310000
 8001af0:	10220000 	.word	0x10220000
 8001af4:	10210000 	.word	0x10210000
 8001af8:	10120000 	.word	0x10120000
 8001afc:	10110000 	.word	0x10110000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	40010800 	.word	0x40010800
 8001b0c:	40010c00 	.word	0x40010c00
 8001b10:	40011000 	.word	0x40011000
 8001b14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_GPIO_Init+0x2f4>)
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4909      	ldr	r1, [pc, #36]	; (8001b48 <HAL_GPIO_Init+0x2f4>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	3301      	adds	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f47f ae96 	bne.w	8001868 <HAL_GPIO_Init+0x14>
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	372c      	adds	r7, #44	; 0x2c
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	807b      	strh	r3, [r7, #2]
 8001b86:	4613      	mov	r3, r2
 8001b88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8a:	787b      	ldrb	r3, [r7, #1]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b90:	887a      	ldrh	r2, [r7, #2]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b96:	e003      	b.n	8001ba0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	041a      	lsls	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	611a      	str	r2, [r3, #16]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e272      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8087 	beq.w	8001cda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bcc:	4b92      	ldr	r3, [pc, #584]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd8:	4b8f      	ldr	r3, [pc, #572]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d112      	bne.n	8001c0a <HAL_RCC_OscConfig+0x5e>
 8001be4:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf0:	d10b      	bne.n	8001c0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf2:	4b89      	ldr	r3, [pc, #548]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d06c      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x12c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d168      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e24c      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x76>
 8001c14:	4b80      	ldr	r3, [pc, #512]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a7f      	ldr	r2, [pc, #508]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	e02e      	b.n	8001c80 <HAL_RCC_OscConfig+0xd4>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x98>
 8001c2a:	4b7b      	ldr	r3, [pc, #492]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a7a      	ldr	r2, [pc, #488]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b78      	ldr	r3, [pc, #480]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a77      	ldr	r2, [pc, #476]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01d      	b.n	8001c80 <HAL_RCC_OscConfig+0xd4>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0xbc>
 8001c4e:	4b72      	ldr	r3, [pc, #456]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a71      	ldr	r2, [pc, #452]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6e      	ldr	r2, [pc, #440]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0xd4>
 8001c68:	4b6b      	ldr	r3, [pc, #428]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a6a      	ldr	r2, [pc, #424]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a67      	ldr	r2, [pc, #412]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fb68 	bl	800135c <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fb64 	bl	800135c <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e200      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0xe4>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fb54 	bl	800135c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fb50 	bl	800135c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1ec      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x10c>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d063      	beq.n	8001dae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce6:	4b4c      	ldr	r3, [pc, #304]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cf2:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d11c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x18c>
 8001cfe:	4b46      	ldr	r3, [pc, #280]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_RCC_OscConfig+0x176>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e1c0      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4939      	ldr	r1, [pc, #228]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	e03a      	b.n	8001dae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d40:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7ff fb09 	bl	800135c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fb05 	bl	800135c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1a1      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4927      	ldr	r1, [pc, #156]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	e015      	b.n	8001dae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fae8 	bl	800135c <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff fae4 	bl	800135c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e180      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d03a      	beq.n	8001e30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d019      	beq.n	8001df6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fac8 	bl	800135c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fac4 	bl	800135c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e160      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 faa6 	bl	8002340 <RCC_Delay>
 8001df4:	e01c      	b.n	8001e30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff faae 	bl	800135c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e02:	e00f      	b.n	8001e24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff faaa 	bl	800135c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d908      	bls.n	8001e24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e146      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	42420000 	.word	0x42420000
 8001e20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	4b92      	ldr	r3, [pc, #584]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e9      	bne.n	8001e04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a6 	beq.w	8001f8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e42:	4b8b      	ldr	r3, [pc, #556]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10d      	bne.n	8001e6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a87      	ldr	r2, [pc, #540]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	61d3      	str	r3, [r2, #28]
 8001e5a:	4b85      	ldr	r3, [pc, #532]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e66:	2301      	movs	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	4b82      	ldr	r3, [pc, #520]	; (8002074 <HAL_RCC_OscConfig+0x4c8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d118      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e76:	4b7f      	ldr	r3, [pc, #508]	; (8002074 <HAL_RCC_OscConfig+0x4c8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7e      	ldr	r2, [pc, #504]	; (8002074 <HAL_RCC_OscConfig+0x4c8>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fa6b 	bl	800135c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8a:	f7ff fa67 	bl	800135c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b64      	cmp	r3, #100	; 0x64
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e103      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	4b75      	ldr	r3, [pc, #468]	; (8002074 <HAL_RCC_OscConfig+0x4c8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d106      	bne.n	8001ebe <HAL_RCC_OscConfig+0x312>
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a6e      	ldr	r2, [pc, #440]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	e02d      	b.n	8001f1a <HAL_RCC_OscConfig+0x36e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x334>
 8001ec6:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a69      	ldr	r2, [pc, #420]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	6213      	str	r3, [r2, #32]
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a66      	ldr	r2, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	6213      	str	r3, [r2, #32]
 8001ede:	e01c      	b.n	8001f1a <HAL_RCC_OscConfig+0x36e>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d10c      	bne.n	8001f02 <HAL_RCC_OscConfig+0x356>
 8001ee8:	4b61      	ldr	r3, [pc, #388]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a60      	ldr	r2, [pc, #384]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	e00b      	b.n	8001f1a <HAL_RCC_OscConfig+0x36e>
 8001f02:	4b5b      	ldr	r3, [pc, #364]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a5a      	ldr	r2, [pc, #360]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	4b58      	ldr	r3, [pc, #352]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a57      	ldr	r2, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d015      	beq.n	8001f4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7ff fa1b 	bl	800135c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7ff fa17 	bl	800135c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0b1      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ee      	beq.n	8001f2a <HAL_RCC_OscConfig+0x37e>
 8001f4c:	e014      	b.n	8001f78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fa05 	bl	800135c <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7ff fa01 	bl	800135c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e09b      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ee      	bne.n	8001f56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7e:	4b3c      	ldr	r3, [pc, #240]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	4a3b      	ldr	r2, [pc, #236]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8087 	beq.w	80020a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d061      	beq.n	8002064 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d146      	bne.n	8002036 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_RCC_OscConfig+0x4cc>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff f9d5 	bl	800135c <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff f9d1 	bl	800135c <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e06d      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fdc:	d108      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4921      	ldr	r1, [pc, #132]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a19      	ldr	r1, [r3, #32]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	430b      	orrs	r3, r1
 8002002:	491b      	ldr	r1, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x4cc>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7ff f9a5 	bl	800135c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7ff f9a1 	bl	800135c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e03d      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x46a>
 8002034:	e035      	b.n	80020a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCC_OscConfig+0x4cc>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff f98e 	bl	800135c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002044:	f7ff f98a 	bl	800135c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e026      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x498>
 8002062:	e01e      	b.n	80020a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e019      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
 8002078:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCC_OscConfig+0x500>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	429a      	cmp	r2, r3
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0d0      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d910      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b67      	ldr	r3, [pc, #412]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 0207 	bic.w	r2, r3, #7
 80020da:	4965      	ldr	r1, [pc, #404]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b63      	ldr	r3, [pc, #396]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0b8      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800210c:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a58      	ldr	r2, [pc, #352]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002116:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002124:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a52      	ldr	r2, [pc, #328]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800212e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002130:	4b50      	ldr	r3, [pc, #320]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	494d      	ldr	r1, [pc, #308]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d040      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b47      	ldr	r3, [pc, #284]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d115      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e07f      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216e:	4b41      	ldr	r3, [pc, #260]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e073      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06b      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f023 0203 	bic.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4936      	ldr	r1, [pc, #216]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a0:	f7ff f8dc 	bl	800135c <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	e00a      	b.n	80021be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a8:	f7ff f8d8 	bl	800135c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e053      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 020c 	and.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d1eb      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d210      	bcs.n	8002200 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 0207 	bic.w	r2, r3, #7
 80021e6:	4922      	ldr	r1, [pc, #136]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e032      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4916      	ldr	r1, [pc, #88]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	490e      	ldr	r1, [pc, #56]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800223e:	f000 f821 	bl	8002284 <HAL_RCC_GetSysClockFreq>
 8002242:	4602      	mov	r2, r0
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	490a      	ldr	r1, [pc, #40]	; (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002250:	5ccb      	ldrb	r3, [r1, r3]
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	4a09      	ldr	r2, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1cc>)
 8002258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1d0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f83a 	bl	80012d8 <HAL_InitTick>

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40022000 	.word	0x40022000
 8002274:	40021000 	.word	0x40021000
 8002278:	080033ec 	.word	0x080033ec
 800227c:	20000000 	.word	0x20000000
 8002280:	20000004 	.word	0x20000004

08002284 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002284:	b490      	push	{r4, r7}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_GetSysClockFreq+0xac>)
 800228c:	1d3c      	adds	r4, r7, #4
 800228e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002294:	f240 2301 	movw	r3, #513	; 0x201
 8002298:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d002      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x40>
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x46>
 80022c2:	e02b      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022c6:	623b      	str	r3, [r7, #32]
      break;
 80022c8:	e02b      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	0c9b      	lsrs	r3, r3, #18
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3328      	adds	r3, #40	; 0x28
 80022d4:	443b      	add	r3, r7
 80022d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d012      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0c5b      	lsrs	r3, r3, #17
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	3328      	adds	r3, #40	; 0x28
 80022f2:	443b      	add	r3, r7
 80022f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022fe:	fb03 f202 	mul.w	r2, r3, r2
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
 800230a:	e004      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	4a0b      	ldr	r2, [pc, #44]	; (800233c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	623b      	str	r3, [r7, #32]
      break;
 800231a:	e002      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetSysClockFreq+0xb4>)
 800231e:	623b      	str	r3, [r7, #32]
      break;
 8002320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002322:	6a3b      	ldr	r3, [r7, #32]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bc90      	pop	{r4, r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	080033dc 	.word	0x080033dc
 8002334:	40021000 	.word	0x40021000
 8002338:	007a1200 	.word	0x007a1200
 800233c:	003d0900 	.word	0x003d0900

08002340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <RCC_Delay+0x34>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <RCC_Delay+0x38>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0a5b      	lsrs	r3, r3, #9
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800235c:	bf00      	nop
  }
  while (Delay --);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	60fa      	str	r2, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <RCC_Delay+0x1c>
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	20000000 	.word	0x20000000
 8002378:	10624dd3 	.word	0x10624dd3

0800237c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e041      	b.n	8002412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fe58 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3304      	adds	r3, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f000 fcc4 	bl	8002d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d001      	beq.n	8002434 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e02d      	b.n	8002490 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a16      	ldr	r2, [pc, #88]	; (800249c <HAL_TIM_Base_Start+0x80>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d009      	beq.n	800245a <HAL_TIM_Base_Start+0x3e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d004      	beq.n	800245a <HAL_TIM_Base_Start+0x3e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <HAL_TIM_Base_Start+0x84>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d111      	bne.n	800247e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b06      	cmp	r3, #6
 800246a:	d010      	beq.n	800248e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247c:	e007      	b.n	800248e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40000400 	.word	0x40000400

080024a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d001      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e035      	b.n	8002528 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a16      	ldr	r2, [pc, #88]	; (8002534 <HAL_TIM_Base_Start_IT+0x90>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d009      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x4e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e6:	d004      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x4e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_TIM_Base_Start_IT+0x94>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d111      	bne.n	8002516 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d010      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002514:	e007      	b.n	8002526 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40000400 	.word	0x40000400

0800253c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e041      	b.n	80025d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f839 	bl	80025da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3304      	adds	r3, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f000 fbe4 	bl	8002d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_TIM_PWM_Start+0x24>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	bf14      	ite	ne
 8002608:	2301      	movne	r3, #1
 800260a:	2300      	moveq	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e022      	b.n	8002656 <HAL_TIM_PWM_Start+0x6a>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b04      	cmp	r3, #4
 8002614:	d109      	bne.n	800262a <HAL_TIM_PWM_Start+0x3e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	bf14      	ite	ne
 8002622:	2301      	movne	r3, #1
 8002624:	2300      	moveq	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	e015      	b.n	8002656 <HAL_TIM_PWM_Start+0x6a>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d109      	bne.n	8002644 <HAL_TIM_PWM_Start+0x58>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e008      	b.n	8002656 <HAL_TIM_PWM_Start+0x6a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e059      	b.n	8002712 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <HAL_TIM_PWM_Start+0x82>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800266c:	e013      	b.n	8002696 <HAL_TIM_PWM_Start+0xaa>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d104      	bne.n	800267e <HAL_TIM_PWM_Start+0x92>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800267c:	e00b      	b.n	8002696 <HAL_TIM_PWM_Start+0xaa>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d104      	bne.n	800268e <HAL_TIM_PWM_Start+0xa2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800268c:	e003      	b.n	8002696 <HAL_TIM_PWM_Start+0xaa>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2202      	movs	r2, #2
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2201      	movs	r2, #1
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fdc8 	bl	8003234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_TIM_PWM_Start+0x130>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d107      	bne.n	80026be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_TIM_PWM_Start+0x130>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_TIM_PWM_Start+0xf0>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d0:	d004      	beq.n	80026dc <HAL_TIM_PWM_Start+0xf0>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_TIM_PWM_Start+0x134>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d111      	bne.n	8002700 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d010      	beq.n	8002710 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026fe:	e007      	b.n	8002710 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40000400 	.word	0x40000400

08002724 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2200      	movs	r2, #0
 8002734:	6839      	ldr	r1, [r7, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fd7c 	bl	8003234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a29      	ldr	r2, [pc, #164]	; (80027e8 <HAL_TIM_PWM_Stop+0xc4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d117      	bne.n	8002776 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_TIM_PWM_Stop+0x52>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	f240 4344 	movw	r3, #1092	; 0x444
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d107      	bne.n	8002776 <HAL_TIM_PWM_Stop+0x52>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10f      	bne.n	80027a6 <HAL_TIM_PWM_Stop+0x82>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a1a      	ldr	r2, [r3, #32]
 800278c:	f240 4344 	movw	r3, #1092	; 0x444
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <HAL_TIM_PWM_Stop+0x82>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d104      	bne.n	80027b6 <HAL_TIM_PWM_Stop+0x92>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b4:	e013      	b.n	80027de <HAL_TIM_PWM_Stop+0xba>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d104      	bne.n	80027c6 <HAL_TIM_PWM_Stop+0xa2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c4:	e00b      	b.n	80027de <HAL_TIM_PWM_Stop+0xba>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d104      	bne.n	80027d6 <HAL_TIM_PWM_Stop+0xb2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d4:	e003      	b.n	80027de <HAL_TIM_PWM_Stop+0xba>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40012c00 	.word	0x40012c00

080027ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d122      	bne.n	8002848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b02      	cmp	r3, #2
 800280e:	d11b      	bne.n	8002848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0202 	mvn.w	r2, #2
 8002818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fa6f 	bl	8002d12 <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fa62 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fa71 	bl	8002d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d122      	bne.n	800289c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b04      	cmp	r3, #4
 8002862:	d11b      	bne.n	800289c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0204 	mvn.w	r2, #4
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2202      	movs	r2, #2
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fa45 	bl	8002d12 <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa38 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fa47 	bl	8002d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d122      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d11b      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0208 	mvn.w	r2, #8
 80028c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2204      	movs	r2, #4
 80028c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fa1b 	bl	8002d12 <HAL_TIM_IC_CaptureCallback>
 80028dc:	e005      	b.n	80028ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fa0e 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fa1d 	bl	8002d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d122      	bne.n	8002944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b10      	cmp	r3, #16
 800290a:	d11b      	bne.n	8002944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0210 	mvn.w	r2, #16
 8002914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2208      	movs	r2, #8
 800291a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f9f1 	bl	8002d12 <HAL_TIM_IC_CaptureCallback>
 8002930:	e005      	b.n	800293e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f9e4 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f9f3 	bl	8002d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d10e      	bne.n	8002970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0201 	mvn.w	r2, #1
 8002968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fd fcfc 	bl	8000368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	d10e      	bne.n	800299c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d107      	bne.n	800299c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fcd1 	bl	800333e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d10e      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b4:	2b40      	cmp	r3, #64	; 0x40
 80029b6:	d107      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f9b7 	bl	8002d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d107      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0220 	mvn.w	r2, #32
 80029ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fc9c 	bl	800332c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0ac      	b.n	8002b70 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	f200 809f 	bhi.w	8002b64 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002a26:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002a61 	.word	0x08002a61
 8002a30:	08002b65 	.word	0x08002b65
 8002a34:	08002b65 	.word	0x08002b65
 8002a38:	08002b65 	.word	0x08002b65
 8002a3c:	08002aa1 	.word	0x08002aa1
 8002a40:	08002b65 	.word	0x08002b65
 8002a44:	08002b65 	.word	0x08002b65
 8002a48:	08002b65 	.word	0x08002b65
 8002a4c:	08002ae3 	.word	0x08002ae3
 8002a50:	08002b65 	.word	0x08002b65
 8002a54:	08002b65 	.word	0x08002b65
 8002a58:	08002b65 	.word	0x08002b65
 8002a5c:	08002b23 	.word	0x08002b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f9c6 	bl	8002df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0208 	orr.w	r2, r2, #8
 8002a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
      break;
 8002a9e:	e062      	b.n	8002b66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fa0c 	bl	8002ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6999      	ldr	r1, [r3, #24]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	619a      	str	r2, [r3, #24]
      break;
 8002ae0:	e041      	b.n	8002b66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fa55 	bl	8002f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0208 	orr.w	r2, r2, #8
 8002afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0204 	bic.w	r2, r2, #4
 8002b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      break;
 8002b20:	e021      	b.n	8002b66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fa9f 	bl	800306c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	61da      	str	r2, [r3, #28]
      break;
 8002b62:	e000      	b.n	8002b66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIM_ConfigClockSource+0x18>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e0b3      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x180>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc8:	d03e      	beq.n	8002c48 <HAL_TIM_ConfigClockSource+0xd0>
 8002bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bce:	f200 8087 	bhi.w	8002ce0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd6:	f000 8085 	beq.w	8002ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	d87f      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x168>
 8002be0:	2b70      	cmp	r3, #112	; 0x70
 8002be2:	d01a      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0xa2>
 8002be4:	2b70      	cmp	r3, #112	; 0x70
 8002be6:	d87b      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x168>
 8002be8:	2b60      	cmp	r3, #96	; 0x60
 8002bea:	d050      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x116>
 8002bec:	2b60      	cmp	r3, #96	; 0x60
 8002bee:	d877      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x168>
 8002bf0:	2b50      	cmp	r3, #80	; 0x50
 8002bf2:	d03c      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0xf6>
 8002bf4:	2b50      	cmp	r3, #80	; 0x50
 8002bf6:	d873      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x168>
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d058      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x136>
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	d86f      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x168>
 8002c00:	2b30      	cmp	r3, #48	; 0x30
 8002c02:	d064      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x156>
 8002c04:	2b30      	cmp	r3, #48	; 0x30
 8002c06:	d86b      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x168>
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d060      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x156>
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d867      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x168>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d05c      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x156>
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d05a      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c18:	e062      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f000 fae4 	bl	80031f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	609a      	str	r2, [r3, #8]
      break;
 8002c46:	e04e      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6899      	ldr	r1, [r3, #8]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f000 facd 	bl	80031f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c6a:	609a      	str	r2, [r3, #8]
      break;
 8002c6c:	e03b      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 fa44 	bl	8003108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2150      	movs	r1, #80	; 0x50
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fa9b 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e02b      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 fa62 	bl	8003164 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2160      	movs	r1, #96	; 0x60
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fa8b 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002cac:	e01b      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 fa24 	bl	8003108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2140      	movs	r1, #64	; 0x40
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fa7b 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e00b      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4610      	mov	r0, r2
 8002cda:	f000 fa72 	bl	80031c2 <TIM_ITRx_SetConfig>
        break;
 8002cde:	e002      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ce0:	bf00      	nop
 8002ce2:	e000      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ce4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <TIM_Base_SetConfig+0xa8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <TIM_Base_SetConfig+0x28>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d003      	beq.n	8002d70 <TIM_Base_SetConfig+0x28>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <TIM_Base_SetConfig+0xac>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d108      	bne.n	8002d82 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <TIM_Base_SetConfig+0xa8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <TIM_Base_SetConfig+0x52>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d003      	beq.n	8002d9a <TIM_Base_SetConfig+0x52>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <TIM_Base_SetConfig+0xac>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d108      	bne.n	8002dac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <TIM_Base_SetConfig+0xa8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d103      	bne.n	8002de0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	615a      	str	r2, [r3, #20]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40000400 	.word	0x40000400

08002df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f023 0201 	bic.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f023 0302 	bic.w	r3, r3, #2
 8002e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <TIM_OC1_SetConfig+0xc8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10c      	bne.n	8002e6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0308 	bic.w	r3, r3, #8
 8002e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <TIM_OC1_SetConfig+0xc8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d111      	bne.n	8002e9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	621a      	str	r2, [r3, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40012c00 	.word	0x40012c00

08002ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0210 	bic.w	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0320 	bic.w	r3, r3, #32
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <TIM_OC2_SetConfig+0xd0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d10d      	bne.n	8002f40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <TIM_OC2_SetConfig+0xd0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d113      	bne.n	8002f70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40012c00 	.word	0x40012c00

08002f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0303 	bic.w	r3, r3, #3
 8002fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <TIM_OC3_SetConfig+0xd0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10d      	bne.n	8003012 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <TIM_OC3_SetConfig+0xd0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d113      	bne.n	8003042 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	621a      	str	r2, [r3, #32]
}
 800305c:	bf00      	nop
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40012c00 	.word	0x40012c00

0800306c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	031b      	lsls	r3, r3, #12
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a0f      	ldr	r2, [pc, #60]	; (8003104 <TIM_OC4_SetConfig+0x98>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d109      	bne.n	80030e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	019b      	lsls	r3, r3, #6
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	40012c00 	.word	0x40012c00

08003108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f023 0201 	bic.w	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f023 030a 	bic.w	r3, r3, #10
 8003144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	f023 0210 	bic.w	r2, r3, #16
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800318e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	031b      	lsls	r3, r3, #12
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	621a      	str	r2, [r3, #32]
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	f043 0307 	orr.w	r3, r3, #7
 80031e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	609a      	str	r2, [r3, #8]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b087      	sub	sp, #28
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003210:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	021a      	lsls	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	431a      	orrs	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4313      	orrs	r3, r2
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	609a      	str	r2, [r3, #8]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2201      	movs	r2, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a1a      	ldr	r2, [r3, #32]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a1a      	ldr	r2, [r3, #32]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003290:	2302      	movs	r3, #2
 8003292:	e041      	b.n	8003318 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a14      	ldr	r2, [pc, #80]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e0:	d004      	beq.n	80032ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a10      	ldr	r2, [pc, #64]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10c      	bne.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40000400 	.word	0x40000400

0800332c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <__libc_init_array>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	2600      	movs	r6, #0
 8003354:	4d0c      	ldr	r5, [pc, #48]	; (8003388 <__libc_init_array+0x38>)
 8003356:	4c0d      	ldr	r4, [pc, #52]	; (800338c <__libc_init_array+0x3c>)
 8003358:	1b64      	subs	r4, r4, r5
 800335a:	10a4      	asrs	r4, r4, #2
 800335c:	42a6      	cmp	r6, r4
 800335e:	d109      	bne.n	8003374 <__libc_init_array+0x24>
 8003360:	f000 f830 	bl	80033c4 <_init>
 8003364:	2600      	movs	r6, #0
 8003366:	4d0a      	ldr	r5, [pc, #40]	; (8003390 <__libc_init_array+0x40>)
 8003368:	4c0a      	ldr	r4, [pc, #40]	; (8003394 <__libc_init_array+0x44>)
 800336a:	1b64      	subs	r4, r4, r5
 800336c:	10a4      	asrs	r4, r4, #2
 800336e:	42a6      	cmp	r6, r4
 8003370:	d105      	bne.n	800337e <__libc_init_array+0x2e>
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	f855 3b04 	ldr.w	r3, [r5], #4
 8003378:	4798      	blx	r3
 800337a:	3601      	adds	r6, #1
 800337c:	e7ee      	b.n	800335c <__libc_init_array+0xc>
 800337e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003382:	4798      	blx	r3
 8003384:	3601      	adds	r6, #1
 8003386:	e7f2      	b.n	800336e <__libc_init_array+0x1e>
 8003388:	080033fc 	.word	0x080033fc
 800338c:	080033fc 	.word	0x080033fc
 8003390:	080033fc 	.word	0x080033fc
 8003394:	08003400 	.word	0x08003400

08003398 <memcpy>:
 8003398:	440a      	add	r2, r1
 800339a:	4291      	cmp	r1, r2
 800339c:	f100 33ff 	add.w	r3, r0, #4294967295
 80033a0:	d100      	bne.n	80033a4 <memcpy+0xc>
 80033a2:	4770      	bx	lr
 80033a4:	b510      	push	{r4, lr}
 80033a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033aa:	4291      	cmp	r1, r2
 80033ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033b0:	d1f9      	bne.n	80033a6 <memcpy+0xe>
 80033b2:	bd10      	pop	{r4, pc}

080033b4 <memset>:
 80033b4:	4603      	mov	r3, r0
 80033b6:	4402      	add	r2, r0
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d100      	bne.n	80033be <memset+0xa>
 80033bc:	4770      	bx	lr
 80033be:	f803 1b01 	strb.w	r1, [r3], #1
 80033c2:	e7f9      	b.n	80033b8 <memset+0x4>

080033c4 <_init>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr

080033d0 <_fini>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	bf00      	nop
 80033d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d6:	bc08      	pop	{r3}
 80033d8:	469e      	mov	lr, r3
 80033da:	4770      	bx	lr
