
F103_Pertinaks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c78  08002c78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c78  08002c78  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c78  08002c78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c78  08002c78  00012c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08002c8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002c8c  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009453  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a4  00000000  00000000  00029488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016791  00000000  00000000  0002bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a74e  00000000  00000000  00042741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008446a  00000000  00000000  0004ce8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d12f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c5c  00000000  00000000  000d134c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c40 	.word	0x08002c40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c40 	.word	0x08002c40

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8000152:	af3c      	add	r7, sp, #240	; 0xf0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 ff04 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f968 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 fad6 	bl	800070c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000160:	f000 f9e0 	bl	8000524 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 fa52 	bl	800060c <MX_TIM3_Init>
  MX_CAN_Init();
 8000168:	f000 f9a6 	bl	80004b8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Init(&htim2);
 800016c:	48ab      	ldr	r0, [pc, #684]	; (800041c <main+0x2d0>)
 800016e:	f001 fecd 	bl	8001f0c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim3);
 8000172:	48ab      	ldr	r0, [pc, #684]	; (8000420 <main+0x2d4>)
 8000174:	f001 feca 	bl	8001f0c <HAL_TIM_Base_Init>

	Mosfet_Driver_Typedef MD_One;
	MD_One.LS_Pin = GPIOB;
 8000178:	4baa      	ldr	r3, [pc, #680]	; (8000424 <main+0x2d8>)
 800017a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	MD_One.LSP_Number = GPIO_PIN_10;
 800017e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000182:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	MD_One.HS_Tim = htim2;
 8000186:	4aa5      	ldr	r2, [pc, #660]	; (800041c <main+0x2d0>)
 8000188:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800018c:	4611      	mov	r1, r2
 800018e:	2248      	movs	r2, #72	; 0x48
 8000190:	4618      	mov	r0, r3
 8000192:	f002 fd3f 	bl	8002c14 <memcpy>
	MD_One.HST_Channel = TIM_CHANNEL_4;
 8000196:	230c      	movs	r3, #12
 8000198:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114

	Mosfet_Driver_Typedef MD_Two;
	MD_Two.LS_Pin = GPIOB;
 800019c:	4ba1      	ldr	r3, [pc, #644]	; (8000424 <main+0x2d8>)
 800019e:	673b      	str	r3, [r7, #112]	; 0x70
	MD_Two.LSP_Number = GPIO_PIN_0;
 80001a0:	2301      	movs	r3, #1
 80001a2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	MD_Two.HS_Tim = htim3;
 80001a6:	4a9e      	ldr	r2, [pc, #632]	; (8000420 <main+0x2d4>)
 80001a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80001ac:	4611      	mov	r1, r2
 80001ae:	2248      	movs	r2, #72	; 0x48
 80001b0:	4618      	mov	r0, r3
 80001b2:	f002 fd2f 	bl	8002c14 <memcpy>
	MD_Two.HST_Channel = TIM_CHANNEL_4;
 80001b6:	230c      	movs	r3, #12
 80001b8:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

	Mosfet_Driver_Typedef MD_Three;
	MD_Three.LS_Pin = GPIOA;
 80001bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80001c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001c4:	4a98      	ldr	r2, [pc, #608]	; (8000428 <main+0x2dc>)
 80001c6:	601a      	str	r2, [r3, #0]
	MD_Three.LSP_Number = GPIO_PIN_6;
 80001c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80001cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001d0:	2240      	movs	r2, #64	; 0x40
 80001d2:	809a      	strh	r2, [r3, #4]
	MD_Three.HS_Tim = htim3;
 80001d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80001d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001dc:	4a90      	ldr	r2, [pc, #576]	; (8000420 <main+0x2d4>)
 80001de:	3308      	adds	r3, #8
 80001e0:	4611      	mov	r1, r2
 80001e2:	2248      	movs	r2, #72	; 0x48
 80001e4:	4618      	mov	r0, r3
 80001e6:	f002 fd15 	bl	8002c14 <memcpy>
	MD_Three.HST_Channel = TIM_CHANNEL_2;
 80001ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80001ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001f2:	2204      	movs	r2, #4
 80001f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	// --

	// Hall Sensor Typedef
	Hall_Sensor_Typedef Hall_A;
	Hall_A.H_Pin = GPIOB;
 80001f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80001fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000200:	4a88      	ldr	r2, [pc, #544]	; (8000424 <main+0x2d8>)
 8000202:	601a      	str	r2, [r3, #0]
	Hall_A.HP_Number = GPIO_PIN_7;
 8000204:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000208:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800020c:	2280      	movs	r2, #128	; 0x80
 800020e:	809a      	strh	r2, [r3, #4]

	Hall_Sensor_Typedef Hall_B;
	Hall_B.H_Pin = GPIOB;
 8000210:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000214:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000218:	4a82      	ldr	r2, [pc, #520]	; (8000424 <main+0x2d8>)
 800021a:	601a      	str	r2, [r3, #0]
	Hall_B.HP_Number = GPIO_PIN_8;
 800021c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000220:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000228:	809a      	strh	r2, [r3, #4]

	Hall_Sensor_Typedef Hall_C;
	Hall_C.H_Pin = GPIOB;
 800022a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800022e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000232:	4a7c      	ldr	r2, [pc, #496]	; (8000424 <main+0x2d8>)
 8000234:	601a      	str	r2, [r3, #0]
	Hall_C.HP_Number = GPIO_PIN_9;
 8000236:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800023a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800023e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000242:	809a      	strh	r2, [r3, #4]

	MX_GPIO_Init();
 8000244:	f000 fa62 	bl	800070c <MX_GPIO_Init>
	MX_TIM2_Init();
 8000248:	f000 f96c 	bl	8000524 <MX_TIM2_Init>
	MX_TIM3_Init();
 800024c:	f000 f9de 	bl	800060c <MX_TIM3_Init>

	HAL_TIM_Base_Start(&htim2);
 8000250:	4872      	ldr	r0, [pc, #456]	; (800041c <main+0x2d0>)
 8000252:	f001 feab 	bl	8001fac <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8000256:	4872      	ldr	r0, [pc, #456]	; (8000420 <main+0x2d4>)
 8000258:	f001 fea8 	bl	8001fac <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t HA_Res = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t HB_Res = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
	uint8_t HC_Res = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
	uint8_t HT_Res = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124


	uint8_t Motor_speed = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	uint32_t Value_msec = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t Is_break = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	 Hall List Three => 3, 5, 4, 1, 2, 6
	 */

	while (1){

		Is_break = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000286:	2108      	movs	r1, #8
 8000288:	4866      	ldr	r0, [pc, #408]	; (8000424 <main+0x2d8>)
 800028a:	f001 fa27 	bl	80016dc <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

		/* HAL SENSÖR OKUMASI*/
		HA_Res = HAL_GPIO_ReadPin(Hall_A.H_Pin, Hall_A.HP_Number);
 8000294:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000298:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80002a6:	889b      	ldrh	r3, [r3, #4]
 80002a8:	4619      	mov	r1, r3
 80002aa:	4610      	mov	r0, r2
 80002ac:	f001 fa16 	bl	80016dc <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		HB_Res = HAL_GPIO_ReadPin(Hall_B.H_Pin, Hall_B.HP_Number);
 80002b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80002c8:	889b      	ldrh	r3, [r3, #4]
 80002ca:	4619      	mov	r1, r3
 80002cc:	4610      	mov	r0, r2
 80002ce:	f001 fa05 	bl	80016dc <HAL_GPIO_ReadPin>
 80002d2:	4603      	mov	r3, r0
 80002d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		HC_Res = HAL_GPIO_ReadPin(Hall_C.H_Pin, Hall_C.HP_Number);
 80002d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80002ea:	889b      	ldrh	r3, [r3, #4]
 80002ec:	4619      	mov	r1, r3
 80002ee:	4610      	mov	r0, r2
 80002f0:	f001 f9f4 	bl	80016dc <HAL_GPIO_ReadPin>
 80002f4:	4603      	mov	r3, r0
 80002f6:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125

		HB_Res = HB_Res << 1;
 80002fa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		HC_Res = HC_Res << 2;
 8000304:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
		HT_Res = HC_Res | HB_Res | HA_Res;
 800030e:	f897 2125 	ldrb.w	r2, [r7, #293]	; 0x125
 8000312:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8000316:	4313      	orrs	r3, r2
 8000318:	b2da      	uxtb	r2, r3
 800031a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800031e:	4313      	orrs	r3, r2
 8000320:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124

		Speed_Sensor(HT_Res,Value_msec ,Motor_speed, Value_msec);
 8000324:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000328:	b2d9      	uxtb	r1, r3
 800032a:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 800032e:	f897 0124 	ldrb.w	r0, [r7, #292]	; 0x124
 8000332:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000336:	f000 fc67 	bl	8000c08 <Speed_Sensor>
		/* SÜRERSE GENEL SÜRÜCÜ*/
		if (Is_break) {
 800033a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800033e:	2b00      	cmp	r3, #0
 8000340:	d045      	beq.n	80003ce <main+0x282>
			HAL_TIM_PWM_Stop(&MD_One.HS_Tim, MD_One.HST_Channel);
 8000342:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000346:	461a      	mov	r2, r3
 8000348:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800034c:	3308      	adds	r3, #8
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f001 ff63 	bl	800221c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&MD_Two.HS_Tim, MD_Two.HST_Channel);
 8000356:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800035a:	461a      	mov	r2, r3
 800035c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000360:	3308      	adds	r3, #8
 8000362:	4611      	mov	r1, r2
 8000364:	4618      	mov	r0, r3
 8000366:	f001 ff59 	bl	800221c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&MD_Three.HS_Tim, MD_Three.HST_Channel);
 800036a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800036e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000376:	461a      	mov	r2, r3
 8000378:	f107 031c 	add.w	r3, r7, #28
 800037c:	3308      	adds	r3, #8
 800037e:	4611      	mov	r1, r2
 8000380:	4618      	mov	r0, r3
 8000382:	f001 ff4b 	bl	800221c <HAL_TIM_PWM_Stop>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000386:	2201      	movs	r2, #1
 8000388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800038c:	4826      	ldr	r0, [pc, #152]	; (8000428 <main+0x2dc>)
 800038e:	f001 f9bc 	bl	800170a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MD_One.LS_Pin, MD_One.LSP_Number, GPIO_PIN_RESET);
 8000392:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000396:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 800039a:	2200      	movs	r2, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f001 f9b4 	bl	800170a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MD_Two.LS_Pin, MD_Two.LSP_Number, GPIO_PIN_RESET);
 80003a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80003a4:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 80003a8:	2200      	movs	r2, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f9ad 	bl	800170a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MD_Three.LS_Pin, MD_Three.LSP_Number, GPIO_PIN_RESET);
 80003b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80003b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003b8:	6818      	ldr	r0, [r3, #0]
 80003ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80003be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003c2:	889b      	ldrh	r3, [r3, #4]
 80003c4:	2200      	movs	r2, #0
 80003c6:	4619      	mov	r1, r3
 80003c8:	f001 f99f 	bl	800170a <HAL_GPIO_WritePin>
 80003cc:	e75b      	b.n	8000286 <main+0x13a>

			}
		else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003d4:	4814      	ldr	r0, [pc, #80]	; (8000428 <main+0x2dc>)
 80003d6:	f001 f998 	bl	800170a <HAL_GPIO_WritePin>
			Motor_Driver(MD_One, MD_Two, MD_Three, HT_Res);
 80003da:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 80003de:	933b      	str	r3, [sp, #236]	; 0xec
 80003e0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80003e4:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80003e8:	ab26      	add	r3, sp, #152	; 0x98
 80003ea:	4611      	mov	r1, r2
 80003ec:	2254      	movs	r2, #84	; 0x54
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 fc10 	bl	8002c14 <memcpy>
 80003f4:	a811      	add	r0, sp, #68	; 0x44
 80003f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003fa:	2254      	movs	r2, #84	; 0x54
 80003fc:	4619      	mov	r1, r3
 80003fe:	f002 fc09 	bl	8002c14 <memcpy>
 8000402:	4668      	mov	r0, sp
 8000404:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000408:	2244      	movs	r2, #68	; 0x44
 800040a:	4619      	mov	r1, r3
 800040c:	f002 fc02 	bl	8002c14 <memcpy>
 8000410:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000414:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000416:	f000 f9e7 	bl	80007e8 <Motor_Driver>
		Is_break = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800041a:	e734      	b.n	8000286 <main+0x13a>
 800041c:	20000050 	.word	0x20000050
 8000420:	20000098 	.word	0x20000098
 8000424:	40010c00 	.word	0x40010c00
 8000428:	40010800 	.word	0x40010800

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b090      	sub	sp, #64	; 0x40
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0318 	add.w	r3, r7, #24
 8000436:	2228      	movs	r2, #40	; 0x28
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f002 fbf8 	bl	8002c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800044e:	2301      	movs	r3, #1
 8000450:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000456:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	2301      	movs	r3, #1
 800045e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000460:	2302      	movs	r3, #2
 8000462:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000468:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800046a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800046e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000470:	f107 0318 	add.w	r3, r7, #24
 8000474:	4618      	mov	r0, r3
 8000476:	f001 f961 	bl	800173c <HAL_RCC_OscConfig>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000480:	f000 fbe7 	bl	8000c52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000484:	230f      	movs	r3, #15
 8000486:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000488:	2302      	movs	r3, #2
 800048a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2102      	movs	r1, #2
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 fbce 	bl	8001c40 <HAL_RCC_ClockConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004aa:	f000 fbd2 	bl	8000c52 <Error_Handler>
  }
}
 80004ae:	bf00      	nop
 80004b0:	3740      	adds	r7, #64	; 0x40
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80004bc:	4b17      	ldr	r3, [pc, #92]	; (800051c <MX_CAN_Init+0x64>)
 80004be:	4a18      	ldr	r2, [pc, #96]	; (8000520 <MX_CAN_Init+0x68>)
 80004c0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80004c2:	4b16      	ldr	r3, [pc, #88]	; (800051c <MX_CAN_Init+0x64>)
 80004c4:	2212      	movs	r2, #18
 80004c6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <MX_CAN_Init+0x64>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ce:	4b13      	ldr	r3, [pc, #76]	; (800051c <MX_CAN_Init+0x64>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_CAN_Init+0x64>)
 80004d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004da:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <MX_CAN_Init+0x64>)
 80004de:	2200      	movs	r2, #0
 80004e0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_CAN_Init+0x64>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_CAN_Init+0x64>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_CAN_Init+0x64>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_CAN_Init+0x64>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_CAN_Init+0x64>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_CAN_Init+0x64>)
 8000502:	2200      	movs	r2, #0
 8000504:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_CAN_Init+0x64>)
 8000508:	f000 fd8c 	bl	8001024 <HAL_CAN_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000512:	f000 fb9e 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000028 	.word	0x20000028
 8000520:	40006400 	.word	0x40006400

08000524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08e      	sub	sp, #56	; 0x38
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000538:	f107 0320 	add.w	r3, r7, #32
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
 8000550:	615a      	str	r2, [r3, #20]
 8000552:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000554:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <MX_TIM2_Init+0xe4>)
 8000556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800055a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 800055c:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <MX_TIM2_Init+0xe4>)
 800055e:	2223      	movs	r2, #35	; 0x23
 8000560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b29      	ldr	r3, [pc, #164]	; (8000608 <MX_TIM2_Init+0xe4>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <MX_TIM2_Init+0xe4>)
 800056a:	2263      	movs	r2, #99	; 0x63
 800056c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056e:	4b26      	ldr	r3, [pc, #152]	; (8000608 <MX_TIM2_Init+0xe4>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <MX_TIM2_Init+0xe4>)
 8000576:	2200      	movs	r2, #0
 8000578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800057a:	4823      	ldr	r0, [pc, #140]	; (8000608 <MX_TIM2_Init+0xe4>)
 800057c:	f001 fcc6 	bl	8001f0c <HAL_TIM_Base_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000586:	f000 fb64 	bl	8000c52 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800058a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000594:	4619      	mov	r1, r3
 8000596:	481c      	ldr	r0, [pc, #112]	; (8000608 <MX_TIM2_Init+0xe4>)
 8000598:	f001 ff62 	bl	8002460 <HAL_TIM_ConfigClockSource>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80005a2:	f000 fb56 	bl	8000c52 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005a6:	4818      	ldr	r0, [pc, #96]	; (8000608 <MX_TIM2_Init+0xe4>)
 80005a8:	f001 fd44 	bl	8002034 <HAL_TIM_PWM_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80005b2:	f000 fb4e 	bl	8000c52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4619      	mov	r1, r3
 80005c4:	4810      	ldr	r0, [pc, #64]	; (8000608 <MX_TIM2_Init+0xe4>)
 80005c6:	f002 faa9 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80005d0:	f000 fb3f 	bl	8000c52 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d4:	2360      	movs	r3, #96	; 0x60
 80005d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	220c      	movs	r2, #12
 80005e8:	4619      	mov	r1, r3
 80005ea:	4807      	ldr	r0, [pc, #28]	; (8000608 <MX_TIM2_Init+0xe4>)
 80005ec:	f001 fe7a 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80005f6:	f000 fb2c 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005fa:	4803      	ldr	r0, [pc, #12]	; (8000608 <MX_TIM2_Init+0xe4>)
 80005fc:	f000 fbdc 	bl	8000db8 <HAL_TIM_MspPostInit>

}
 8000600:	bf00      	nop
 8000602:	3738      	adds	r7, #56	; 0x38
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000050 	.word	0x20000050

0800060c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08e      	sub	sp, #56	; 0x38
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
 8000638:	615a      	str	r2, [r3, #20]
 800063a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800063c:	4b31      	ldr	r3, [pc, #196]	; (8000704 <MX_TIM3_Init+0xf8>)
 800063e:	4a32      	ldr	r2, [pc, #200]	; (8000708 <MX_TIM3_Init+0xfc>)
 8000640:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 8000642:	4b30      	ldr	r3, [pc, #192]	; (8000704 <MX_TIM3_Init+0xf8>)
 8000644:	2223      	movs	r2, #35	; 0x23
 8000646:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <MX_TIM3_Init+0xf8>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800064e:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_TIM3_Init+0xf8>)
 8000650:	2263      	movs	r2, #99	; 0x63
 8000652:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <MX_TIM3_Init+0xf8>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_TIM3_Init+0xf8>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000660:	4828      	ldr	r0, [pc, #160]	; (8000704 <MX_TIM3_Init+0xf8>)
 8000662:	f001 fc53 	bl	8001f0c <HAL_TIM_Base_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800066c:	f000 faf1 	bl	8000c52 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067a:	4619      	mov	r1, r3
 800067c:	4821      	ldr	r0, [pc, #132]	; (8000704 <MX_TIM3_Init+0xf8>)
 800067e:	f001 feef 	bl	8002460 <HAL_TIM_ConfigClockSource>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000688:	f000 fae3 	bl	8000c52 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800068c:	481d      	ldr	r0, [pc, #116]	; (8000704 <MX_TIM3_Init+0xf8>)
 800068e:	f001 fcd1 	bl	8002034 <HAL_TIM_PWM_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 fadb 	bl	8000c52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4619      	mov	r1, r3
 80006aa:	4816      	ldr	r0, [pc, #88]	; (8000704 <MX_TIM3_Init+0xf8>)
 80006ac:	f002 fa36 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80006b6:	f000 facc 	bl	8000c52 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ba:	2360      	movs	r3, #96	; 0x60
 80006bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2204      	movs	r2, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_TIM3_Init+0xf8>)
 80006d2:	f001 fe07 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80006dc:	f000 fab9 	bl	8000c52 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	220c      	movs	r2, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <MX_TIM3_Init+0xf8>)
 80006e8:	f001 fdfc 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80006f2:	f000 faae 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <MX_TIM3_Init+0xf8>)
 80006f8:	f000 fb5e 	bl	8000db8 <HAL_TIM_MspPostInit>

}
 80006fc:	bf00      	nop
 80006fe:	3738      	adds	r7, #56	; 0x38
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000098 	.word	0x20000098
 8000708:	40000400 	.word	0x40000400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000720:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a2d      	ldr	r2, [pc, #180]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000726:	f043 0320 	orr.w	r3, r3, #32
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_GPIO_Init+0xd0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0320 	and.w	r3, r3, #32
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_GPIO_Init+0xd0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a27      	ldr	r2, [pc, #156]	; (80007dc <MX_GPIO_Init+0xd0>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a21      	ldr	r2, [pc, #132]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_GPIO_Init+0xd0>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	481c      	ldr	r0, [pc, #112]	; (80007e0 <MX_GPIO_Init+0xd4>)
 800076e:	f000 ffcc 	bl	800170a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f240 4101 	movw	r1, #1025	; 0x401
 8000778:	481a      	ldr	r0, [pc, #104]	; (80007e4 <MX_GPIO_Init+0xd8>)
 800077a:	f000 ffc6 	bl	800170a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2302      	movs	r3, #2
 800078c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	4619      	mov	r1, r3
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000796:	f000 fe25 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 800079a:	f240 4301 	movw	r3, #1025	; 0x401
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_GPIO_Init+0xd8>)
 80007b4:	f000 fe16 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80007b8:	f44f 7362 	mov.w	r3, #904	; 0x388
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_GPIO_Init+0xd8>)
 80007ce:	f000 fe09 	bl	80013e4 <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	40010c00 	.word	0x40010c00

080007e8 <Motor_Driver>:

/* USER CODE BEGIN 4 */
void Motor_Driver(Mosfet_Driver_Typedef MD_one, Mosfet_Driver_Typedef MD_two,
		Mosfet_Driver_Typedef MD_three, uint8_t Hall_T) {
 80007e8:	b084      	sub	sp, #16
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	f107 0c08 	add.w	ip, r7, #8
 80007f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fc:	48cc      	ldr	r0, [pc, #816]	; (8000b30 <Motor_Driver+0x348>)
 80007fe:	f000 ff84 	bl	800170a <HAL_GPIO_WritePin>
	switch (Hall_T) {
 8000802:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8000806:	3b01      	subs	r3, #1
 8000808:	2b05      	cmp	r3, #5
 800080a:	f200 81ed 	bhi.w	8000be8 <Motor_Driver+0x400>
 800080e:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <Motor_Driver+0x2c>)
 8000810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000814:	0800082d 	.word	0x0800082d
 8000818:	080008c9 	.word	0x080008c9
 800081c:	0800096d 	.word	0x0800096d
 8000820:	08000a11 	.word	0x08000a11
 8000824:	08000aad 	.word	0x08000aad
 8000828:	08000b4d 	.word	0x08000b4d

	case 1:
		// 2 > 1
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 800082c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800082e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000832:	2201      	movs	r2, #1
 8000834:	4618      	mov	r0, r3
 8000836:	f000 ff68 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 800083a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800083e:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000842:	2201      	movs	r2, #1
 8000844:	4618      	mov	r0, r3
 8000846:	f000 ff60 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 800084a:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 800084e:	461a      	mov	r2, r3
 8000850:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000854:	3308      	adds	r3, #8
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fcdf 	bl	800221c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 800085e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000862:	461a      	mov	r2, r3
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fcd6 	bl	800221c <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_RESET);
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	89b9      	ldrh	r1, [r7, #12]
 8000874:	2200      	movs	r2, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f000 ff47 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_two.HS_Tim, MD_two.HST_Channel);
 800087c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000880:	461a      	mov	r2, r3
 8000882:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000886:	3308      	adds	r3, #8
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fc2a 	bl	80020e4 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000890:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000894:	2b00      	cmp	r3, #0
 8000896:	d103      	bne.n	80008a0 <Motor_Driver+0xb8>
 8000898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800089a:	220a      	movs	r2, #10
 800089c:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 800089e:	e1aa      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 80008a0:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d103      	bne.n	80008b0 <Motor_Driver+0xc8>
 80008a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80008aa:	230a      	movs	r3, #10
 80008ac:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80008ae:	e1a2      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 80008b0:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80008b4:	2b08      	cmp	r3, #8
 80008b6:	d103      	bne.n	80008c0 <Motor_Driver+0xd8>
 80008b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80008ba:	230a      	movs	r3, #10
 80008bc:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80008be:	e19a      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 80008c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80008c2:	230a      	movs	r3, #10
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80008c6:	e196      	b.n	8000bf6 <Motor_Driver+0x40e>
	case 2:
		// 3 > 2
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 80008c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80008cc:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80008d0:	2201      	movs	r2, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 ff19 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	89b9      	ldrh	r1, [r7, #12]
 80008dc:	2201      	movs	r2, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 ff13 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 80008e4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80008e8:	461a      	mov	r2, r3
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fc93 	bl	800221c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 80008f6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80008fa:	461a      	mov	r2, r3
 80008fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000900:	3308      	adds	r3, #8
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fc89 	bl	800221c <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_RESET);
 800090a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800090c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fef9 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000918:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 800091c:	461a      	mov	r2, r3
 800091e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000922:	3308      	adds	r3, #8
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fbdc 	bl	80020e4 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 800092c:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000930:	2b00      	cmp	r3, #0
 8000932:	d104      	bne.n	800093e <Motor_Driver+0x156>
 8000934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000938:	220a      	movs	r2, #10
 800093a:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 800093c:	e15b      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 800093e:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000942:	2b04      	cmp	r3, #4
 8000944:	d104      	bne.n	8000950 <Motor_Driver+0x168>
 8000946:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800094a:	230a      	movs	r3, #10
 800094c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800094e:	e152      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 8000950:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000954:	2b08      	cmp	r3, #8
 8000956:	d104      	bne.n	8000962 <Motor_Driver+0x17a>
 8000958:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800095c:	230a      	movs	r3, #10
 800095e:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000960:	e149      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 8000962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000966:	230a      	movs	r3, #10
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800096a:	e144      	b.n	8000bf6 <Motor_Driver+0x40e>
	case 3:
		// 3 > 1
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 800096c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000970:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000974:	2201      	movs	r2, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fec7 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 800097c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800097e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000982:	2201      	movs	r2, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fec0 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 800098a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800098e:	461a      	mov	r2, r3
 8000990:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000994:	3308      	adds	r3, #8
 8000996:	4611      	mov	r1, r2
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fc3f 	bl	800221c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 800099e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80009a2:	461a      	mov	r2, r3
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fc36 	bl	800221c <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_RESET);
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	89b9      	ldrh	r1, [r7, #12]
 80009b4:	2200      	movs	r2, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fea7 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_three.HS_Tim, MD_three.HST_Channel);
 80009bc:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80009c0:	461a      	mov	r2, r3
 80009c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80009c6:	3308      	adds	r3, #8
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fb8a 	bl	80020e4 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 80009d0:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d104      	bne.n	80009e2 <Motor_Driver+0x1fa>
 80009d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80009dc:	220a      	movs	r2, #10
 80009de:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 80009e0:	e109      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 80009e2:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d104      	bne.n	80009f4 <Motor_Driver+0x20c>
 80009ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80009ee:	230a      	movs	r3, #10
 80009f0:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80009f2:	e100      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 80009f4:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80009f8:	2b08      	cmp	r3, #8
 80009fa:	d104      	bne.n	8000a06 <Motor_Driver+0x21e>
 80009fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000a00:	230a      	movs	r3, #10
 8000a02:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000a04:	e0f7      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 8000a06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000a0e:	e0f2      	b.n	8000bf6 <Motor_Driver+0x40e>
	case 4:
		// 1 > 3
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	89b9      	ldrh	r1, [r7, #12]
 8000a14:	2201      	movs	r2, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fe77 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a1e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000a22:	2201      	movs	r2, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fe70 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000a2a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000a2e:	461a      	mov	r2, r3
 8000a30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a34:	3308      	adds	r3, #8
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fbef 	bl	800221c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000a3e:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000a42:	461a      	mov	r2, r3
 8000a44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000a48:	3308      	adds	r3, #8
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fbe5 	bl	800221c <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_RESET);
 8000a52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a56:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fe54 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000a62:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a66:	461a      	mov	r2, r3
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fb38 	bl	80020e4 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000a74:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d103      	bne.n	8000a84 <Motor_Driver+0x29c>
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	220a      	movs	r2, #10
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8000a82:	e0b8      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000a84:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d103      	bne.n	8000a94 <Motor_Driver+0x2ac>
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	230a      	movs	r3, #10
 8000a90:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000a92:	e0b0      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000a94:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d103      	bne.n	8000aa4 <Motor_Driver+0x2bc>
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000aa2:	e0a8      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000aaa:	e0a4      	b.n	8000bf6 <Motor_Driver+0x40e>
	case 5:
		// 2 > 3
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aae:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fe28 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	89b9      	ldrh	r1, [r7, #12]
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fe22 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000ac6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000aca:	461a      	mov	r2, r3
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fba2 	bl	800221c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000ad8:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000adc:	461a      	mov	r2, r3
 8000ade:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000ae2:	3308      	adds	r3, #8
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fb98 	bl	800221c <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_RESET);
 8000aec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000af0:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000af4:	2200      	movs	r2, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fe07 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000afc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b00:	461a      	mov	r2, r3
 8000b02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b06:	3308      	adds	r3, #8
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 faea 	bl	80020e4 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000b10:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d103      	bne.n	8000b20 <Motor_Driver+0x338>
 8000b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b1a:	220a      	movs	r2, #10
 8000b1c:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8000b1e:	e06a      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000b20:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d105      	bne.n	8000b34 <Motor_Driver+0x34c>
 8000b28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b2e:	e062      	b.n	8000bf6 <Motor_Driver+0x40e>
 8000b30:	40010800 	.word	0x40010800
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000b34:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d103      	bne.n	8000b44 <Motor_Driver+0x35c>
 8000b3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b3e:	230a      	movs	r3, #10
 8000b40:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b42:	e058      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000b44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b46:	230a      	movs	r3, #10
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b4a:	e054      	b.n	8000bf6 <Motor_Driver+0x40e>
	case 6:
		// 1 > 2
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	89b9      	ldrh	r1, [r7, #12]
 8000b50:	2201      	movs	r2, #1
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fdd9 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000b58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b5c:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000b60:	2201      	movs	r2, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fdd1 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000b68:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b72:	3308      	adds	r3, #8
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fb50 	bl	800221c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000b7c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b80:	461a      	mov	r2, r3
 8000b82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b86:	3308      	adds	r3, #8
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 fb46 	bl	800221c <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_RESET);
 8000b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b92:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000b96:	2200      	movs	r2, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fdb6 	bl	800170a <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000b9e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fa9a 	bl	80020e4 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000bb0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d103      	bne.n	8000bc0 <Motor_Driver+0x3d8>
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	220a      	movs	r2, #10
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8000bbe:	e01a      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000bc0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d103      	bne.n	8000bd0 <Motor_Driver+0x3e8>
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	230a      	movs	r3, #10
 8000bcc:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000bce:	e012      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000bd0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000bd4:	2b08      	cmp	r3, #8
 8000bd6:	d103      	bne.n	8000be0 <Motor_Driver+0x3f8>
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	230a      	movs	r3, #10
 8000bdc:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000bde:	e00a      	b.n	8000bf6 <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	230a      	movs	r3, #10
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000be6:	e006      	b.n	8000bf6 <Motor_Driver+0x40e>
	default:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <Motor_Driver+0x41c>)
 8000bf0:	f000 fd8b 	bl	800170a <HAL_GPIO_WritePin>
		break;
 8000bf4:	bf00      	nop
	}

}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b004      	add	sp, #16
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40010800 	.word	0x40010800

08000c08 <Speed_Sensor>:

void Speed_Sensor(uint8_t Hall_case, uint8_t Is_second,uint8_t Speed_motor, uint32_t Var_msec){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	460b      	mov	r3, r1
 8000c16:	71bb      	strb	r3, [r7, #6]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	717b      	strb	r3, [r7, #5]

	if (Hall_case == 1) {
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d113      	bne.n	8000c4a <Speed_Sensor+0x42>
		uint32_t Temp_msec = HAL_GetTick();
 8000c22:	f000 f9f5 	bl	8001010 <HAL_GetTick>
 8000c26:	60f8      	str	r0, [r7, #12]
		if (Is_second) {
 8000c28:	79bb      	ldrb	r3, [r7, #6]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00a      	beq.n	8000c44 <Speed_Sensor+0x3c>
			Speed_motor = (int) 60000/(Temp_msec - Var_msec);
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3c:	717b      	strb	r3, [r7, #5]
			Var_msec = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
		else {
			Var_msec = HAL_GetTick();
		}
	}

}
 8000c42:	e002      	b.n	8000c4a <Speed_Sensor+0x42>
			Var_msec = HAL_GetTick();
 8000c44:	f000 f9e4 	bl	8001010 <HAL_GetTick>
 8000c48:	6038      	str	r0, [r7, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c56:	b672      	cpsid	i
}
 8000c58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c5a:	e7fe      	b.n	8000c5a <Error_Handler+0x8>

08000c5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6193      	str	r3, [r2, #24]
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_MspInit+0x5c>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_MspInit+0x60>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_MspInit+0x60>)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <HAL_CAN_MspInit+0x8c>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d131      	bne.n	8000d44 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_CAN_MspInit+0x90>)
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <HAL_CAN_MspInit+0x90>)
 8000ce6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cea:	61d3      	str	r3, [r2, #28]
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_CAN_MspInit+0x90>)
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_CAN_MspInit+0x90>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_CAN_MspInit+0x90>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_CAN_MspInit+0x90>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4619      	mov	r1, r3
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <HAL_CAN_MspInit+0x94>)
 8000d26:	f000 fb5d 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_CAN_MspInit+0x94>)
 8000d40:	f000 fb50 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40006400 	.word	0x40006400
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010800 	.word	0x40010800

08000d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d68:	d10c      	bne.n	8000d84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_TIM_Base_MspInit+0x58>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_TIM_Base_MspInit+0x58>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_TIM_Base_MspInit+0x58>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d82:	e010      	b.n	8000da6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_TIM_Base_MspInit+0x5c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10b      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_TIM_Base_MspInit+0x58>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_TIM_Base_MspInit+0x58>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_TIM_Base_MspInit+0x58>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40000400 	.word	0x40000400

08000db8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd6:	d12b      	bne.n	8000e30 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <HAL_TIM_MspPostInit+0xec>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a31      	ldr	r2, [pc, #196]	; (8000ea4 <HAL_TIM_MspPostInit+0xec>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <HAL_TIM_MspPostInit+0xec>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000df0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <HAL_TIM_MspPostInit+0xf0>)
 8000e06:	f000 faed 	bl	80013e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <HAL_TIM_MspPostInit+0xf4>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
 8000e28:	4a20      	ldr	r2, [pc, #128]	; (8000eac <HAL_TIM_MspPostInit+0xf4>)
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e2e:	e034      	b.n	8000e9a <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1e      	ldr	r2, [pc, #120]	; (8000eb0 <HAL_TIM_MspPostInit+0xf8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12f      	bne.n	8000e9a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_TIM_MspPostInit+0xec>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_TIM_MspPostInit+0xec>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6193      	str	r3, [r2, #24]
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_TIM_MspPostInit+0xec>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_TIM_MspPostInit+0xec>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <HAL_TIM_MspPostInit+0xec>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_TIM_MspPostInit+0xec>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2302      	movs	r3, #2
 8000e74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <HAL_TIM_MspPostInit+0xfc>)
 8000e7e:	f000 fab1 	bl	80013e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e82:	2302      	movs	r3, #2
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <HAL_TIM_MspPostInit+0xf0>)
 8000e96:	f000 faa5 	bl	80013e4 <HAL_GPIO_Init>
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010c00 	.word	0x40010c00
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40000400 	.word	0x40000400
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efe:	f000 f875 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
	...

08000f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f16:	490d      	ldr	r1, [pc, #52]	; (8000f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f2c:	4c0a      	ldr	r4, [pc, #40]	; (8000f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f3a:	f7ff ffe4 	bl	8000f06 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f001 fe45 	bl	8002bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f42:	f7ff f903 	bl	800014c <main>
  bx lr
 8000f46:	4770      	bx	lr
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f50:	08002c80 	.word	0x08002c80
  ldr r2, =_sbss
 8000f54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f58:	200000e4 	.word	0x200000e4

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x28>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x28>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 fa03 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	200f      	movs	r0, #15
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fe6e 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40022000 	.word	0x40022000

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fa0d 	bl	80013ca <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 f9e3 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000004 	.word	0x20000004

08000fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_IncTick+0x1c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_IncTick+0x20>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <HAL_IncTick+0x20>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	20000008 	.word	0x20000008
 800100c:	200000e0 	.word	0x200000e0

08001010 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b02      	ldr	r3, [pc, #8]	; (8001020 <HAL_GetTick+0x10>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	200000e0 	.word	0x200000e0

08001024 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e0ed      	b.n	8001212 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fe3c 	bl	8000cc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0201 	orr.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001058:	f7ff ffda 	bl	8001010 <HAL_GetTick>
 800105c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800105e:	e012      	b.n	8001086 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001060:	f7ff ffd6 	bl	8001010 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b0a      	cmp	r3, #10
 800106c:	d90b      	bls.n	8001086 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2205      	movs	r2, #5
 800107e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e0c5      	b.n	8001212 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0e5      	beq.n	8001060 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0202 	bic.w	r2, r2, #2
 80010a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff ffb4 	bl	8001010 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010aa:	e012      	b.n	80010d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ac:	f7ff ffb0 	bl	8001010 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b0a      	cmp	r3, #10
 80010b8:	d90b      	bls.n	80010d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2205      	movs	r2, #5
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e09f      	b.n	8001212 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e5      	bne.n	80010ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7e1b      	ldrb	r3, [r3, #24]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d108      	bne.n	80010fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e007      	b.n	800110a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7e5b      	ldrb	r3, [r3, #25]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d108      	bne.n	8001124 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e007      	b.n	8001134 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001132:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e9b      	ldrb	r3, [r3, #26]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0220 	orr.w	r2, r2, #32
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e007      	b.n	800115e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0220 	bic.w	r2, r2, #32
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7edb      	ldrb	r3, [r3, #27]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d108      	bne.n	8001178 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0210 	bic.w	r2, r2, #16
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e007      	b.n	8001188 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0210 	orr.w	r2, r2, #16
 8001186:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7f1b      	ldrb	r3, [r3, #28]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d108      	bne.n	80011a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0208 	orr.w	r2, r2, #8
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e007      	b.n	80011b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0208 	bic.w	r2, r2, #8
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7f5b      	ldrb	r3, [r3, #29]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0204 	orr.w	r2, r2, #4
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e007      	b.n	80011dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0204 	bic.w	r2, r2, #4
 80011da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	ea42 0103 	orr.w	r1, r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff90 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff49 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff5e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff90 	bl	80012d4 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffb0 	bl	8001338 <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e161      	b.n	80016bc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f8:	2201      	movs	r2, #1
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 8150 	bne.w	80016b6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a97      	ldr	r2, [pc, #604]	; (8001678 <HAL_GPIO_Init+0x294>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d05e      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001420:	4a95      	ldr	r2, [pc, #596]	; (8001678 <HAL_GPIO_Init+0x294>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d875      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001426:	4a95      	ldr	r2, [pc, #596]	; (800167c <HAL_GPIO_Init+0x298>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d058      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 800142c:	4a93      	ldr	r2, [pc, #588]	; (800167c <HAL_GPIO_Init+0x298>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d86f      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001432:	4a93      	ldr	r2, [pc, #588]	; (8001680 <HAL_GPIO_Init+0x29c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d052      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001438:	4a91      	ldr	r2, [pc, #580]	; (8001680 <HAL_GPIO_Init+0x29c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d869      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800143e:	4a91      	ldr	r2, [pc, #580]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d04c      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001444:	4a8f      	ldr	r2, [pc, #572]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d863      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800144a:	4a8f      	ldr	r2, [pc, #572]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d046      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001450:	4a8d      	ldr	r2, [pc, #564]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d85d      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001456:	2b12      	cmp	r3, #18
 8001458:	d82a      	bhi.n	80014b0 <HAL_GPIO_Init+0xcc>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d859      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <HAL_GPIO_Init+0x80>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	080014df 	.word	0x080014df
 8001468:	080014b9 	.word	0x080014b9
 800146c:	080014cb 	.word	0x080014cb
 8001470:	0800150d 	.word	0x0800150d
 8001474:	08001513 	.word	0x08001513
 8001478:	08001513 	.word	0x08001513
 800147c:	08001513 	.word	0x08001513
 8001480:	08001513 	.word	0x08001513
 8001484:	08001513 	.word	0x08001513
 8001488:	08001513 	.word	0x08001513
 800148c:	08001513 	.word	0x08001513
 8001490:	08001513 	.word	0x08001513
 8001494:	08001513 	.word	0x08001513
 8001498:	08001513 	.word	0x08001513
 800149c:	08001513 	.word	0x08001513
 80014a0:	08001513 	.word	0x08001513
 80014a4:	08001513 	.word	0x08001513
 80014a8:	080014c1 	.word	0x080014c1
 80014ac:	080014d5 	.word	0x080014d5
 80014b0:	4a76      	ldr	r2, [pc, #472]	; (800168c <HAL_GPIO_Init+0x2a8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014b6:	e02c      	b.n	8001512 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e029      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	3304      	adds	r3, #4
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e024      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	3308      	adds	r3, #8
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e01f      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	330c      	adds	r3, #12
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e01a      	b.n	8001514 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e6:	2304      	movs	r3, #4
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e013      	b.n	8001514 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f4:	2308      	movs	r3, #8
 80014f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	611a      	str	r2, [r3, #16]
          break;
 80014fe:	e009      	b.n	8001514 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001500:	2308      	movs	r3, #8
 8001502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	615a      	str	r2, [r3, #20]
          break;
 800150a:	e003      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x130>
          break;
 8001512:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	d801      	bhi.n	800151e <HAL_GPIO_Init+0x13a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_Init+0x13e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3304      	adds	r3, #4
 8001522:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2bff      	cmp	r3, #255	; 0xff
 8001528:	d802      	bhi.n	8001530 <HAL_GPIO_Init+0x14c>
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x152>
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	3b08      	subs	r3, #8
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	210f      	movs	r1, #15
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	401a      	ands	r2, r3
 8001548:	6a39      	ldr	r1, [r7, #32]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	431a      	orrs	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80a9 	beq.w	80016b6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001564:	4b4a      	ldr	r3, [pc, #296]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a49      	ldr	r2, [pc, #292]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b47      	ldr	r3, [pc, #284]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800157c:	4a45      	ldr	r2, [pc, #276]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a3d      	ldr	r2, [pc, #244]	; (8001698 <HAL_GPIO_Init+0x2b4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d00d      	beq.n	80015c4 <HAL_GPIO_Init+0x1e0>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3c      	ldr	r2, [pc, #240]	; (800169c <HAL_GPIO_Init+0x2b8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d007      	beq.n	80015c0 <HAL_GPIO_Init+0x1dc>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3b      	ldr	r2, [pc, #236]	; (80016a0 <HAL_GPIO_Init+0x2bc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d101      	bne.n	80015bc <HAL_GPIO_Init+0x1d8>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e004      	b.n	80015c6 <HAL_GPIO_Init+0x1e2>
 80015bc:	2303      	movs	r3, #3
 80015be:	e002      	b.n	80015c6 <HAL_GPIO_Init+0x1e2>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <HAL_GPIO_Init+0x1e2>
 80015c4:	2300      	movs	r3, #0
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	f002 0203 	and.w	r2, r2, #3
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	4093      	lsls	r3, r2
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015d6:	492f      	ldr	r1, [pc, #188]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015f0:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	492b      	ldr	r1, [pc, #172]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	43db      	mvns	r3, r3
 8001606:	4927      	ldr	r1, [pc, #156]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001608:	4013      	ands	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4921      	ldr	r1, [pc, #132]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	491d      	ldr	r1, [pc, #116]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001630:	4013      	ands	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	4917      	ldr	r1, [pc, #92]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	4913      	ldr	r1, [pc, #76]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001658:	4013      	ands	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01f      	beq.n	80016a8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	490d      	ldr	r1, [pc, #52]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	60cb      	str	r3, [r1, #12]
 8001674:	e01f      	b.n	80016b6 <HAL_GPIO_Init+0x2d2>
 8001676:	bf00      	nop
 8001678:	10320000 	.word	0x10320000
 800167c:	10310000 	.word	0x10310000
 8001680:	10220000 	.word	0x10220000
 8001684:	10210000 	.word	0x10210000
 8001688:	10120000 	.word	0x10120000
 800168c:	10110000 	.word	0x10110000
 8001690:	40021000 	.word	0x40021000
 8001694:	40010000 	.word	0x40010000
 8001698:	40010800 	.word	0x40010800
 800169c:	40010c00 	.word	0x40010c00
 80016a0:	40011000 	.word	0x40011000
 80016a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_GPIO_Init+0x2f4>)
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4909      	ldr	r1, [pc, #36]	; (80016d8 <HAL_GPIO_Init+0x2f4>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	3301      	adds	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f47f ae96 	bne.w	80013f8 <HAL_GPIO_Init+0x14>
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	372c      	adds	r7, #44	; 0x2c
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e001      	b.n	80016fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	807b      	strh	r3, [r7, #2]
 8001716:	4613      	mov	r3, r2
 8001718:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800171a:	787b      	ldrb	r3, [r7, #1]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001720:	887a      	ldrh	r2, [r7, #2]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001726:	e003      	b.n	8001730 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	041a      	lsls	r2, r3, #16
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	611a      	str	r2, [r3, #16]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e272      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8087 	beq.w	800186a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800175c:	4b92      	ldr	r3, [pc, #584]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b04      	cmp	r3, #4
 8001766:	d00c      	beq.n	8001782 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001768:	4b8f      	ldr	r3, [pc, #572]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d112      	bne.n	800179a <HAL_RCC_OscConfig+0x5e>
 8001774:	4b8c      	ldr	r3, [pc, #560]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d10b      	bne.n	800179a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001782:	4b89      	ldr	r3, [pc, #548]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d06c      	beq.n	8001868 <HAL_RCC_OscConfig+0x12c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d168      	bne.n	8001868 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e24c      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x76>
 80017a4:	4b80      	ldr	r3, [pc, #512]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a7f      	ldr	r2, [pc, #508]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e02e      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x98>
 80017ba:	4b7b      	ldr	r3, [pc, #492]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a7a      	ldr	r2, [pc, #488]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b78      	ldr	r3, [pc, #480]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a77      	ldr	r2, [pc, #476]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e01d      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0xbc>
 80017de:	4b72      	ldr	r3, [pc, #456]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a71      	ldr	r2, [pc, #452]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b6f      	ldr	r3, [pc, #444]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a6e      	ldr	r2, [pc, #440]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017f8:	4b6b      	ldr	r3, [pc, #428]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a6a      	ldr	r2, [pc, #424]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a67      	ldr	r2, [pc, #412]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800180a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d013      	beq.n	8001840 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fbfa 	bl	8001010 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fbf6 	bl	8001010 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e200      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b5d      	ldr	r3, [pc, #372]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0xe4>
 800183e:	e014      	b.n	800186a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fbe6 	bl	8001010 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fbe2 	bl	8001010 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1ec      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x10c>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d063      	beq.n	800193e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001882:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b08      	cmp	r3, #8
 800188c:	d11c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x18c>
 800188e:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d116      	bne.n	80018c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_RCC_OscConfig+0x176>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e1c0      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4939      	ldr	r1, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	e03a      	b.n	800193e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d0:	4b36      	ldr	r3, [pc, #216]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fb9b 	bl	8001010 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff fb97 	bl	8001010 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1a1      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4927      	ldr	r1, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fb7a 	bl	8001010 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001920:	f7ff fb76 	bl	8001010 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e180      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d03a      	beq.n	80019c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d019      	beq.n	8001986 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_RCC_OscConfig+0x274>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff fb5a 	bl	8001010 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff fb56 	bl	8001010 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e160      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800197e:	2001      	movs	r0, #1
 8001980:	f000 faa6 	bl	8001ed0 <RCC_Delay>
 8001984:	e01c      	b.n	80019c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_RCC_OscConfig+0x274>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff fb40 	bl	8001010 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001992:	e00f      	b.n	80019b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fb3c 	bl	8001010 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d908      	bls.n	80019b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e146      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	42420000 	.word	0x42420000
 80019b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1e9      	bne.n	8001994 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80a6 	beq.w	8001b1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d2:	4b8b      	ldr	r3, [pc, #556]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10d      	bne.n	80019fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b88      	ldr	r3, [pc, #544]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a87      	ldr	r2, [pc, #540]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b85      	ldr	r3, [pc, #532]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f6:	2301      	movs	r3, #1
 80019f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fa:	4b82      	ldr	r3, [pc, #520]	; (8001c04 <HAL_RCC_OscConfig+0x4c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d118      	bne.n	8001a38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a06:	4b7f      	ldr	r3, [pc, #508]	; (8001c04 <HAL_RCC_OscConfig+0x4c8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7e      	ldr	r2, [pc, #504]	; (8001c04 <HAL_RCC_OscConfig+0x4c8>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a12:	f7ff fafd 	bl	8001010 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1a:	f7ff faf9 	bl	8001010 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b64      	cmp	r3, #100	; 0x64
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e103      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x4c8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x312>
 8001a40:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a6e      	ldr	r2, [pc, #440]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	e02d      	b.n	8001aaa <HAL_RCC_OscConfig+0x36e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x334>
 8001a56:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a69      	ldr	r2, [pc, #420]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6213      	str	r3, [r2, #32]
 8001a62:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a66      	ldr	r2, [pc, #408]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	6213      	str	r3, [r2, #32]
 8001a6e:	e01c      	b.n	8001aaa <HAL_RCC_OscConfig+0x36e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d10c      	bne.n	8001a92 <HAL_RCC_OscConfig+0x356>
 8001a78:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a60      	ldr	r2, [pc, #384]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	4b5e      	ldr	r3, [pc, #376]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4a5d      	ldr	r2, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6213      	str	r3, [r2, #32]
 8001a90:	e00b      	b.n	8001aaa <HAL_RCC_OscConfig+0x36e>
 8001a92:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6213      	str	r3, [r2, #32]
 8001a9e:	4b58      	ldr	r3, [pc, #352]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a57      	ldr	r2, [pc, #348]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d015      	beq.n	8001ade <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff faad 	bl	8001010 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff faa9 	bl	8001010 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0b1      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad0:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ee      	beq.n	8001aba <HAL_RCC_OscConfig+0x37e>
 8001adc:	e014      	b.n	8001b08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fa97 	bl	8001010 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff fa93 	bl	8001010 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e09b      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afc:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1ee      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d105      	bne.n	8001b1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0e:	4b3c      	ldr	r3, [pc, #240]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a3b      	ldr	r2, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8087 	beq.w	8001c32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d061      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d146      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fa67 	bl	8001010 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fa63 	bl	8001010 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e06d      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6c:	d108      	bne.n	8001b80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4921      	ldr	r1, [pc, #132]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a19      	ldr	r1, [r3, #32]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	430b      	orrs	r3, r1
 8001b92:	491b      	ldr	r1, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fa37 	bl	8001010 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff fa33 	bl	8001010 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e03d      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x46a>
 8001bc4:	e035      	b.n	8001c32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_RCC_OscConfig+0x4cc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fa20 	bl	8001010 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff fa1c 	bl	8001010 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e026      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x498>
 8001bf2:	e01e      	b.n	8001c32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e019      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40007000 	.word	0x40007000
 8001c08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_OscConfig+0x500>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000

08001c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0d0      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d910      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 0207 	bic.w	r2, r3, #7
 8001c6a:	4965      	ldr	r1, [pc, #404]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ca6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d040      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d115      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e073      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e06b      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4936      	ldr	r1, [pc, #216]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d30:	f7ff f96e 	bl	8001010 <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f96a 	bl	8001010 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e053      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 020c 	and.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d1eb      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d210      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0207 	bic.w	r2, r3, #7
 8001d76:	4922      	ldr	r1, [pc, #136]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f821 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490a      	ldr	r1, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1cc>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x1d0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f8cc 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08002c68 	.word	0x08002c68
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b490      	push	{r4, r7}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e1c:	1d3c      	adds	r4, r7, #4
 8001e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e24:	f240 2301 	movw	r3, #513	; 0x201
 8001e28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x40>
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x46>
 8001e52:	e02b      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e56:	623b      	str	r3, [r7, #32]
      break;
 8001e58:	e02b      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	0c9b      	lsrs	r3, r3, #18
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3328      	adds	r3, #40	; 0x28
 8001e64:	443b      	add	r3, r7
 8001e66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d012      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	0c5b      	lsrs	r3, r3, #17
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	3328      	adds	r3, #40	; 0x28
 8001e82:	443b      	add	r3, r7
 8001e84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e8e:	fb03 f202 	mul.w	r2, r3, r2
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	e004      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	623b      	str	r3, [r7, #32]
      break;
 8001eaa:	e002      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eae:	623b      	str	r3, [r7, #32]
      break;
 8001eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc90      	pop	{r4, r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	08002c58 	.word	0x08002c58
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	007a1200 	.word	0x007a1200
 8001ecc:	003d0900 	.word	0x003d0900

08001ed0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <RCC_Delay+0x34>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <RCC_Delay+0x38>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0a5b      	lsrs	r3, r3, #9
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eec:	bf00      	nop
  }
  while (Delay --);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1e5a      	subs	r2, r3, #1
 8001ef2:	60fa      	str	r2, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f9      	bne.n	8001eec <RCC_Delay+0x1c>
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	20000000 	.word	0x20000000
 8001f08:	10624dd3 	.word	0x10624dd3

08001f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e041      	b.n	8001fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe ff10 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3304      	adds	r3, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f000 fb4c 	bl	80025e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d001      	beq.n	8001fc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e02d      	b.n	8002020 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a16      	ldr	r2, [pc, #88]	; (800202c <HAL_TIM_Base_Start+0x80>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d009      	beq.n	8001fea <HAL_TIM_Base_Start+0x3e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fde:	d004      	beq.n	8001fea <HAL_TIM_Base_Start+0x3e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_TIM_Base_Start+0x84>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d111      	bne.n	800200e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b06      	cmp	r3, #6
 8001ffa:	d010      	beq.n	800201e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200c:	e007      	b.n	800201e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40000400 	.word	0x40000400

08002034 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e041      	b.n	80020ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f839 	bl	80020d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 fab8 	bl	80025e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_TIM_PWM_Start+0x24>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	e022      	b.n	800214e <HAL_TIM_PWM_Start+0x6a>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b04      	cmp	r3, #4
 800210c:	d109      	bne.n	8002122 <HAL_TIM_PWM_Start+0x3e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	bf14      	ite	ne
 800211a:	2301      	movne	r3, #1
 800211c:	2300      	moveq	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	e015      	b.n	800214e <HAL_TIM_PWM_Start+0x6a>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d109      	bne.n	800213c <HAL_TIM_PWM_Start+0x58>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e008      	b.n	800214e <HAL_TIM_PWM_Start+0x6a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e059      	b.n	800220a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d104      	bne.n	8002166 <HAL_TIM_PWM_Start+0x82>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002164:	e013      	b.n	800218e <HAL_TIM_PWM_Start+0xaa>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d104      	bne.n	8002176 <HAL_TIM_PWM_Start+0x92>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002174:	e00b      	b.n	800218e <HAL_TIM_PWM_Start+0xaa>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d104      	bne.n	8002186 <HAL_TIM_PWM_Start+0xa2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002184:	e003      	b.n	800218e <HAL_TIM_PWM_Start+0xaa>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2201      	movs	r2, #1
 8002194:	6839      	ldr	r1, [r7, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fc9c 	bl	8002ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_TIM_PWM_Start+0x130>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d107      	bne.n	80021b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a16      	ldr	r2, [pc, #88]	; (8002214 <HAL_TIM_PWM_Start+0x130>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_TIM_PWM_Start+0xf0>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c8:	d004      	beq.n	80021d4 <HAL_TIM_PWM_Start+0xf0>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <HAL_TIM_PWM_Start+0x134>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d111      	bne.n	80021f8 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d010      	beq.n	8002208 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f6:	e007      	b.n	8002208 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40012c00 	.word	0x40012c00
 8002218:	40000400 	.word	0x40000400

0800221c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2200      	movs	r2, #0
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fc50 	bl	8002ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <HAL_TIM_PWM_Stop+0xc4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d117      	bne.n	800226e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	f241 1311 	movw	r3, #4369	; 0x1111
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10f      	bne.n	800226e <HAL_TIM_PWM_Stop+0x52>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	f240 4344 	movw	r3, #1092	; 0x444
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d107      	bne.n	800226e <HAL_TIM_PWM_Stop+0x52>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	f241 1311 	movw	r3, #4369	; 0x1111
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10f      	bne.n	800229e <HAL_TIM_PWM_Stop+0x82>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a1a      	ldr	r2, [r3, #32]
 8002284:	f240 4344 	movw	r3, #1092	; 0x444
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <HAL_TIM_PWM_Stop+0x82>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d104      	bne.n	80022ae <HAL_TIM_PWM_Stop+0x92>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ac:	e013      	b.n	80022d6 <HAL_TIM_PWM_Stop+0xba>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d104      	bne.n	80022be <HAL_TIM_PWM_Stop+0xa2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022bc:	e00b      	b.n	80022d6 <HAL_TIM_PWM_Stop+0xba>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_PWM_Stop+0xb2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022cc:	e003      	b.n	80022d6 <HAL_TIM_PWM_Stop+0xba>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40012c00 	.word	0x40012c00

080022e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e0ac      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x174>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	f200 809f 	bhi.w	800244c <HAL_TIM_PWM_ConfigChannel+0x168>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002349 	.word	0x08002349
 8002318:	0800244d 	.word	0x0800244d
 800231c:	0800244d 	.word	0x0800244d
 8002320:	0800244d 	.word	0x0800244d
 8002324:	08002389 	.word	0x08002389
 8002328:	0800244d 	.word	0x0800244d
 800232c:	0800244d 	.word	0x0800244d
 8002330:	0800244d 	.word	0x0800244d
 8002334:	080023cb 	.word	0x080023cb
 8002338:	0800244d 	.word	0x0800244d
 800233c:	0800244d 	.word	0x0800244d
 8002340:	0800244d 	.word	0x0800244d
 8002344:	0800240b 	.word	0x0800240b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f9a2 	bl	8002698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0208 	orr.w	r2, r2, #8
 8002362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0204 	bic.w	r2, r2, #4
 8002372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6999      	ldr	r1, [r3, #24]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	619a      	str	r2, [r3, #24]
      break;
 8002386:	e062      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f9e8 	bl	8002764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6999      	ldr	r1, [r3, #24]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	021a      	lsls	r2, r3, #8
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	619a      	str	r2, [r3, #24]
      break;
 80023c8:	e041      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fa31 	bl	8002838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69da      	ldr	r2, [r3, #28]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0208 	orr.w	r2, r2, #8
 80023e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0204 	bic.w	r2, r2, #4
 80023f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69d9      	ldr	r1, [r3, #28]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	61da      	str	r2, [r3, #28]
      break;
 8002408:	e021      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fa7b 	bl	800290c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69d9      	ldr	r1, [r3, #28]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	021a      	lsls	r2, r3, #8
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	61da      	str	r2, [r3, #28]
      break;
 800244a:	e000      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800244c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_TIM_ConfigClockSource+0x18>
 8002474:	2302      	movs	r3, #2
 8002476:	e0b3      	b.n	80025e0 <HAL_TIM_ConfigClockSource+0x180>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800249e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b0:	d03e      	beq.n	8002530 <HAL_TIM_ConfigClockSource+0xd0>
 80024b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b6:	f200 8087 	bhi.w	80025c8 <HAL_TIM_ConfigClockSource+0x168>
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	f000 8085 	beq.w	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c6:	d87f      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x168>
 80024c8:	2b70      	cmp	r3, #112	; 0x70
 80024ca:	d01a      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0xa2>
 80024cc:	2b70      	cmp	r3, #112	; 0x70
 80024ce:	d87b      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x168>
 80024d0:	2b60      	cmp	r3, #96	; 0x60
 80024d2:	d050      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x116>
 80024d4:	2b60      	cmp	r3, #96	; 0x60
 80024d6:	d877      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x168>
 80024d8:	2b50      	cmp	r3, #80	; 0x50
 80024da:	d03c      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0xf6>
 80024dc:	2b50      	cmp	r3, #80	; 0x50
 80024de:	d873      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x168>
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	d058      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x136>
 80024e4:	2b40      	cmp	r3, #64	; 0x40
 80024e6:	d86f      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x168>
 80024e8:	2b30      	cmp	r3, #48	; 0x30
 80024ea:	d064      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x156>
 80024ec:	2b30      	cmp	r3, #48	; 0x30
 80024ee:	d86b      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x168>
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d060      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x156>
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d867      	bhi.n	80025c8 <HAL_TIM_ConfigClockSource+0x168>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d05c      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x156>
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d05a      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002500:	e062      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6899      	ldr	r1, [r3, #8]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f000 fac0 	bl	8002a96 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002524:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	609a      	str	r2, [r3, #8]
      break;
 800252e:	e04e      	b.n	80025ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6899      	ldr	r1, [r3, #8]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f000 faa9 	bl	8002a96 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002552:	609a      	str	r2, [r3, #8]
      break;
 8002554:	e03b      	b.n	80025ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	461a      	mov	r2, r3
 8002564:	f000 fa20 	bl	80029a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2150      	movs	r1, #80	; 0x50
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fa77 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002574:	e02b      	b.n	80025ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6859      	ldr	r1, [r3, #4]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	461a      	mov	r2, r3
 8002584:	f000 fa3e 	bl	8002a04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2160      	movs	r1, #96	; 0x60
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fa67 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002594:	e01b      	b.n	80025ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	461a      	mov	r2, r3
 80025a4:	f000 fa00 	bl	80029a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2140      	movs	r1, #64	; 0x40
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fa57 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 80025b4:	e00b      	b.n	80025ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4619      	mov	r1, r3
 80025c0:	4610      	mov	r0, r2
 80025c2:	f000 fa4e 	bl	8002a62 <TIM_ITRx_SetConfig>
        break;
 80025c6:	e002      	b.n	80025ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025c8:	bf00      	nop
 80025ca:	e000      	b.n	80025ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a25      	ldr	r2, [pc, #148]	; (8002690 <TIM_Base_SetConfig+0xa8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d007      	beq.n	8002610 <TIM_Base_SetConfig+0x28>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002606:	d003      	beq.n	8002610 <TIM_Base_SetConfig+0x28>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a22      	ldr	r2, [pc, #136]	; (8002694 <TIM_Base_SetConfig+0xac>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d108      	bne.n	8002622 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a1a      	ldr	r2, [pc, #104]	; (8002690 <TIM_Base_SetConfig+0xa8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <TIM_Base_SetConfig+0x52>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002630:	d003      	beq.n	800263a <TIM_Base_SetConfig+0x52>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a17      	ldr	r2, [pc, #92]	; (8002694 <TIM_Base_SetConfig+0xac>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d108      	bne.n	800264c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a07      	ldr	r2, [pc, #28]	; (8002690 <TIM_Base_SetConfig+0xa8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d103      	bne.n	8002680 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	615a      	str	r2, [r3, #20]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40000400 	.word	0x40000400

08002698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f023 0201 	bic.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0303 	bic.w	r3, r3, #3
 80026ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f023 0302 	bic.w	r3, r3, #2
 80026e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <TIM_OC1_SetConfig+0xc8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d10c      	bne.n	800270e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f023 0308 	bic.w	r3, r3, #8
 80026fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a13      	ldr	r2, [pc, #76]	; (8002760 <TIM_OC1_SetConfig+0xc8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d111      	bne.n	800273a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800271c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	621a      	str	r2, [r3, #32]
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40012c00 	.word	0x40012c00

08002764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f023 0210 	bic.w	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f023 0320 	bic.w	r3, r3, #32
 80027ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <TIM_OC2_SetConfig+0xd0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d10d      	bne.n	80027e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a14      	ldr	r2, [pc, #80]	; (8002834 <TIM_OC2_SetConfig+0xd0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d113      	bne.n	8002810 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	621a      	str	r2, [r3, #32]
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40012c00 	.word	0x40012c00

08002838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <TIM_OC3_SetConfig+0xd0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10d      	bne.n	80028b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800289c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <TIM_OC3_SetConfig+0xd0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d113      	bne.n	80028e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40012c00 	.word	0x40012c00

0800290c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800293a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	031b      	lsls	r3, r3, #12
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <TIM_OC4_SetConfig+0x98>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d109      	bne.n	8002980 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	40012c00 	.word	0x40012c00

080029a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f023 0201 	bic.w	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f023 030a 	bic.w	r3, r3, #10
 80029e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	621a      	str	r2, [r3, #32]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f023 0210 	bic.w	r2, r3, #16
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	031b      	lsls	r3, r3, #12
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	621a      	str	r2, [r3, #32]
}
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f043 0307 	orr.w	r3, r3, #7
 8002a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b087      	sub	sp, #28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	021a      	lsls	r2, r3, #8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	609a      	str	r2, [r3, #8]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	401a      	ands	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e041      	b.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d004      	beq.n	8002b8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40000400 	.word	0x40000400

08002bcc <__libc_init_array>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	2600      	movs	r6, #0
 8002bd0:	4d0c      	ldr	r5, [pc, #48]	; (8002c04 <__libc_init_array+0x38>)
 8002bd2:	4c0d      	ldr	r4, [pc, #52]	; (8002c08 <__libc_init_array+0x3c>)
 8002bd4:	1b64      	subs	r4, r4, r5
 8002bd6:	10a4      	asrs	r4, r4, #2
 8002bd8:	42a6      	cmp	r6, r4
 8002bda:	d109      	bne.n	8002bf0 <__libc_init_array+0x24>
 8002bdc:	f000 f830 	bl	8002c40 <_init>
 8002be0:	2600      	movs	r6, #0
 8002be2:	4d0a      	ldr	r5, [pc, #40]	; (8002c0c <__libc_init_array+0x40>)
 8002be4:	4c0a      	ldr	r4, [pc, #40]	; (8002c10 <__libc_init_array+0x44>)
 8002be6:	1b64      	subs	r4, r4, r5
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	42a6      	cmp	r6, r4
 8002bec:	d105      	bne.n	8002bfa <__libc_init_array+0x2e>
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
 8002bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf4:	4798      	blx	r3
 8002bf6:	3601      	adds	r6, #1
 8002bf8:	e7ee      	b.n	8002bd8 <__libc_init_array+0xc>
 8002bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfe:	4798      	blx	r3
 8002c00:	3601      	adds	r6, #1
 8002c02:	e7f2      	b.n	8002bea <__libc_init_array+0x1e>
 8002c04:	08002c78 	.word	0x08002c78
 8002c08:	08002c78 	.word	0x08002c78
 8002c0c:	08002c78 	.word	0x08002c78
 8002c10:	08002c7c 	.word	0x08002c7c

08002c14 <memcpy>:
 8002c14:	440a      	add	r2, r1
 8002c16:	4291      	cmp	r1, r2
 8002c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c1c:	d100      	bne.n	8002c20 <memcpy+0xc>
 8002c1e:	4770      	bx	lr
 8002c20:	b510      	push	{r4, lr}
 8002c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c26:	4291      	cmp	r1, r2
 8002c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c2c:	d1f9      	bne.n	8002c22 <memcpy+0xe>
 8002c2e:	bd10      	pop	{r4, pc}

08002c30 <memset>:
 8002c30:	4603      	mov	r3, r0
 8002c32:	4402      	add	r2, r0
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d100      	bne.n	8002c3a <memset+0xa>
 8002c38:	4770      	bx	lr
 8002c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c3e:	e7f9      	b.n	8002c34 <memset+0x4>

08002c40 <_init>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr

08002c4c <_fini>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	bf00      	nop
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr
