
F103_Pertinaks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002864  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002990  08002990  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002990  08002990  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002990  08002990  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080029a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080029a4  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c29  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000141e  00000000  00000000  00027c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  00029080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  000299c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016175  00000000  00000000  0002a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000951b  00000000  00000000  000403e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081b26  00000000  00000000  00049900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb426  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002658  00000000  00000000  000cb478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002958 	.word	0x08002958

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002958 	.word	0x08002958

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8000152:	af3c      	add	r7, sp, #240	; 0xf0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fe8c 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f970 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 faa8 	bl	80006b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000160:	f000 f9b2 	bl	80004c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 fa24 	bl	80005b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Init(&htim2);
 8000168:	48b0      	ldr	r0, [pc, #704]	; (800042c <main+0x2e0>)
 800016a:	f001 fd5b 	bl	8001c24 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim3);
 800016e:	48b0      	ldr	r0, [pc, #704]	; (8000430 <main+0x2e4>)
 8000170:	f001 fd58 	bl	8001c24 <HAL_TIM_Base_Init>

	Mosfet_Driver_Typedef MD_One = { 0 };
 8000174:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000178:	2254      	movs	r2, #84	; 0x54
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f002 fbe3 	bl	8002948 <memset>
	MD_One.LS_Pin = GPIOB;
 8000182:	4bac      	ldr	r3, [pc, #688]	; (8000434 <main+0x2e8>)
 8000184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	MD_One.LSP_Number = GPIO_PIN_10;
 8000188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800018c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	MD_One.HS_Tim = htim2;
 8000190:	4aa6      	ldr	r2, [pc, #664]	; (800042c <main+0x2e0>)
 8000192:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000196:	4611      	mov	r1, r2
 8000198:	2248      	movs	r2, #72	; 0x48
 800019a:	4618      	mov	r0, r3
 800019c:	f002 fbc6 	bl	800292c <memcpy>
	MD_One.HST_Channel = TIM_CHANNEL_4;
 80001a0:	230c      	movs	r3, #12
 80001a2:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114

	Mosfet_Driver_Typedef MD_Two;
	MD_Two.LS_Pin = GPIOB;
 80001a6:	4ba3      	ldr	r3, [pc, #652]	; (8000434 <main+0x2e8>)
 80001a8:	673b      	str	r3, [r7, #112]	; 0x70
	MD_Two.LSP_Number = GPIO_PIN_0;
 80001aa:	2301      	movs	r3, #1
 80001ac:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	MD_Two.HS_Tim = htim3;
 80001b0:	4a9f      	ldr	r2, [pc, #636]	; (8000430 <main+0x2e4>)
 80001b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80001b6:	4611      	mov	r1, r2
 80001b8:	2248      	movs	r2, #72	; 0x48
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 fbb6 	bl	800292c <memcpy>
	MD_Two.HST_Channel = TIM_CHANNEL_4;
 80001c0:	230c      	movs	r3, #12
 80001c2:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

	Mosfet_Driver_Typedef MD_Three;
	MD_Three.LS_Pin = GPIOA;
 80001c6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80001ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001ce:	4a9a      	ldr	r2, [pc, #616]	; (8000438 <main+0x2ec>)
 80001d0:	601a      	str	r2, [r3, #0]
	MD_Three.LSP_Number = GPIO_PIN_6;
 80001d2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80001d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001da:	2240      	movs	r2, #64	; 0x40
 80001dc:	809a      	strh	r2, [r3, #4]
	MD_Three.HS_Tim = htim3;
 80001de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80001e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001e6:	4a92      	ldr	r2, [pc, #584]	; (8000430 <main+0x2e4>)
 80001e8:	3308      	adds	r3, #8
 80001ea:	4611      	mov	r1, r2
 80001ec:	2248      	movs	r2, #72	; 0x48
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fb9c 	bl	800292c <memcpy>
	MD_Three.HST_Channel = TIM_CHANNEL_2;
 80001f4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80001f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001fc:	2204      	movs	r2, #4
 80001fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	// --

	// Hall Sensor Typedef
	Hall_Sensor_Typedef Hall_A;
	Hall_A.H_Pin = GPIOB;
 8000202:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000206:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800020a:	4a8a      	ldr	r2, [pc, #552]	; (8000434 <main+0x2e8>)
 800020c:	601a      	str	r2, [r3, #0]
	Hall_A.HP_Number = GPIO_PIN_7;
 800020e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000212:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000216:	2280      	movs	r2, #128	; 0x80
 8000218:	809a      	strh	r2, [r3, #4]

	Hall_Sensor_Typedef Hall_B;
	Hall_B.H_Pin = GPIOB;
 800021a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800021e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000222:	4a84      	ldr	r2, [pc, #528]	; (8000434 <main+0x2e8>)
 8000224:	601a      	str	r2, [r3, #0]
	Hall_B.HP_Number = GPIO_PIN_8;
 8000226:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800022a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800022e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000232:	809a      	strh	r2, [r3, #4]

	Hall_Sensor_Typedef Hall_C;
	Hall_C.H_Pin = GPIOB;
 8000234:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000238:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800023c:	4a7d      	ldr	r2, [pc, #500]	; (8000434 <main+0x2e8>)
 800023e:	601a      	str	r2, [r3, #0]
	Hall_C.HP_Number = GPIO_PIN_9;
 8000240:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000244:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800024c:	809a      	strh	r2, [r3, #4]

	MX_GPIO_Init();
 800024e:	f000 fa2f 	bl	80006b0 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000252:	f000 f939 	bl	80004c8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000256:	f000 f9ab 	bl	80005b0 <MX_TIM3_Init>

	HAL_TIM_Base_Start(&htim2);
 800025a:	4874      	ldr	r0, [pc, #464]	; (800042c <main+0x2e0>)
 800025c:	f001 fd32 	bl	8001cc4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8000260:	4873      	ldr	r0, [pc, #460]	; (8000430 <main+0x2e4>)
 8000262:	f001 fd2f 	bl	8001cc4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t HA_Res = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t HB_Res = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
	uint8_t HC_Res = 0;
 8000272:	2300      	movs	r3, #0
 8000274:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
	uint8_t HT_Res = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124

	uint8_t User_speed = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	uint8_t Motor_speed = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	uint32_t Value_msec = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t Is_break = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	 Hall List Three => 3, 5, 4, 1, 2, 6
	 */

	while (1){

		Is_break = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000296:	2108      	movs	r1, #8
 8000298:	4866      	ldr	r0, [pc, #408]	; (8000434 <main+0x2e8>)
 800029a:	f001 f8ab 	bl	80013f4 <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

		/* HAL SENSÖR OKUMASI*/
		HA_Res = HAL_GPIO_ReadPin(Hall_A.H_Pin, Hall_A.HP_Number);
 80002a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80002b6:	889b      	ldrh	r3, [r3, #4]
 80002b8:	4619      	mov	r1, r3
 80002ba:	4610      	mov	r0, r2
 80002bc:	f001 f89a 	bl	80013f4 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		HB_Res = HAL_GPIO_ReadPin(Hall_B.H_Pin, Hall_B.HP_Number);
 80002c6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80002d8:	889b      	ldrh	r3, [r3, #4]
 80002da:	4619      	mov	r1, r3
 80002dc:	4610      	mov	r0, r2
 80002de:	f001 f889 	bl	80013f4 <HAL_GPIO_ReadPin>
 80002e2:	4603      	mov	r3, r0
 80002e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		HC_Res = HAL_GPIO_ReadPin(Hall_C.H_Pin, Hall_C.HP_Number);
 80002e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80002fa:	889b      	ldrh	r3, [r3, #4]
 80002fc:	4619      	mov	r1, r3
 80002fe:	4610      	mov	r0, r2
 8000300:	f001 f878 	bl	80013f4 <HAL_GPIO_ReadPin>
 8000304:	4603      	mov	r3, r0
 8000306:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125

		HB_Res = HB_Res << 1;
 800030a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		HC_Res = HC_Res << 2;
 8000314:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
		HT_Res = HC_Res | HB_Res | HA_Res;
 800031e:	f897 2125 	ldrb.w	r2, [r7, #293]	; 0x125
 8000322:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8000326:	4313      	orrs	r3, r2
 8000328:	b2da      	uxtb	r2, r3
 800032a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800032e:	4313      	orrs	r3, r2
 8000330:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124

		Speed_Sensor(HT_Res,Value_msec ,Motor_speed, Value_msec);
 8000334:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000338:	b2d9      	uxtb	r1, r3
 800033a:	f897 2122 	ldrb.w	r2, [r7, #290]	; 0x122
 800033e:	f897 0124 	ldrb.w	r0, [r7, #292]	; 0x124
 8000342:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000346:	f000 fc33 	bl	8000bb0 <Speed_Sensor>
		/* SÜRERSE GENEL SÜRÜCÜ*/
		if (Is_break) {
 800034a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800034e:	2b00      	cmp	r3, #0
 8000350:	d045      	beq.n	80003de <main+0x292>
			HAL_TIM_PWM_Stop(&MD_One.HS_Tim, MD_One.HST_Channel);
 8000352:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000356:	461a      	mov	r2, r3
 8000358:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800035c:	3308      	adds	r3, #8
 800035e:	4611      	mov	r1, r2
 8000360:	4618      	mov	r0, r3
 8000362:	f001 fde7 	bl	8001f34 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&MD_Two.HS_Tim, MD_Two.HST_Channel);
 8000366:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800036a:	461a      	mov	r2, r3
 800036c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000370:	3308      	adds	r3, #8
 8000372:	4611      	mov	r1, r2
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fddd 	bl	8001f34 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&MD_Three.HS_Tim, MD_Three.HST_Channel);
 800037a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800037e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000386:	461a      	mov	r2, r3
 8000388:	f107 031c 	add.w	r3, r7, #28
 800038c:	3308      	adds	r3, #8
 800038e:	4611      	mov	r1, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f001 fdcf 	bl	8001f34 <HAL_TIM_PWM_Stop>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800039c:	4826      	ldr	r0, [pc, #152]	; (8000438 <main+0x2ec>)
 800039e:	f001 f840 	bl	8001422 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MD_One.LS_Pin, MD_One.LSP_Number, GPIO_PIN_RESET);
 80003a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80003a6:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80003aa:	2200      	movs	r2, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 f838 	bl	8001422 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MD_Two.LS_Pin, MD_Two.LSP_Number, GPIO_PIN_RESET);
 80003b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80003b4:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 80003b8:	2200      	movs	r2, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 f831 	bl	8001422 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MD_Three.LS_Pin, MD_Three.LSP_Number, GPIO_PIN_RESET);
 80003c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80003c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003c8:	6818      	ldr	r0, [r3, #0]
 80003ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80003ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003d2:	889b      	ldrh	r3, [r3, #4]
 80003d4:	2200      	movs	r2, #0
 80003d6:	4619      	mov	r1, r3
 80003d8:	f001 f823 	bl	8001422 <HAL_GPIO_WritePin>
 80003dc:	e75b      	b.n	8000296 <main+0x14a>

			}
		else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003e4:	4814      	ldr	r0, [pc, #80]	; (8000438 <main+0x2ec>)
 80003e6:	f001 f81c 	bl	8001422 <HAL_GPIO_WritePin>
			Motor_Driver(MD_One, MD_Two, MD_Three, HT_Res);
 80003ea:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 80003ee:	933b      	str	r3, [sp, #236]	; 0xec
 80003f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80003f4:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80003f8:	ab26      	add	r3, sp, #152	; 0x98
 80003fa:	4611      	mov	r1, r2
 80003fc:	2254      	movs	r2, #84	; 0x54
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 fa94 	bl	800292c <memcpy>
 8000404:	a811      	add	r0, sp, #68	; 0x44
 8000406:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800040a:	2254      	movs	r2, #84	; 0x54
 800040c:	4619      	mov	r1, r3
 800040e:	f002 fa8d 	bl	800292c <memcpy>
 8000412:	4668      	mov	r0, sp
 8000414:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000418:	2244      	movs	r2, #68	; 0x44
 800041a:	4619      	mov	r1, r3
 800041c:	f002 fa86 	bl	800292c <memcpy>
 8000420:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000424:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000426:	f000 f9b3 	bl	8000790 <Motor_Driver>
		Is_break = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800042a:	e734      	b.n	8000296 <main+0x14a>
 800042c:	20000028 	.word	0x20000028
 8000430:	20000070 	.word	0x20000070
 8000434:	40010c00 	.word	0x40010c00
 8000438:	40010800 	.word	0x40010800

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b090      	sub	sp, #64	; 0x40
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0318 	add.w	r3, r7, #24
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f002 fa7c 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800045e:	2301      	movs	r3, #1
 8000460:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000466:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046c:	2301      	movs	r3, #1
 800046e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000470:	2302      	movs	r3, #2
 8000472:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000478:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800047a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800047e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000480:	f107 0318 	add.w	r3, r7, #24
 8000484:	4618      	mov	r0, r3
 8000486:	f000 ffe5 	bl	8001454 <HAL_RCC_OscConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000490:	f000 fbb3 	bl	8000bfa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000494:	230f      	movs	r3, #15
 8000496:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000498:	2302      	movs	r3, #2
 800049a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2102      	movs	r1, #2
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fa52 	bl	8001958 <HAL_RCC_ClockConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ba:	f000 fb9e 	bl	8000bfa <Error_Handler>
  }
}
 80004be:	bf00      	nop
 80004c0:	3740      	adds	r7, #64	; 0x40
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08e      	sub	sp, #56	; 0x38
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004dc:	f107 0320 	add.w	r3, r7, #32
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
 80004f4:	615a      	str	r2, [r3, #20]
 80004f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <MX_TIM2_Init+0xe4>)
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 8000500:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_TIM2_Init+0xe4>)
 8000502:	2223      	movs	r2, #35	; 0x23
 8000504:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MX_TIM2_Init+0xe4>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_TIM2_Init+0xe4>)
 800050e:	2263      	movs	r2, #99	; 0x63
 8000510:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000512:	4b26      	ldr	r3, [pc, #152]	; (80005ac <MX_TIM2_Init+0xe4>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_TIM2_Init+0xe4>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800051e:	4823      	ldr	r0, [pc, #140]	; (80005ac <MX_TIM2_Init+0xe4>)
 8000520:	f001 fb80 	bl	8001c24 <HAL_TIM_Base_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800052a:	f000 fb66 	bl	8000bfa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000538:	4619      	mov	r1, r3
 800053a:	481c      	ldr	r0, [pc, #112]	; (80005ac <MX_TIM2_Init+0xe4>)
 800053c:	f001 fe1c 	bl	8002178 <HAL_TIM_ConfigClockSource>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000546:	f000 fb58 	bl	8000bfa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800054a:	4818      	ldr	r0, [pc, #96]	; (80005ac <MX_TIM2_Init+0xe4>)
 800054c:	f001 fbfe 	bl	8001d4c <HAL_TIM_PWM_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000556:	f000 fb50 	bl	8000bfa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	4619      	mov	r1, r3
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <MX_TIM2_Init+0xe4>)
 800056a:	f002 f963 	bl	8002834 <HAL_TIMEx_MasterConfigSynchronization>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000574:	f000 fb41 	bl	8000bfa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000578:	2360      	movs	r3, #96	; 0x60
 800057a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	220c      	movs	r2, #12
 800058c:	4619      	mov	r1, r3
 800058e:	4807      	ldr	r0, [pc, #28]	; (80005ac <MX_TIM2_Init+0xe4>)
 8000590:	f001 fd34 	bl	8001ffc <HAL_TIM_PWM_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800059a:	f000 fb2e 	bl	8000bfa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <MX_TIM2_Init+0xe4>)
 80005a0:	f000 fb92 	bl	8000cc8 <HAL_TIM_MspPostInit>

}
 80005a4:	bf00      	nop
 80005a6:	3738      	adds	r7, #56	; 0x38
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000028 	.word	0x20000028

080005b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08e      	sub	sp, #56	; 0x38
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]
 80005de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005e0:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <MX_TIM3_Init+0xf8>)
 80005e2:	4a32      	ldr	r2, [pc, #200]	; (80006ac <MX_TIM3_Init+0xfc>)
 80005e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 80005e6:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <MX_TIM3_Init+0xf8>)
 80005e8:	2223      	movs	r2, #35	; 0x23
 80005ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ec:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <MX_TIM3_Init+0xf8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80005f2:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <MX_TIM3_Init+0xf8>)
 80005f4:	2263      	movs	r2, #99	; 0x63
 80005f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <MX_TIM3_Init+0xf8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fe:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <MX_TIM3_Init+0xf8>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000604:	4828      	ldr	r0, [pc, #160]	; (80006a8 <MX_TIM3_Init+0xf8>)
 8000606:	f001 fb0d 	bl	8001c24 <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000610:	f000 faf3 	bl	8000bfa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800061a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800061e:	4619      	mov	r1, r3
 8000620:	4821      	ldr	r0, [pc, #132]	; (80006a8 <MX_TIM3_Init+0xf8>)
 8000622:	f001 fda9 	bl	8002178 <HAL_TIM_ConfigClockSource>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800062c:	f000 fae5 	bl	8000bfa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000630:	481d      	ldr	r0, [pc, #116]	; (80006a8 <MX_TIM3_Init+0xf8>)
 8000632:	f001 fb8b 	bl	8001d4c <HAL_TIM_PWM_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800063c:	f000 fadd 	bl	8000bfa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4619      	mov	r1, r3
 800064e:	4816      	ldr	r0, [pc, #88]	; (80006a8 <MX_TIM3_Init+0xf8>)
 8000650:	f002 f8f0 	bl	8002834 <HAL_TIMEx_MasterConfigSynchronization>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800065a:	f000 face 	bl	8000bfa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800065e:	2360      	movs	r3, #96	; 0x60
 8000660:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2204      	movs	r2, #4
 8000672:	4619      	mov	r1, r3
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_TIM3_Init+0xf8>)
 8000676:	f001 fcc1 	bl	8001ffc <HAL_TIM_PWM_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000680:	f000 fabb 	bl	8000bfa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	220c      	movs	r2, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <MX_TIM3_Init+0xf8>)
 800068c:	f001 fcb6 	bl	8001ffc <HAL_TIM_PWM_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000696:	f000 fab0 	bl	8000bfa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <MX_TIM3_Init+0xf8>)
 800069c:	f000 fb14 	bl	8000cc8 <HAL_TIM_MspPostInit>

}
 80006a0:	bf00      	nop
 80006a2:	3738      	adds	r7, #56	; 0x38
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000070 	.word	0x20000070
 80006ac:	40000400 	.word	0x40000400

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c4:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a2e      	ldr	r2, [pc, #184]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0320 	and.w	r3, r3, #32
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a28      	ldr	r2, [pc, #160]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_GPIO_Init+0xd4>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 8000712:	481d      	ldr	r0, [pc, #116]	; (8000788 <MX_GPIO_Init+0xd8>)
 8000714:	f000 fe85 	bl	8001422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f240 4101 	movw	r1, #1025	; 0x401
 800071e:	481b      	ldr	r0, [pc, #108]	; (800078c <MX_GPIO_Init+0xdc>)
 8000720:	f000 fe7f 	bl	8001422 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11;
 8000724:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2302      	movs	r3, #2
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	4812      	ldr	r0, [pc, #72]	; (8000788 <MX_GPIO_Init+0xd8>)
 800073e:	f000 fcdd 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8000742:	f240 4301 	movw	r3, #1025	; 0x401
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_GPIO_Init+0xdc>)
 800075c:	f000 fcce 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000760:	f44f 7362 	mov.w	r3, #904	; 0x388
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0xdc>)
 8000776:	f000 fcc1 	bl	80010fc <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40010800 	.word	0x40010800
 800078c:	40010c00 	.word	0x40010c00

08000790 <Motor_Driver>:

/* USER CODE BEGIN 4 */
void Motor_Driver(Mosfet_Driver_Typedef MD_one, Mosfet_Driver_Typedef MD_two,
		Mosfet_Driver_Typedef MD_three, uint8_t Hall_T) {
 8000790:	b084      	sub	sp, #16
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
 8000796:	f107 0c08 	add.w	ip, r7, #8
 800079a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a4:	48cc      	ldr	r0, [pc, #816]	; (8000ad8 <Motor_Driver+0x348>)
 80007a6:	f000 fe3c 	bl	8001422 <HAL_GPIO_WritePin>
	switch (Hall_T) {
 80007aa:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80007ae:	3b01      	subs	r3, #1
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	f200 81ed 	bhi.w	8000b90 <Motor_Driver+0x400>
 80007b6:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <Motor_Driver+0x2c>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080007d5 	.word	0x080007d5
 80007c0:	08000871 	.word	0x08000871
 80007c4:	08000915 	.word	0x08000915
 80007c8:	080009b9 	.word	0x080009b9
 80007cc:	08000a55 	.word	0x08000a55
 80007d0:	08000af5 	.word	0x08000af5

	case 1:
		// 2 > 1
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 80007d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007d6:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80007da:	2201      	movs	r2, #1
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fe20 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 80007e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80007e6:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80007ea:	2201      	movs	r2, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fe18 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 80007f2:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80007f6:	461a      	mov	r2, r3
 80007f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80007fc:	3308      	adds	r3, #8
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f001 fb97 	bl	8001f34 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000806:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800080a:	461a      	mov	r2, r3
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fb8e 	bl	8001f34 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_RESET);
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	89b9      	ldrh	r1, [r7, #12]
 800081c:	2200      	movs	r2, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fdff 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000824:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000828:	461a      	mov	r2, r3
 800082a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800082e:	3308      	adds	r3, #8
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fae2 	bl	8001dfc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000838:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800083c:	2b00      	cmp	r3, #0
 800083e:	d103      	bne.n	8000848 <Motor_Driver+0xb8>
 8000840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000842:	220a      	movs	r2, #10
 8000844:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8000846:	e1aa      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000848:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800084c:	2b04      	cmp	r3, #4
 800084e:	d103      	bne.n	8000858 <Motor_Driver+0xc8>
 8000850:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000852:	230a      	movs	r3, #10
 8000854:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000856:	e1a2      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000858:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800085c:	2b08      	cmp	r3, #8
 800085e:	d103      	bne.n	8000868 <Motor_Driver+0xd8>
 8000860:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000862:	230a      	movs	r3, #10
 8000864:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000866:	e19a      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000868:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800086a:	230a      	movs	r3, #10
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800086e:	e196      	b.n	8000b9e <Motor_Driver+0x40e>
	case 2:
		// 3 > 2
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000874:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000878:	2201      	movs	r2, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fdd1 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	89b9      	ldrh	r1, [r7, #12]
 8000884:	2201      	movs	r2, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fdcb 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 800088c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000890:	461a      	mov	r2, r3
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fb4b 	bl	8001f34 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 800089e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80008a2:	461a      	mov	r2, r3
 80008a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008a8:	3308      	adds	r3, #8
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fb41 	bl	8001f34 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_RESET);
 80008b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008b4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80008b8:	2200      	movs	r2, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fdb1 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_three.HS_Tim, MD_three.HST_Channel);
 80008c0:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80008c4:	461a      	mov	r2, r3
 80008c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80008ca:	3308      	adds	r3, #8
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fa94 	bl	8001dfc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 80008d4:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d104      	bne.n	80008e6 <Motor_Driver+0x156>
 80008dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80008e0:	220a      	movs	r2, #10
 80008e2:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 80008e4:	e15b      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 80008e6:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d104      	bne.n	80008f8 <Motor_Driver+0x168>
 80008ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80008f2:	230a      	movs	r3, #10
 80008f4:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80008f6:	e152      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 80008f8:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80008fc:	2b08      	cmp	r3, #8
 80008fe:	d104      	bne.n	800090a <Motor_Driver+0x17a>
 8000900:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000904:	230a      	movs	r3, #10
 8000906:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000908:	e149      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 800090a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800090e:	230a      	movs	r3, #10
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000912:	e144      	b.n	8000b9e <Motor_Driver+0x40e>
	case 3:
		// 3 > 1
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000914:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000918:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 800091c:	2201      	movs	r2, #1
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fd7f 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000926:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800092a:	2201      	movs	r2, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fd78 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000932:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000936:	461a      	mov	r2, r3
 8000938:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800093c:	3308      	adds	r3, #8
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f001 faf7 	bl	8001f34 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000946:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800094a:	461a      	mov	r2, r3
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f001 faee 	bl	8001f34 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_RESET);
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	89b9      	ldrh	r1, [r7, #12]
 800095c:	2200      	movs	r2, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f000 fd5f 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000964:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000968:	461a      	mov	r2, r3
 800096a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800096e:	3308      	adds	r3, #8
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fa42 	bl	8001dfc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 8000978:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 800097c:	2b00      	cmp	r3, #0
 800097e:	d104      	bne.n	800098a <Motor_Driver+0x1fa>
 8000980:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000984:	220a      	movs	r2, #10
 8000986:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8000988:	e109      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 800098a:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 800098e:	2b04      	cmp	r3, #4
 8000990:	d104      	bne.n	800099c <Motor_Driver+0x20c>
 8000992:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000996:	230a      	movs	r3, #10
 8000998:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800099a:	e100      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 800099c:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80009a0:	2b08      	cmp	r3, #8
 80009a2:	d104      	bne.n	80009ae <Motor_Driver+0x21e>
 80009a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80009a8:	230a      	movs	r3, #10
 80009aa:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80009ac:	e0f7      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 80009ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80009b2:	230a      	movs	r3, #10
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80009b6:	e0f2      	b.n	8000b9e <Motor_Driver+0x40e>
	case 4:
		// 1 > 3
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	89b9      	ldrh	r1, [r7, #12]
 80009bc:	2201      	movs	r2, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fd2f 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 80009c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009c6:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80009ca:	2201      	movs	r2, #1
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fd28 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 80009d2:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80009d6:	461a      	mov	r2, r3
 80009d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009dc:	3308      	adds	r3, #8
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 faa7 	bl	8001f34 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 80009e6:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80009ea:	461a      	mov	r2, r3
 80009ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80009f0:	3308      	adds	r3, #8
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fa9d 	bl	8001f34 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_RESET);
 80009fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80009fe:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000a02:	2200      	movs	r2, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fd0c 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000a0a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 f9f0 	bl	8001dfc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000a1c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d103      	bne.n	8000a2c <Motor_Driver+0x29c>
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	220a      	movs	r2, #10
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8000a2a:	e0b8      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000a2c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d103      	bne.n	8000a3c <Motor_Driver+0x2ac>
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	230a      	movs	r3, #10
 8000a38:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000a3a:	e0b0      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000a3c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a40:	2b08      	cmp	r3, #8
 8000a42:	d103      	bne.n	8000a4c <Motor_Driver+0x2bc>
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	230a      	movs	r3, #10
 8000a48:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000a4a:	e0a8      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	230a      	movs	r3, #10
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000a52:	e0a4      	b.n	8000b9e <Motor_Driver+0x40e>
	case 5:
		// 2 > 3
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a56:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fce0 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	89b9      	ldrh	r1, [r7, #12]
 8000a66:	2201      	movs	r2, #1
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fcda 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000a6e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a72:	461a      	mov	r2, r3
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fa5a 	bl	8001f34 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000a80:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000a84:	461a      	mov	r2, r3
 8000a86:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000a8a:	3308      	adds	r3, #8
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fa50 	bl	8001f34 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_RESET);
 8000a94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a98:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fcbf 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000aa4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000aae:	3308      	adds	r3, #8
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 f9a2 	bl	8001dfc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000ab8:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d103      	bne.n	8000ac8 <Motor_Driver+0x338>
 8000ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ac2:	220a      	movs	r2, #10
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8000ac6:	e06a      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000ac8:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d105      	bne.n	8000adc <Motor_Driver+0x34c>
 8000ad0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000ad6:	e062      	b.n	8000b9e <Motor_Driver+0x40e>
 8000ad8:	40010800 	.word	0x40010800
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000adc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d103      	bne.n	8000aec <Motor_Driver+0x35c>
 8000ae4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000aea:	e058      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000aec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000aee:	230a      	movs	r3, #10
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000af2:	e054      	b.n	8000b9e <Motor_Driver+0x40e>
	case 6:
		// 1 > 2
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	89b9      	ldrh	r1, [r7, #12]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fc91 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b04:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fc89 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000b10:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000b14:	461a      	mov	r2, r3
 8000b16:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b1a:	3308      	adds	r3, #8
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fa08 	bl	8001f34 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000b24:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b2e:	3308      	adds	r3, #8
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f9fe 	bl	8001f34 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_RESET);
 8000b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b3a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fc6e 	bl	8001422 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000b46:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 f952 	bl	8001dfc <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000b58:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d103      	bne.n	8000b68 <Motor_Driver+0x3d8>
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	220a      	movs	r2, #10
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8000b66:	e01a      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000b68:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d103      	bne.n	8000b78 <Motor_Driver+0x3e8>
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	230a      	movs	r3, #10
 8000b74:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b76:	e012      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000b78:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	d103      	bne.n	8000b88 <Motor_Driver+0x3f8>
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	230a      	movs	r3, #10
 8000b84:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b86:	e00a      	b.n	8000b9e <Motor_Driver+0x40e>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b8e:	e006      	b.n	8000b9e <Motor_Driver+0x40e>
	default:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <Motor_Driver+0x41c>)
 8000b98:	f000 fc43 	bl	8001422 <HAL_GPIO_WritePin>
		break;
 8000b9c:	bf00      	nop
	}

}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ba6:	b004      	add	sp, #16
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40010800 	.word	0x40010800

08000bb0 <Speed_Sensor>:

void Speed_Sensor(uint8_t Hall_case, uint8_t Is_second,uint8_t Speed_motor, uint32_t Var_msec){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	71bb      	strb	r3, [r7, #6]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	717b      	strb	r3, [r7, #5]

	if (Hall_case == 1) {
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d113      	bne.n	8000bf2 <Speed_Sensor+0x42>
		uint32_t Temp_msec = HAL_GetTick();
 8000bca:	f000 f9a9 	bl	8000f20 <HAL_GetTick>
 8000bce:	60f8      	str	r0, [r7, #12]
		if (Is_second) {
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00a      	beq.n	8000bec <Speed_Sensor+0x3c>
			Speed_motor = (int) 60000/(Temp_msec - Var_msec);
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be4:	717b      	strb	r3, [r7, #5]
			Var_msec = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
		else {
			Var_msec = HAL_GetTick();
		}
	}

}
 8000bea:	e002      	b.n	8000bf2 <Speed_Sensor+0x42>
			Var_msec = HAL_GetTick();
 8000bec:	f000 f998 	bl	8000f20 <HAL_GetTick>
 8000bf0:	6038      	str	r0, [r7, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfe:	b672      	cpsid	i
}
 8000c00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c02:	e7fe      	b.n	8000c02 <Error_Handler+0x8>

08000c04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	61d3      	str	r3, [r2, #28]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_MspInit+0x60>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_MspInit+0x60>)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010000 	.word	0x40010000

08000c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c78:	d10c      	bne.n	8000c94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_TIM_Base_MspInit+0x58>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <HAL_TIM_Base_MspInit+0x58>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_TIM_Base_MspInit+0x58>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c92:	e010      	b.n	8000cb6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_TIM_Base_MspInit+0x5c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_TIM_Base_MspInit+0x58>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_TIM_Base_MspInit+0x58>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_TIM_Base_MspInit+0x58>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40000400 	.word	0x40000400

08000cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce6:	d12b      	bne.n	8000d40 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b32      	ldr	r3, [pc, #200]	; (8000db4 <HAL_TIM_MspPostInit+0xec>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a31      	ldr	r2, [pc, #196]	; (8000db4 <HAL_TIM_MspPostInit+0xec>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <HAL_TIM_MspPostInit+0xec>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4828      	ldr	r0, [pc, #160]	; (8000db8 <HAL_TIM_MspPostInit+0xf0>)
 8000d16:	f000 f9f1 	bl	80010fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <HAL_TIM_MspPostInit+0xf4>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
 8000d38:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <HAL_TIM_MspPostInit+0xf4>)
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d3e:	e034      	b.n	8000daa <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <HAL_TIM_MspPostInit+0xf8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12f      	bne.n	8000daa <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_TIM_MspPostInit+0xec>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_TIM_MspPostInit+0xec>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6193      	str	r3, [r2, #24]
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_TIM_MspPostInit+0xec>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_TIM_MspPostInit+0xec>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <HAL_TIM_MspPostInit+0xec>)
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_TIM_MspPostInit+0xec>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2302      	movs	r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <HAL_TIM_MspPostInit+0xfc>)
 8000d8e:	f000 f9b5 	bl	80010fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d92:	2302      	movs	r3, #2
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <HAL_TIM_MspPostInit+0xf0>)
 8000da6:	f000 f9a9 	bl	80010fc <HAL_GPIO_Init>
}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010c00 	.word	0x40010c00
 8000dbc:	40010000 	.word	0x40010000
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40010800 	.word	0x40010800

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0e:	f000 f875 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
	...

08000e24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e4a:	f7ff ffe4 	bl	8000e16 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f001 fd49 	bl	80028e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e52:	f7ff f97b 	bl	800014c <main>
  bx lr
 8000e56:	4770      	bx	lr
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e60:	08002998 	.word	0x08002998
  ldr r2, =_sbss
 8000e64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e68:	200000bc 	.word	0x200000bc

08000e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_2_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x28>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x28>)
 8000e7a:	f043 0310 	orr.w	r3, r3, #16
 8000e7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f907 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	200f      	movs	r0, #15
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff feba 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f911 	bl	80010e2 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f8e7 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x1c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x20>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a03      	ldr	r2, [pc, #12]	; (8000f1c <HAL_IncTick+0x20>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	200000b8 	.word	0x200000b8

08000f20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <HAL_GetTick+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	200000b8 	.word	0x200000b8

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff90 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff49 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff5e 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff90 	bl	8000fec <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5f 	bl	8000f98 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffb0 	bl	8001050 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e161      	b.n	80013d4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001110:	2201      	movs	r2, #1
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 8150 	bne.w	80013ce <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4a97      	ldr	r2, [pc, #604]	; (8001390 <HAL_GPIO_Init+0x294>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d05e      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001138:	4a95      	ldr	r2, [pc, #596]	; (8001390 <HAL_GPIO_Init+0x294>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d875      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800113e:	4a95      	ldr	r2, [pc, #596]	; (8001394 <HAL_GPIO_Init+0x298>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d058      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001144:	4a93      	ldr	r2, [pc, #588]	; (8001394 <HAL_GPIO_Init+0x298>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d86f      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800114a:	4a93      	ldr	r2, [pc, #588]	; (8001398 <HAL_GPIO_Init+0x29c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d052      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001150:	4a91      	ldr	r2, [pc, #580]	; (8001398 <HAL_GPIO_Init+0x29c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d869      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001156:	4a91      	ldr	r2, [pc, #580]	; (800139c <HAL_GPIO_Init+0x2a0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d04c      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 800115c:	4a8f      	ldr	r2, [pc, #572]	; (800139c <HAL_GPIO_Init+0x2a0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d863      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001162:	4a8f      	ldr	r2, [pc, #572]	; (80013a0 <HAL_GPIO_Init+0x2a4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d046      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001168:	4a8d      	ldr	r2, [pc, #564]	; (80013a0 <HAL_GPIO_Init+0x2a4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d85d      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800116e:	2b12      	cmp	r3, #18
 8001170:	d82a      	bhi.n	80011c8 <HAL_GPIO_Init+0xcc>
 8001172:	2b12      	cmp	r3, #18
 8001174:	d859      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <HAL_GPIO_Init+0x80>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	080011f7 	.word	0x080011f7
 8001180:	080011d1 	.word	0x080011d1
 8001184:	080011e3 	.word	0x080011e3
 8001188:	08001225 	.word	0x08001225
 800118c:	0800122b 	.word	0x0800122b
 8001190:	0800122b 	.word	0x0800122b
 8001194:	0800122b 	.word	0x0800122b
 8001198:	0800122b 	.word	0x0800122b
 800119c:	0800122b 	.word	0x0800122b
 80011a0:	0800122b 	.word	0x0800122b
 80011a4:	0800122b 	.word	0x0800122b
 80011a8:	0800122b 	.word	0x0800122b
 80011ac:	0800122b 	.word	0x0800122b
 80011b0:	0800122b 	.word	0x0800122b
 80011b4:	0800122b 	.word	0x0800122b
 80011b8:	0800122b 	.word	0x0800122b
 80011bc:	0800122b 	.word	0x0800122b
 80011c0:	080011d9 	.word	0x080011d9
 80011c4:	080011ed 	.word	0x080011ed
 80011c8:	4a76      	ldr	r2, [pc, #472]	; (80013a4 <HAL_GPIO_Init+0x2a8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ce:	e02c      	b.n	800122a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e029      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	3304      	adds	r3, #4
 80011de:	623b      	str	r3, [r7, #32]
          break;
 80011e0:	e024      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	3308      	adds	r3, #8
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e01f      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	330c      	adds	r3, #12
 80011f2:	623b      	str	r3, [r7, #32]
          break;
 80011f4:	e01a      	b.n	800122c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fe:	2304      	movs	r3, #4
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e013      	b.n	800122c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d105      	bne.n	8001218 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800120c:	2308      	movs	r3, #8
 800120e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	611a      	str	r2, [r3, #16]
          break;
 8001216:	e009      	b.n	800122c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001218:	2308      	movs	r3, #8
 800121a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	615a      	str	r2, [r3, #20]
          break;
 8001222:	e003      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x130>
          break;
 800122a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2bff      	cmp	r3, #255	; 0xff
 8001230:	d801      	bhi.n	8001236 <HAL_GPIO_Init+0x13a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	e001      	b.n	800123a <HAL_GPIO_Init+0x13e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3304      	adds	r3, #4
 800123a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2bff      	cmp	r3, #255	; 0xff
 8001240:	d802      	bhi.n	8001248 <HAL_GPIO_Init+0x14c>
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	e002      	b.n	800124e <HAL_GPIO_Init+0x152>
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	3b08      	subs	r3, #8
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	210f      	movs	r1, #15
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	6a39      	ldr	r1, [r7, #32]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	431a      	orrs	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80a9 	beq.w	80013ce <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800127c:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <HAL_GPIO_Init+0x2ac>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <HAL_GPIO_Init+0x2ac>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <HAL_GPIO_Init+0x2ac>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001294:	4a45      	ldr	r2, [pc, #276]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3d      	ldr	r2, [pc, #244]	; (80013b0 <HAL_GPIO_Init+0x2b4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00d      	beq.n	80012dc <HAL_GPIO_Init+0x1e0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3c      	ldr	r2, [pc, #240]	; (80013b4 <HAL_GPIO_Init+0x2b8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d007      	beq.n	80012d8 <HAL_GPIO_Init+0x1dc>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <HAL_GPIO_Init+0x2bc>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d101      	bne.n	80012d4 <HAL_GPIO_Init+0x1d8>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e004      	b.n	80012de <HAL_GPIO_Init+0x1e2>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e002      	b.n	80012de <HAL_GPIO_Init+0x1e2>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <HAL_GPIO_Init+0x1e2>
 80012dc:	2300      	movs	r3, #0
 80012de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e0:	f002 0203 	and.w	r2, r2, #3
 80012e4:	0092      	lsls	r2, r2, #2
 80012e6:	4093      	lsls	r3, r2
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ee:	492f      	ldr	r1, [pc, #188]	; (80013ac <HAL_GPIO_Init+0x2b0>)
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	492b      	ldr	r1, [pc, #172]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	43db      	mvns	r3, r3
 800131e:	4927      	ldr	r1, [pc, #156]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001320:	4013      	ands	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d006      	beq.n	800133e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4921      	ldr	r1, [pc, #132]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	43db      	mvns	r3, r3
 8001346:	491d      	ldr	r1, [pc, #116]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001348:	4013      	ands	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	4917      	ldr	r1, [pc, #92]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	43db      	mvns	r3, r3
 800136e:	4913      	ldr	r1, [pc, #76]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001370:	4013      	ands	r3, r2
 8001372:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01f      	beq.n	80013c0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	490d      	ldr	r1, [pc, #52]	; (80013bc <HAL_GPIO_Init+0x2c0>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	60cb      	str	r3, [r1, #12]
 800138c:	e01f      	b.n	80013ce <HAL_GPIO_Init+0x2d2>
 800138e:	bf00      	nop
 8001390:	10320000 	.word	0x10320000
 8001394:	10310000 	.word	0x10310000
 8001398:	10220000 	.word	0x10220000
 800139c:	10210000 	.word	0x10210000
 80013a0:	10120000 	.word	0x10120000
 80013a4:	10110000 	.word	0x10110000
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000
 80013b0:	40010800 	.word	0x40010800
 80013b4:	40010c00 	.word	0x40010c00
 80013b8:	40011000 	.word	0x40011000
 80013bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_GPIO_Init+0x2f4>)
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	4909      	ldr	r1, [pc, #36]	; (80013f0 <HAL_GPIO_Init+0x2f4>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	3301      	adds	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	fa22 f303 	lsr.w	r3, r2, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f47f ae96 	bne.w	8001110 <HAL_GPIO_Init+0x14>
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	372c      	adds	r7, #44	; 0x2c
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e001      	b.n	8001416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	807b      	strh	r3, [r7, #2]
 800142e:	4613      	mov	r3, r2
 8001430:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001432:	787b      	ldrb	r3, [r7, #1]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001438:	887a      	ldrh	r2, [r7, #2]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800143e:	e003      	b.n	8001448 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	041a      	lsls	r2, r3, #16
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	611a      	str	r2, [r3, #16]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
	...

08001454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e272      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8087 	beq.w	8001582 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001474:	4b92      	ldr	r3, [pc, #584]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	2b04      	cmp	r3, #4
 800147e:	d00c      	beq.n	800149a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001480:	4b8f      	ldr	r3, [pc, #572]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b08      	cmp	r3, #8
 800148a:	d112      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5e>
 800148c:	4b8c      	ldr	r3, [pc, #560]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001498:	d10b      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149a:	4b89      	ldr	r3, [pc, #548]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d06c      	beq.n	8001580 <HAL_RCC_OscConfig+0x12c>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d168      	bne.n	8001580 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e24c      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x76>
 80014bc:	4b80      	ldr	r3, [pc, #512]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a7f      	ldr	r2, [pc, #508]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e02e      	b.n	8001528 <HAL_RCC_OscConfig+0xd4>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x98>
 80014d2:	4b7b      	ldr	r3, [pc, #492]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a7a      	ldr	r2, [pc, #488]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b78      	ldr	r3, [pc, #480]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a77      	ldr	r2, [pc, #476]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e01d      	b.n	8001528 <HAL_RCC_OscConfig+0xd4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0xbc>
 80014f6:	4b72      	ldr	r3, [pc, #456]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a71      	ldr	r2, [pc, #452]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b6f      	ldr	r3, [pc, #444]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6e      	ldr	r2, [pc, #440]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0xd4>
 8001510:	4b6b      	ldr	r3, [pc, #428]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a6a      	ldr	r2, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a67      	ldr	r2, [pc, #412]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001526:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fcf6 	bl	8000f20 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fcf2 	bl	8000f20 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e200      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0xe4>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fce2 	bl	8000f20 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fcde 	bl	8000f20 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1ec      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x10c>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d063      	beq.n	8001656 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158e:	4b4c      	ldr	r3, [pc, #304]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800159a:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d11c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x18c>
 80015a6:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d116      	bne.n	80015e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x176>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e1c0      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4939      	ldr	r1, [pc, #228]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	e03a      	b.n	8001656 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e8:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fc97 	bl	8000f20 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fc93 	bl	8000f20 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1a1      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4927      	ldr	r1, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_RCC_OscConfig+0x270>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fc76 	bl	8000f20 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fc72 	bl	8000f20 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e180      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d03a      	beq.n	80016d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d019      	beq.n	800169e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_RCC_OscConfig+0x274>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff fc56 	bl	8000f20 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff fc52 	bl	8000f20 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e160      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_RCC_OscConfig+0x26c>)
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001696:	2001      	movs	r0, #1
 8001698:	f000 faa6 	bl	8001be8 <RCC_Delay>
 800169c:	e01c      	b.n	80016d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_RCC_OscConfig+0x274>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fc3c 	bl	8000f20 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016aa:	e00f      	b.n	80016cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fc38 	bl	8000f20 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d908      	bls.n	80016cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e146      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	42420000 	.word	0x42420000
 80016c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	4b92      	ldr	r3, [pc, #584]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e9      	bne.n	80016ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80a6 	beq.w	8001832 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ea:	4b8b      	ldr	r3, [pc, #556]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10d      	bne.n	8001712 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b88      	ldr	r3, [pc, #544]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a87      	ldr	r2, [pc, #540]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b85      	ldr	r3, [pc, #532]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170e:	2301      	movs	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	4b82      	ldr	r3, [pc, #520]	; (800191c <HAL_RCC_OscConfig+0x4c8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171e:	4b7f      	ldr	r3, [pc, #508]	; (800191c <HAL_RCC_OscConfig+0x4c8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a7e      	ldr	r2, [pc, #504]	; (800191c <HAL_RCC_OscConfig+0x4c8>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7ff fbf9 	bl	8000f20 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff fbf5 	bl	8000f20 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e103      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	4b75      	ldr	r3, [pc, #468]	; (800191c <HAL_RCC_OscConfig+0x4c8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x312>
 8001758:	4b6f      	ldr	r3, [pc, #444]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a6e      	ldr	r2, [pc, #440]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	e02d      	b.n	80017c2 <HAL_RCC_OscConfig+0x36e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x334>
 800176e:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4a69      	ldr	r2, [pc, #420]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6213      	str	r3, [r2, #32]
 800177a:	4b67      	ldr	r3, [pc, #412]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a66      	ldr	r2, [pc, #408]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	e01c      	b.n	80017c2 <HAL_RCC_OscConfig+0x36e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b05      	cmp	r3, #5
 800178e:	d10c      	bne.n	80017aa <HAL_RCC_OscConfig+0x356>
 8001790:	4b61      	ldr	r3, [pc, #388]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4a60      	ldr	r2, [pc, #384]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	6213      	str	r3, [r2, #32]
 800179c:	4b5e      	ldr	r3, [pc, #376]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a5d      	ldr	r2, [pc, #372]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6213      	str	r3, [r2, #32]
 80017a8:	e00b      	b.n	80017c2 <HAL_RCC_OscConfig+0x36e>
 80017aa:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a5a      	ldr	r2, [pc, #360]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6213      	str	r3, [r2, #32]
 80017b6:	4b58      	ldr	r3, [pc, #352]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a57      	ldr	r2, [pc, #348]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d015      	beq.n	80017f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fba9 	bl	8000f20 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff fba5 	bl	8000f20 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0b1      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	4b4b      	ldr	r3, [pc, #300]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ee      	beq.n	80017d2 <HAL_RCC_OscConfig+0x37e>
 80017f4:	e014      	b.n	8001820 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f6:	f7ff fb93 	bl	8000f20 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff fb8f 	bl	8000f20 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e09b      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	4b40      	ldr	r3, [pc, #256]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1ee      	bne.n	80017fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d105      	bne.n	8001832 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001826:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a3b      	ldr	r2, [pc, #236]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001830:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8087 	beq.w	800194a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	d061      	beq.n	800190c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d146      	bne.n	80018de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001850:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_RCC_OscConfig+0x4cc>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fb63 	bl	8000f20 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff fb5f 	bl	8000f20 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e06d      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d108      	bne.n	8001898 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001886:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4921      	ldr	r1, [pc, #132]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a19      	ldr	r1, [r3, #32]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	430b      	orrs	r3, r1
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x4cc>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff fb33 	bl	8000f20 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff fb2f 	bl	8000f20 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e03d      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x46a>
 80018dc:	e035      	b.n	800194a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_RCC_OscConfig+0x4cc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fb1c 	bl	8000f20 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff fb18 	bl	8000f20 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e026      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x498>
 800190a:	e01e      	b.n	800194a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d107      	bne.n	8001924 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e019      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
 8001918:	40021000 	.word	0x40021000
 800191c:	40007000 	.word	0x40007000
 8001920:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	429a      	cmp	r2, r3
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0d0      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d910      	bls.n	800199c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 0207 	bic.w	r2, r3, #7
 8001982:	4965      	ldr	r1, [pc, #404]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0b8      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b4:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	494d      	ldr	r1, [pc, #308]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d040      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d115      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e073      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e06b      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f023 0203 	bic.w	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4936      	ldr	r1, [pc, #216]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a48:	f7ff fa6a 	bl	8000f20 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a50:	f7ff fa66 	bl	8000f20 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e053      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 020c 	and.w	r2, r3, #12
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1eb      	bne.n	8001a50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a78:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d210      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	4922      	ldr	r1, [pc, #136]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e032      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4916      	ldr	r1, [pc, #88]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	490e      	ldr	r1, [pc, #56]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ae6:	f000 f821 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	490a      	ldr	r1, [pc, #40]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001af8:	5ccb      	ldrb	r3, [r1, r3]
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1cc>)
 8001b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1d0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f9c8 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08002980 	.word	0x08002980
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	b490      	push	{r4, r7}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b34:	1d3c      	adds	r4, r7, #4
 8001b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b3c:	f240 2301 	movw	r3, #513	; 0x201
 8001b40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d002      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x40>
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d003      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x46>
 8001b6a:	e02b      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b6e:	623b      	str	r3, [r7, #32]
      break;
 8001b70:	e02b      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	0c9b      	lsrs	r3, r3, #18
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3328      	adds	r3, #40	; 0x28
 8001b7c:	443b      	add	r3, r7
 8001b7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b82:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d012      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0c5b      	lsrs	r3, r3, #17
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	3328      	adds	r3, #40	; 0x28
 8001b9a:	443b      	add	r3, r7
 8001b9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ba0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ba6:	fb03 f202 	mul.w	r2, r3, r2
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb2:	e004      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	623b      	str	r3, [r7, #32]
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bc6:	623b      	str	r3, [r7, #32]
      break;
 8001bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bca:	6a3b      	ldr	r3, [r7, #32]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc90      	pop	{r4, r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	08002970 	.word	0x08002970
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	007a1200 	.word	0x007a1200
 8001be4:	003d0900 	.word	0x003d0900

08001be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <RCC_Delay+0x34>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <RCC_Delay+0x38>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0a5b      	lsrs	r3, r3, #9
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c04:	bf00      	nop
  }
  while (Delay --);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1e5a      	subs	r2, r3, #1
 8001c0a:	60fa      	str	r2, [r7, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f9      	bne.n	8001c04 <RCC_Delay+0x1c>
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	10624dd3 	.word	0x10624dd3

08001c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e041      	b.n	8001cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff f80c 	bl	8000c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f000 fb4c 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d001      	beq.n	8001cdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e02d      	b.n	8001d38 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <HAL_TIM_Base_Start+0x80>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d009      	beq.n	8001d02 <HAL_TIM_Base_Start+0x3e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf6:	d004      	beq.n	8001d02 <HAL_TIM_Base_Start+0x3e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <HAL_TIM_Base_Start+0x84>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d111      	bne.n	8001d26 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d010      	beq.n	8001d36 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d24:	e007      	b.n	8001d36 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40000400 	.word	0x40000400

08001d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e041      	b.n	8001de2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f839 	bl	8001dea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f000 fab8 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <HAL_TIM_PWM_Start+0x24>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	bf14      	ite	ne
 8001e18:	2301      	movne	r3, #1
 8001e1a:	2300      	moveq	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	e022      	b.n	8001e66 <HAL_TIM_PWM_Start+0x6a>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d109      	bne.n	8001e3a <HAL_TIM_PWM_Start+0x3e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	bf14      	ite	ne
 8001e32:	2301      	movne	r3, #1
 8001e34:	2300      	moveq	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	e015      	b.n	8001e66 <HAL_TIM_PWM_Start+0x6a>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d109      	bne.n	8001e54 <HAL_TIM_PWM_Start+0x58>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	bf14      	ite	ne
 8001e4c:	2301      	movne	r3, #1
 8001e4e:	2300      	moveq	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e008      	b.n	8001e66 <HAL_TIM_PWM_Start+0x6a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	bf14      	ite	ne
 8001e60:	2301      	movne	r3, #1
 8001e62:	2300      	moveq	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e059      	b.n	8001f22 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d104      	bne.n	8001e7e <HAL_TIM_PWM_Start+0x82>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e7c:	e013      	b.n	8001ea6 <HAL_TIM_PWM_Start+0xaa>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d104      	bne.n	8001e8e <HAL_TIM_PWM_Start+0x92>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e8c:	e00b      	b.n	8001ea6 <HAL_TIM_PWM_Start+0xaa>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d104      	bne.n	8001e9e <HAL_TIM_PWM_Start+0xa2>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e9c:	e003      	b.n	8001ea6 <HAL_TIM_PWM_Start+0xaa>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	6839      	ldr	r1, [r7, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fc9c 	bl	80027ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_TIM_PWM_Start+0x130>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d107      	bne.n	8001ece <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <HAL_TIM_PWM_Start+0x130>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_TIM_PWM_Start+0xf0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee0:	d004      	beq.n	8001eec <HAL_TIM_PWM_Start+0xf0>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <HAL_TIM_PWM_Start+0x134>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d111      	bne.n	8001f10 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d010      	beq.n	8001f20 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0e:	e007      	b.n	8001f20 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40000400 	.word	0x40000400

08001f34 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2200      	movs	r2, #0
 8001f44:	6839      	ldr	r1, [r7, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fc50 	bl	80027ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <HAL_TIM_PWM_Stop+0xc4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d117      	bne.n	8001f86 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <HAL_TIM_PWM_Stop+0x52>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	f240 4344 	movw	r3, #1092	; 0x444
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <HAL_TIM_PWM_Stop+0x52>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <HAL_TIM_PWM_Stop+0x82>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
 8001f9c:	f240 4344 	movw	r3, #1092	; 0x444
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d107      	bne.n	8001fb6 <HAL_TIM_PWM_Stop+0x82>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <HAL_TIM_PWM_Stop+0x92>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc4:	e013      	b.n	8001fee <HAL_TIM_PWM_Stop+0xba>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d104      	bne.n	8001fd6 <HAL_TIM_PWM_Stop+0xa2>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd4:	e00b      	b.n	8001fee <HAL_TIM_PWM_Stop+0xba>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_PWM_Stop+0xb2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe4:	e003      	b.n	8001fee <HAL_TIM_PWM_Stop+0xba>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40012c00 	.word	0x40012c00

08001ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002012:	2302      	movs	r3, #2
 8002014:	e0ac      	b.n	8002170 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0c      	cmp	r3, #12
 8002022:	f200 809f 	bhi.w	8002164 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002026:	a201      	add	r2, pc, #4	; (adr r2, 800202c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	08002061 	.word	0x08002061
 8002030:	08002165 	.word	0x08002165
 8002034:	08002165 	.word	0x08002165
 8002038:	08002165 	.word	0x08002165
 800203c:	080020a1 	.word	0x080020a1
 8002040:	08002165 	.word	0x08002165
 8002044:	08002165 	.word	0x08002165
 8002048:	08002165 	.word	0x08002165
 800204c:	080020e3 	.word	0x080020e3
 8002050:	08002165 	.word	0x08002165
 8002054:	08002165 	.word	0x08002165
 8002058:	08002165 	.word	0x08002165
 800205c:	08002123 	.word	0x08002123
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f9a2 	bl	80023b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699a      	ldr	r2, [r3, #24]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0208 	orr.w	r2, r2, #8
 800207a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0204 	bic.w	r2, r2, #4
 800208a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6999      	ldr	r1, [r3, #24]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	619a      	str	r2, [r3, #24]
      break;
 800209e:	e062      	b.n	8002166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f9e8 	bl	800247c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6999      	ldr	r1, [r3, #24]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	021a      	lsls	r2, r3, #8
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	619a      	str	r2, [r3, #24]
      break;
 80020e0:	e041      	b.n	8002166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fa31 	bl	8002550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69da      	ldr	r2, [r3, #28]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0208 	orr.w	r2, r2, #8
 80020fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0204 	bic.w	r2, r2, #4
 800210c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69d9      	ldr	r1, [r3, #28]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	61da      	str	r2, [r3, #28]
      break;
 8002120:	e021      	b.n	8002166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 fa7b 	bl	8002624 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800213c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800214c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69d9      	ldr	r1, [r3, #28]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	021a      	lsls	r2, r3, #8
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	61da      	str	r2, [r3, #28]
      break;
 8002162:	e000      	b.n	8002166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002164:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_TIM_ConfigClockSource+0x18>
 800218c:	2302      	movs	r3, #2
 800218e:	e0b3      	b.n	80022f8 <HAL_TIM_ConfigClockSource+0x180>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c8:	d03e      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0xd0>
 80021ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ce:	f200 8087 	bhi.w	80022e0 <HAL_TIM_ConfigClockSource+0x168>
 80021d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d6:	f000 8085 	beq.w	80022e4 <HAL_TIM_ConfigClockSource+0x16c>
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021de:	d87f      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x168>
 80021e0:	2b70      	cmp	r3, #112	; 0x70
 80021e2:	d01a      	beq.n	800221a <HAL_TIM_ConfigClockSource+0xa2>
 80021e4:	2b70      	cmp	r3, #112	; 0x70
 80021e6:	d87b      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x168>
 80021e8:	2b60      	cmp	r3, #96	; 0x60
 80021ea:	d050      	beq.n	800228e <HAL_TIM_ConfigClockSource+0x116>
 80021ec:	2b60      	cmp	r3, #96	; 0x60
 80021ee:	d877      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x168>
 80021f0:	2b50      	cmp	r3, #80	; 0x50
 80021f2:	d03c      	beq.n	800226e <HAL_TIM_ConfigClockSource+0xf6>
 80021f4:	2b50      	cmp	r3, #80	; 0x50
 80021f6:	d873      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x168>
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d058      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x136>
 80021fc:	2b40      	cmp	r3, #64	; 0x40
 80021fe:	d86f      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x168>
 8002200:	2b30      	cmp	r3, #48	; 0x30
 8002202:	d064      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x156>
 8002204:	2b30      	cmp	r3, #48	; 0x30
 8002206:	d86b      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x168>
 8002208:	2b20      	cmp	r3, #32
 800220a:	d060      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x156>
 800220c:	2b20      	cmp	r3, #32
 800220e:	d867      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x168>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d05c      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x156>
 8002214:	2b10      	cmp	r3, #16
 8002216:	d05a      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002218:	e062      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f000 fac0 	bl	80027ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800223c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	609a      	str	r2, [r3, #8]
      break;
 8002246:	e04e      	b.n	80022e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f000 faa9 	bl	80027ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800226a:	609a      	str	r2, [r3, #8]
      break;
 800226c:	e03b      	b.n	80022e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	461a      	mov	r2, r3
 800227c:	f000 fa20 	bl	80026c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2150      	movs	r1, #80	; 0x50
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fa77 	bl	800277a <TIM_ITRx_SetConfig>
      break;
 800228c:	e02b      	b.n	80022e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	461a      	mov	r2, r3
 800229c:	f000 fa3e 	bl	800271c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2160      	movs	r1, #96	; 0x60
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fa67 	bl	800277a <TIM_ITRx_SetConfig>
      break;
 80022ac:	e01b      	b.n	80022e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f000 fa00 	bl	80026c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2140      	movs	r1, #64	; 0x40
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fa57 	bl	800277a <TIM_ITRx_SetConfig>
      break;
 80022cc:	e00b      	b.n	80022e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f000 fa4e 	bl	800277a <TIM_ITRx_SetConfig>
        break;
 80022de:	e002      	b.n	80022e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022e0:	bf00      	nop
 80022e2:	e000      	b.n	80022e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <TIM_Base_SetConfig+0xa8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d007      	beq.n	8002328 <TIM_Base_SetConfig+0x28>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231e:	d003      	beq.n	8002328 <TIM_Base_SetConfig+0x28>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a22      	ldr	r2, [pc, #136]	; (80023ac <TIM_Base_SetConfig+0xac>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d108      	bne.n	800233a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <TIM_Base_SetConfig+0xa8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d007      	beq.n	8002352 <TIM_Base_SetConfig+0x52>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d003      	beq.n	8002352 <TIM_Base_SetConfig+0x52>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <TIM_Base_SetConfig+0xac>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d108      	bne.n	8002364 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <TIM_Base_SetConfig+0xa8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d103      	bne.n	8002398 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	615a      	str	r2, [r3, #20]
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40000400 	.word	0x40000400

080023b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f023 0201 	bic.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f023 0302 	bic.w	r3, r3, #2
 80023f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <TIM_OC1_SetConfig+0xc8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d10c      	bne.n	8002426 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f023 0308 	bic.w	r3, r3, #8
 8002412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a13      	ldr	r2, [pc, #76]	; (8002478 <TIM_OC1_SetConfig+0xc8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d111      	bne.n	8002452 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800243c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	621a      	str	r2, [r3, #32]
}
 800246c:	bf00      	nop
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40012c00 	.word	0x40012c00

0800247c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	f023 0210 	bic.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f023 0320 	bic.w	r3, r3, #32
 80024c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <TIM_OC2_SetConfig+0xd0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d10d      	bne.n	80024f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a14      	ldr	r2, [pc, #80]	; (800254c <TIM_OC2_SetConfig+0xd0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d113      	bne.n	8002528 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800250e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	621a      	str	r2, [r3, #32]
}
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40012c00 	.word	0x40012c00

08002550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0303 	bic.w	r3, r3, #3
 8002586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <TIM_OC3_SetConfig+0xd0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d10d      	bne.n	80025ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <TIM_OC3_SetConfig+0xd0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d113      	bne.n	80025fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	621a      	str	r2, [r3, #32]
}
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40012c00 	.word	0x40012c00

08002624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800266e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	031b      	lsls	r3, r3, #12
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <TIM_OC4_SetConfig+0x98>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d109      	bne.n	8002698 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800268a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	019b      	lsls	r3, r3, #6
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	40012c00 	.word	0x40012c00

080026c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f023 0201 	bic.w	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f023 030a 	bic.w	r3, r3, #10
 80026fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	621a      	str	r2, [r3, #32]
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f023 0210 	bic.w	r2, r3, #16
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002746:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	031b      	lsls	r3, r3, #12
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002758:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	621a      	str	r2, [r3, #32]
}
 8002770:	bf00      	nop
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	f043 0307 	orr.w	r3, r3, #7
 800279c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	609a      	str	r2, [r3, #8]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b087      	sub	sp, #28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	021a      	lsls	r2, r3, #8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	609a      	str	r2, [r3, #8]
}
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	2201      	movs	r2, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	43db      	mvns	r3, r3
 800280e:	401a      	ands	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	431a      	orrs	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	621a      	str	r2, [r3, #32]
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002848:	2302      	movs	r3, #2
 800284a:	e041      	b.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002898:	d004      	beq.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a10      	ldr	r2, [pc, #64]	; (80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d10c      	bne.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	40000400 	.word	0x40000400

080028e4 <__libc_init_array>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	2600      	movs	r6, #0
 80028e8:	4d0c      	ldr	r5, [pc, #48]	; (800291c <__libc_init_array+0x38>)
 80028ea:	4c0d      	ldr	r4, [pc, #52]	; (8002920 <__libc_init_array+0x3c>)
 80028ec:	1b64      	subs	r4, r4, r5
 80028ee:	10a4      	asrs	r4, r4, #2
 80028f0:	42a6      	cmp	r6, r4
 80028f2:	d109      	bne.n	8002908 <__libc_init_array+0x24>
 80028f4:	f000 f830 	bl	8002958 <_init>
 80028f8:	2600      	movs	r6, #0
 80028fa:	4d0a      	ldr	r5, [pc, #40]	; (8002924 <__libc_init_array+0x40>)
 80028fc:	4c0a      	ldr	r4, [pc, #40]	; (8002928 <__libc_init_array+0x44>)
 80028fe:	1b64      	subs	r4, r4, r5
 8002900:	10a4      	asrs	r4, r4, #2
 8002902:	42a6      	cmp	r6, r4
 8002904:	d105      	bne.n	8002912 <__libc_init_array+0x2e>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	f855 3b04 	ldr.w	r3, [r5], #4
 800290c:	4798      	blx	r3
 800290e:	3601      	adds	r6, #1
 8002910:	e7ee      	b.n	80028f0 <__libc_init_array+0xc>
 8002912:	f855 3b04 	ldr.w	r3, [r5], #4
 8002916:	4798      	blx	r3
 8002918:	3601      	adds	r6, #1
 800291a:	e7f2      	b.n	8002902 <__libc_init_array+0x1e>
 800291c:	08002990 	.word	0x08002990
 8002920:	08002990 	.word	0x08002990
 8002924:	08002990 	.word	0x08002990
 8002928:	08002994 	.word	0x08002994

0800292c <memcpy>:
 800292c:	440a      	add	r2, r1
 800292e:	4291      	cmp	r1, r2
 8002930:	f100 33ff 	add.w	r3, r0, #4294967295
 8002934:	d100      	bne.n	8002938 <memcpy+0xc>
 8002936:	4770      	bx	lr
 8002938:	b510      	push	{r4, lr}
 800293a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800293e:	4291      	cmp	r1, r2
 8002940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002944:	d1f9      	bne.n	800293a <memcpy+0xe>
 8002946:	bd10      	pop	{r4, pc}

08002948 <memset>:
 8002948:	4603      	mov	r3, r0
 800294a:	4402      	add	r2, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
