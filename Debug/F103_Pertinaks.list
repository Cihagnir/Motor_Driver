
F103_Pertinaks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003178  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a4  080032a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032a4  080032a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032a4  080032a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a8  080032a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  080032b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080032b8  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009de9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ed  00000000  00000000  00029e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002c0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016791  00000000  00000000  0002caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a876  00000000  00000000  00043239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084493  00000000  00000000  0004daaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1f42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cbc  00000000  00000000  000d1f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800326c 	.word	0x0800326c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800326c 	.word	0x0800326c

0800014c <HAL_TIM_PeriodElapsedCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim1.Instance ){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681a      	ldr	r2, [r3, #0]
 8000158:	4b09      	ldr	r3, [pc, #36]	; (8000180 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	429a      	cmp	r2, r3
 800015e:	d109      	bne.n	8000174 <HAL_TIM_PeriodElapsedCallback+0x28>
		Motor_Speed = Rott_Count*15;
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000162:	681a      	ldr	r2, [r3, #0]
 8000164:	4613      	mov	r3, r2
 8000166:	011b      	lsls	r3, r3, #4
 8000168:	1a9b      	subs	r3, r3, r2
 800016a:	4a07      	ldr	r2, [pc, #28]	; (8000188 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800016c:	6013      	str	r3, [r2, #0]

		Rott_Count = 0;
 800016e:	4b05      	ldr	r3, [pc, #20]	; (8000184 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000170:	2200      	movs	r2, #0
 8000172:	601a      	str	r2, [r3, #0]
	}
}
 8000174:	bf00      	nop
 8000176:	370c      	adds	r7, #12
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	20000050 	.word	0x20000050
 8000184:	20000148 	.word	0x20000148
 8000188:	20000144 	.word	0x20000144

0800018c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000192:	af3e      	add	r7, sp, #248	; 0xf8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000194:	f000 ffde 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000198:	f000 f964 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019c:	f000 fb24 	bl	80007e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001a0:	f000 fa2e 	bl	8000600 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001a4:	f000 faa0 	bl	80006e8 <MX_TIM3_Init>
  MX_CAN_Init();
 80001a8:	f000 f9a2 	bl	80004f0 <MX_CAN_Init>
  MX_TIM1_Init();
 80001ac:	f000 f9d6 	bl	800055c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	Mosfet_Driver_Typedef MD_One;
	MD_One.LS_Pin = GPIOB;
 80001b0:	4b9c      	ldr	r3, [pc, #624]	; (8000424 <main+0x298>)
 80001b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	MD_One.LSP_Number = GPIO_PIN_10;
 80001b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ba:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	MD_One.HS_Tim = htim2;
 80001be:	4a9a      	ldr	r2, [pc, #616]	; (8000428 <main+0x29c>)
 80001c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80001c4:	4611      	mov	r1, r2
 80001c6:	2248      	movs	r2, #72	; 0x48
 80001c8:	4618      	mov	r0, r3
 80001ca:	f003 f839 	bl	8003240 <memcpy>
	MD_One.HST_Channel = TIM_CHANNEL_4;
 80001ce:	230c      	movs	r3, #12
 80001d0:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114

	Mosfet_Driver_Typedef MD_Two;
	MD_Two.LS_Pin = GPIOB;
 80001d4:	4b93      	ldr	r3, [pc, #588]	; (8000424 <main+0x298>)
 80001d6:	673b      	str	r3, [r7, #112]	; 0x70
	MD_Two.LSP_Number = GPIO_PIN_0;
 80001d8:	2301      	movs	r3, #1
 80001da:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	MD_Two.HS_Tim = htim3;
 80001de:	4a93      	ldr	r2, [pc, #588]	; (800042c <main+0x2a0>)
 80001e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80001e4:	4611      	mov	r1, r2
 80001e6:	2248      	movs	r2, #72	; 0x48
 80001e8:	4618      	mov	r0, r3
 80001ea:	f003 f829 	bl	8003240 <memcpy>
	MD_Two.HST_Channel = TIM_CHANNEL_4;
 80001ee:	230c      	movs	r3, #12
 80001f0:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

	Mosfet_Driver_Typedef MD_Three;
	MD_Three.LS_Pin = GPIOA;
 80001f4:	4b8e      	ldr	r3, [pc, #568]	; (8000430 <main+0x2a4>)
 80001f6:	61fb      	str	r3, [r7, #28]
	MD_Three.LSP_Number = GPIO_PIN_6;
 80001f8:	2340      	movs	r3, #64	; 0x40
 80001fa:	843b      	strh	r3, [r7, #32]
	MD_Three.HS_Tim = htim3;
 80001fc:	4a8b      	ldr	r2, [pc, #556]	; (800042c <main+0x2a0>)
 80001fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000202:	4611      	mov	r1, r2
 8000204:	2248      	movs	r2, #72	; 0x48
 8000206:	4618      	mov	r0, r3
 8000208:	f003 f81a 	bl	8003240 <memcpy>
	MD_Three.HST_Channel = TIM_CHANNEL_2;
 800020c:	2304      	movs	r3, #4
 800020e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	// --

	// Hall Sensor Typedef
	Hall_Sensor_Typedef Hall_A;
	Hall_A.H_Pin = GPIOB;
 8000212:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800021a:	4a82      	ldr	r2, [pc, #520]	; (8000424 <main+0x298>)
 800021c:	601a      	str	r2, [r3, #0]
	Hall_A.HP_Number = GPIO_PIN_7;
 800021e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000226:	2280      	movs	r2, #128	; 0x80
 8000228:	809a      	strh	r2, [r3, #4]

	Hall_Sensor_Typedef Hall_B;
	Hall_B.H_Pin = GPIOB;
 800022a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800022e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000232:	4a7c      	ldr	r2, [pc, #496]	; (8000424 <main+0x298>)
 8000234:	601a      	str	r2, [r3, #0]
	Hall_B.HP_Number = GPIO_PIN_8;
 8000236:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800023a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800023e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000242:	809a      	strh	r2, [r3, #4]

	Hall_Sensor_Typedef Hall_C;
	Hall_C.H_Pin = GPIOB;
 8000244:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000248:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800024c:	4a75      	ldr	r2, [pc, #468]	; (8000424 <main+0x298>)
 800024e:	601a      	str	r2, [r3, #0]
	Hall_C.HP_Number = GPIO_PIN_9;
 8000250:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000254:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800025c:	809a      	strh	r2, [r3, #4]


	HAL_TIM_Base_Start_IT(&htim1);
 800025e:	4875      	ldr	r0, [pc, #468]	; (8000434 <main+0x2a8>)
 8000260:	f002 f874 	bl	800234c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8000264:	4870      	ldr	r0, [pc, #448]	; (8000428 <main+0x29c>)
 8000266:	f002 f82d 	bl	80022c4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 800026a:	4870      	ldr	r0, [pc, #448]	; (800042c <main+0x2a0>)
 800026c:	f002 f82a 	bl	80022c4 <HAL_TIM_Base_Start>
	HAL_CAN_Start(&hcan);
 8000270:	4871      	ldr	r0, [pc, #452]	; (8000438 <main+0x2ac>)
 8000272:	f001 f8cc 	bl	800140e <HAL_CAN_Start>


	// Burdakİ FIFO0 veya FIFO1 olması senin mesaj bekleme fonksiyonunda doldurduğun alanıda etkiler
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000276:	2102      	movs	r1, #2
 8000278:	486f      	ldr	r0, [pc, #444]	; (8000438 <main+0x2ac>)
 800027a:	f001 f90c 	bl	8001496 <HAL_CAN_ActivateNotification>

	Com_TxHeader.DLC = 8;
 800027e:	4b6f      	ldr	r3, [pc, #444]	; (800043c <main+0x2b0>)
 8000280:	2208      	movs	r2, #8
 8000282:	611a      	str	r2, [r3, #16]
	Com_TxHeader.IDE = CAN_ID_STD;
 8000284:	4b6d      	ldr	r3, [pc, #436]	; (800043c <main+0x2b0>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]
	Com_TxHeader.RTR = CAN_RTR_DATA;
 800028a:	4b6c      	ldr	r3, [pc, #432]	; (800043c <main+0x2b0>)
 800028c:	2200      	movs	r2, #0
 800028e:	60da      	str	r2, [r3, #12]
	Com_TxHeader.StdId = 0x00011111;
 8000290:	4b6a      	ldr	r3, [pc, #424]	; (800043c <main+0x2b0>)
 8000292:	4a6b      	ldr	r2, [pc, #428]	; (8000440 <main+0x2b4>)
 8000294:	601a      	str	r2, [r3, #0]
	Com_TxHeader.TransmitGlobalTime = DISABLE;
 8000296:	4b69      	ldr	r3, [pc, #420]	; (800043c <main+0x2b0>)
 8000298:	2200      	movs	r2, #0
 800029a:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1){
		User_Speed = 20;
 800029c:	4b69      	ldr	r3, [pc, #420]	; (8000444 <main+0x2b8>)
 800029e:	2214      	movs	r2, #20
 80002a0:	701a      	strb	r2, [r3, #0]
		// Is_break = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
		Is_reverse = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80002a2:	2108      	movs	r1, #8
 80002a4:	485f      	ldr	r0, [pc, #380]	; (8000424 <main+0x298>)
 80002a6:	f001 fba5 	bl	80019f4 <HAL_GPIO_ReadPin>
 80002aa:	4603      	mov	r3, r0
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b66      	ldr	r3, [pc, #408]	; (8000448 <main+0x2bc>)
 80002b0:	701a      	strb	r2, [r3, #0]

		/* HAL SENSÖR OKUMASI*/
		HA_Res = HAL_GPIO_ReadPin(Hall_A.H_Pin, Hall_A.HP_Number);
 80002b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002c4:	889b      	ldrh	r3, [r3, #4]
 80002c6:	4619      	mov	r1, r3
 80002c8:	4610      	mov	r0, r2
 80002ca:	f001 fb93 	bl	80019f4 <HAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b5e      	ldr	r3, [pc, #376]	; (800044c <main+0x2c0>)
 80002d4:	701a      	strb	r2, [r3, #0]
		HB_Res = HAL_GPIO_ReadPin(Hall_B.H_Pin, Hall_B.HP_Number);
 80002d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002e8:	889b      	ldrh	r3, [r3, #4]
 80002ea:	4619      	mov	r1, r3
 80002ec:	4610      	mov	r0, r2
 80002ee:	f001 fb81 	bl	80019f4 <HAL_GPIO_ReadPin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	461a      	mov	r2, r3
 80002f6:	4b56      	ldr	r3, [pc, #344]	; (8000450 <main+0x2c4>)
 80002f8:	701a      	strb	r2, [r3, #0]
		HC_Res = HAL_GPIO_ReadPin(Hall_C.H_Pin, Hall_C.HP_Number);
 80002fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000308:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800030c:	889b      	ldrh	r3, [r3, #4]
 800030e:	4619      	mov	r1, r3
 8000310:	4610      	mov	r0, r2
 8000312:	f001 fb6f 	bl	80019f4 <HAL_GPIO_ReadPin>
 8000316:	4603      	mov	r3, r0
 8000318:	461a      	mov	r2, r3
 800031a:	4b4e      	ldr	r3, [pc, #312]	; (8000454 <main+0x2c8>)
 800031c:	701a      	strb	r2, [r3, #0]

		HB_Res = HB_Res << 1;
 800031e:	4b4c      	ldr	r3, [pc, #304]	; (8000450 <main+0x2c4>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b4a      	ldr	r3, [pc, #296]	; (8000450 <main+0x2c4>)
 8000328:	701a      	strb	r2, [r3, #0]
		HC_Res = HC_Res << 2;
 800032a:	4b4a      	ldr	r3, [pc, #296]	; (8000454 <main+0x2c8>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b48      	ldr	r3, [pc, #288]	; (8000454 <main+0x2c8>)
 8000334:	701a      	strb	r2, [r3, #0]
		HT_Res = HC_Res | HB_Res | HA_Res;
 8000336:	4b47      	ldr	r3, [pc, #284]	; (8000454 <main+0x2c8>)
 8000338:	781a      	ldrb	r2, [r3, #0]
 800033a:	4b45      	ldr	r3, [pc, #276]	; (8000450 <main+0x2c4>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	4313      	orrs	r3, r2
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b42      	ldr	r3, [pc, #264]	; (800044c <main+0x2c0>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4313      	orrs	r3, r2
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b43      	ldr	r3, [pc, #268]	; (8000458 <main+0x2cc>)
 800034c:	701a      	strb	r2, [r3, #0]

		/* MOTOR HIZ SAYACI */
		if (Prvs_Hal != HT_Res) {
 800034e:	4b43      	ldr	r3, [pc, #268]	; (800045c <main+0x2d0>)
 8000350:	781a      	ldrb	r2, [r3, #0]
 8000352:	4b41      	ldr	r3, [pc, #260]	; (8000458 <main+0x2cc>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	429a      	cmp	r2, r3
 8000358:	d010      	beq.n	800037c <main+0x1f0>
			if ((Prvs_Hal + HT_Res) == 10) {
 800035a:	4b40      	ldr	r3, [pc, #256]	; (800045c <main+0x2d0>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	461a      	mov	r2, r3
 8000360:	4b3d      	ldr	r3, [pc, #244]	; (8000458 <main+0x2cc>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4413      	add	r3, r2
 8000366:	2b0a      	cmp	r3, #10
 8000368:	d104      	bne.n	8000374 <main+0x1e8>
				Rott_Count++ ;
 800036a:	4b3d      	ldr	r3, [pc, #244]	; (8000460 <main+0x2d4>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3301      	adds	r3, #1
 8000370:	4a3b      	ldr	r2, [pc, #236]	; (8000460 <main+0x2d4>)
 8000372:	6013      	str	r3, [r2, #0]
			}
			Prvs_Hal = HT_Res;
 8000374:	4b38      	ldr	r3, [pc, #224]	; (8000458 <main+0x2cc>)
 8000376:	781a      	ldrb	r2, [r3, #0]
 8000378:	4b38      	ldr	r3, [pc, #224]	; (800045c <main+0x2d0>)
 800037a:	701a      	strb	r2, [r3, #0]
		}

		/* SÜRERSE GENEL SÜRÜCÜ*/
		if (Is_reverse) {
 800037c:	4b32      	ldr	r3, [pc, #200]	; (8000448 <main+0x2bc>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d027      	beq.n	80003d4 <main+0x248>
			HT_Res = 7 - HT_Res;
 8000384:	4b34      	ldr	r3, [pc, #208]	; (8000458 <main+0x2cc>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	f1c3 0307 	rsb	r3, r3, #7
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b32      	ldr	r3, [pc, #200]	; (8000458 <main+0x2cc>)
 8000390:	701a      	strb	r2, [r3, #0]
			Motor_Driver(MD_One, MD_Two, MD_Three, HT_Res,User_Speed);
 8000392:	4b31      	ldr	r3, [pc, #196]	; (8000458 <main+0x2cc>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4a2b      	ldr	r2, [pc, #172]	; (8000444 <main+0x2b8>)
 8000398:	7812      	ldrb	r2, [r2, #0]
 800039a:	923c      	str	r2, [sp, #240]	; 0xf0
 800039c:	933b      	str	r3, [sp, #236]	; 0xec
 800039e:	a826      	add	r0, sp, #152	; 0x98
 80003a0:	f107 031c 	add.w	r3, r7, #28
 80003a4:	2254      	movs	r2, #84	; 0x54
 80003a6:	4619      	mov	r1, r3
 80003a8:	f002 ff4a 	bl	8003240 <memcpy>
 80003ac:	a811      	add	r0, sp, #68	; 0x44
 80003ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003b2:	2254      	movs	r2, #84	; 0x54
 80003b4:	4619      	mov	r1, r3
 80003b6:	f002 ff43 	bl	8003240 <memcpy>
 80003ba:	4668      	mov	r0, sp
 80003bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80003c0:	2244      	movs	r2, #68	; 0x44
 80003c2:	4619      	mov	r1, r3
 80003c4:	f002 ff3c 	bl	8003240 <memcpy>
 80003c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80003cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003ce:	f000 fa79 	bl	80008c4 <Motor_Driver>
 80003d2:	e763      	b.n	800029c <main+0x110>
			}
		else {

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003da:	4815      	ldr	r0, [pc, #84]	; (8000430 <main+0x2a4>)
 80003dc:	f001 fb21 	bl	8001a22 <HAL_GPIO_WritePin>
			Motor_Driver(MD_One, MD_Two, MD_Three, HT_Res, User_Speed);
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <main+0x2cc>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	4a17      	ldr	r2, [pc, #92]	; (8000444 <main+0x2b8>)
 80003e6:	7812      	ldrb	r2, [r2, #0]
 80003e8:	923c      	str	r2, [sp, #240]	; 0xf0
 80003ea:	933b      	str	r3, [sp, #236]	; 0xec
 80003ec:	a826      	add	r0, sp, #152	; 0x98
 80003ee:	f107 031c 	add.w	r3, r7, #28
 80003f2:	2254      	movs	r2, #84	; 0x54
 80003f4:	4619      	mov	r1, r3
 80003f6:	f002 ff23 	bl	8003240 <memcpy>
 80003fa:	a811      	add	r0, sp, #68	; 0x44
 80003fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000400:	2254      	movs	r2, #84	; 0x54
 8000402:	4619      	mov	r1, r3
 8000404:	f002 ff1c 	bl	8003240 <memcpy>
 8000408:	4668      	mov	r0, sp
 800040a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800040e:	2244      	movs	r2, #68	; 0x44
 8000410:	4619      	mov	r1, r3
 8000412:	f002 ff15 	bl	8003240 <memcpy>
 8000416:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800041a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800041c:	f000 fa52 	bl	80008c4 <Motor_Driver>
		User_Speed = 20;
 8000420:	e73c      	b.n	800029c <main+0x110>
 8000422:	bf00      	nop
 8000424:	40010c00 	.word	0x40010c00
 8000428:	20000098 	.word	0x20000098
 800042c:	200000e0 	.word	0x200000e0
 8000430:	40010800 	.word	0x40010800
 8000434:	20000050 	.word	0x20000050
 8000438:	20000028 	.word	0x20000028
 800043c:	20000128 	.word	0x20000128
 8000440:	00011111 	.word	0x00011111
 8000444:	2000014d 	.word	0x2000014d
 8000448:	2000014e 	.word	0x2000014e
 800044c:	20000140 	.word	0x20000140
 8000450:	20000141 	.word	0x20000141
 8000454:	20000142 	.word	0x20000142
 8000458:	20000143 	.word	0x20000143
 800045c:	2000014c 	.word	0x2000014c
 8000460:	20000148 	.word	0x20000148

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b090      	sub	sp, #64	; 0x40
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	2228      	movs	r2, #40	; 0x28
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fef2 	bl	800325c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	2301      	movs	r3, #1
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000498:	2302      	movs	r3, #2
 800049a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 0318 	add.w	r3, r7, #24
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 fad1 	bl	8001a54 <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004b8:	f000 fc9e 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	230f      	movs	r3, #15
 80004be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	2302      	movs	r3, #2
 80004c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2102      	movs	r1, #2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fd3e 	bl	8001f58 <HAL_RCC_ClockConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004e2:	f000 fc89 	bl	8000df8 <Error_Handler>
  }
}
 80004e6:	bf00      	nop
 80004e8:	3740      	adds	r7, #64	; 0x40
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <MX_CAN_Init+0x64>)
 80004f6:	4a18      	ldr	r2, [pc, #96]	; (8000558 <MX_CAN_Init+0x68>)
 80004f8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80004fa:	4b16      	ldr	r3, [pc, #88]	; (8000554 <MX_CAN_Init+0x64>)
 80004fc:	2212      	movs	r2, #18
 80004fe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_CAN_Init+0x64>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_CAN_Init+0x64>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_CAN_Init+0x64>)
 800050e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000512:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_CAN_Init+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_CAN_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_CAN_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <MX_CAN_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_CAN_Init+0x64>)
 800052e:	2200      	movs	r2, #0
 8000530:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_CAN_Init+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_CAN_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_CAN_Init+0x64>)
 8000540:	f000 fe6a 	bl	8001218 <HAL_CAN_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800054a:	f000 fc55 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028
 8000558:	40006400 	.word	0x40006400

0800055c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <MX_TIM1_Init+0x9c>)
 800057a:	4a20      	ldr	r2, [pc, #128]	; (80005fc <MX_TIM1_Init+0xa0>)
 800057c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8999;
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_TIM1_Init+0x9c>)
 8000580:	f242 3227 	movw	r2, #8999	; 0x2327
 8000584:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <MX_TIM1_Init+0x9c>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_TIM1_Init+0x9c>)
 800058e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000592:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_TIM1_Init+0x9c>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_TIM1_Init+0x9c>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_TIM1_Init+0x9c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005a6:	4814      	ldr	r0, [pc, #80]	; (80005f8 <MX_TIM1_Init+0x9c>)
 80005a8:	f001 fe3c 	bl	8002224 <HAL_TIM_Base_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80005b2:	f000 fc21 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	4619      	mov	r1, r3
 80005c2:	480d      	ldr	r0, [pc, #52]	; (80005f8 <MX_TIM1_Init+0x9c>)
 80005c4:	f002 fa2c 	bl	8002a20 <HAL_TIM_ConfigClockSource>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80005ce:	f000 fc13 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005d2:	2320      	movs	r3, #32
 80005d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <MX_TIM1_Init+0x9c>)
 80005e0:	f002 fda0 	bl	8003124 <HAL_TIMEx_MasterConfigSynchronization>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80005ea:	f000 fc05 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000050 	.word	0x20000050
 80005fc:	40012c00 	.word	0x40012c00

08000600 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08e      	sub	sp, #56	; 0x38
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
 800062c:	615a      	str	r2, [r3, #20]
 800062e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <MX_TIM2_Init+0xe4>)
 8000632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000636:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <MX_TIM2_Init+0xe4>)
 800063a:	2223      	movs	r2, #35	; 0x23
 800063c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <MX_TIM2_Init+0xe4>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_TIM2_Init+0xe4>)
 8000646:	2263      	movs	r2, #99	; 0x63
 8000648:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_TIM2_Init+0xe4>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_TIM2_Init+0xe4>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000656:	4823      	ldr	r0, [pc, #140]	; (80006e4 <MX_TIM2_Init+0xe4>)
 8000658:	f001 fde4 	bl	8002224 <HAL_TIM_Base_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000662:	f000 fbc9 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800066c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000670:	4619      	mov	r1, r3
 8000672:	481c      	ldr	r0, [pc, #112]	; (80006e4 <MX_TIM2_Init+0xe4>)
 8000674:	f002 f9d4 	bl	8002a20 <HAL_TIM_ConfigClockSource>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800067e:	f000 fbbb 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000682:	4818      	ldr	r0, [pc, #96]	; (80006e4 <MX_TIM2_Init+0xe4>)
 8000684:	f001 feae 	bl	80023e4 <HAL_TIM_PWM_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800068e:	f000 fbb3 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4619      	mov	r1, r3
 80006a0:	4810      	ldr	r0, [pc, #64]	; (80006e4 <MX_TIM2_Init+0xe4>)
 80006a2:	f002 fd3f 	bl	8003124 <HAL_TIMEx_MasterConfigSynchronization>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80006ac:	f000 fba4 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b0:	2360      	movs	r3, #96	; 0x60
 80006b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	220c      	movs	r2, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <MX_TIM2_Init+0xe4>)
 80006c8:	f002 f8ec 	bl	80028a4 <HAL_TIM_PWM_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80006d2:	f000 fb91 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <MX_TIM2_Init+0xe4>)
 80006d8:	f000 fc5e 	bl	8000f98 <HAL_TIM_MspPostInit>

}
 80006dc:	bf00      	nop
 80006de:	3738      	adds	r7, #56	; 0x38
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000098 	.word	0x20000098

080006e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	; 0x38
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000718:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <MX_TIM3_Init+0xf8>)
 800071a:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <MX_TIM3_Init+0xfc>)
 800071c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 800071e:	4b30      	ldr	r3, [pc, #192]	; (80007e0 <MX_TIM3_Init+0xf8>)
 8000720:	2223      	movs	r2, #35	; 0x23
 8000722:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <MX_TIM3_Init+0xf8>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_TIM3_Init+0xf8>)
 800072c:	2263      	movs	r2, #99	; 0x63
 800072e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_TIM3_Init+0xf8>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_TIM3_Init+0xf8>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800073c:	4828      	ldr	r0, [pc, #160]	; (80007e0 <MX_TIM3_Init+0xf8>)
 800073e:	f001 fd71 	bl	8002224 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000748:	f000 fb56 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000756:	4619      	mov	r1, r3
 8000758:	4821      	ldr	r0, [pc, #132]	; (80007e0 <MX_TIM3_Init+0xf8>)
 800075a:	f002 f961 	bl	8002a20 <HAL_TIM_ConfigClockSource>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000764:	f000 fb48 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000768:	481d      	ldr	r0, [pc, #116]	; (80007e0 <MX_TIM3_Init+0xf8>)
 800076a:	f001 fe3b 	bl	80023e4 <HAL_TIM_PWM_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000774:	f000 fb40 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4619      	mov	r1, r3
 8000786:	4816      	ldr	r0, [pc, #88]	; (80007e0 <MX_TIM3_Init+0xf8>)
 8000788:	f002 fccc 	bl	8003124 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000792:	f000 fb31 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000796:	2360      	movs	r3, #96	; 0x60
 8000798:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2204      	movs	r2, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_TIM3_Init+0xf8>)
 80007ae:	f002 f879 	bl	80028a4 <HAL_TIM_PWM_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80007b8:	f000 fb1e 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	220c      	movs	r2, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_TIM3_Init+0xf8>)
 80007c4:	f002 f86e 	bl	80028a4 <HAL_TIM_PWM_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80007ce:	f000 fb13 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <MX_TIM3_Init+0xf8>)
 80007d4:	f000 fbe0 	bl	8000f98 <HAL_TIM_MspPostInit>

}
 80007d8:	bf00      	nop
 80007da:	3738      	adds	r7, #56	; 0x38
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000e0 	.word	0x200000e0
 80007e4:	40000400 	.word	0x40000400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fc:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <MX_GPIO_Init+0xd0>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000802:	f043 0320 	orr.w	r3, r3, #32
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0320 	and.w	r3, r3, #32
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a27      	ldr	r2, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000832:	f043 0308 	orr.w	r3, r3, #8
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0308 	and.w	r3, r3, #8
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2140      	movs	r1, #64	; 0x40
 8000848:	481c      	ldr	r0, [pc, #112]	; (80008bc <MX_GPIO_Init+0xd4>)
 800084a:	f001 f8ea 	bl	8001a22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f240 4101 	movw	r1, #1025	; 0x401
 8000854:	481a      	ldr	r0, [pc, #104]	; (80008c0 <MX_GPIO_Init+0xd8>)
 8000856:	f001 f8e4 	bl	8001a22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2302      	movs	r3, #2
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000872:	f000 ff43 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 8000876:	f240 4301 	movw	r3, #1025	; 0x401
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2302      	movs	r3, #2
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_GPIO_Init+0xd8>)
 8000890:	f000 ff34 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000894:	f44f 7362 	mov.w	r3, #904	; 0x388
 8000898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_GPIO_Init+0xd8>)
 80008aa:	f000 ff27 	bl	80016fc <HAL_GPIO_Init>

}
 80008ae:	bf00      	nop
 80008b0:	3720      	adds	r7, #32
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010800 	.word	0x40010800
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <Motor_Driver>:

/* USER CODE BEGIN 4 */
void Motor_Driver(Mosfet_Driver_Typedef MD_one, Mosfet_Driver_Typedef MD_two,
		Mosfet_Driver_Typedef MD_three, uint8_t Hall_T, uint8_t User_Speed) {
 80008c4:	b084      	sub	sp, #16
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	f107 0c08 	add.w	ip, r7, #8
 80008ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d8:	48c6      	ldr	r0, [pc, #792]	; (8000bf4 <Motor_Driver+0x330>)
 80008da:	f001 f8a2 	bl	8001a22 <HAL_GPIO_WritePin>
	switch (Hall_T) {
 80008de:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80008e2:	3b01      	subs	r3, #1
 80008e4:	2b05      	cmp	r3, #5
 80008e6:	f200 8278 	bhi.w	8000dda <Motor_Driver+0x516>
 80008ea:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <Motor_Driver+0x2c>)
 80008ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f0:	08000ce5 	.word	0x08000ce5
 80008f4:	08000bf9 	.word	0x08000bf9
 80008f8:	08000b4f 	.word	0x08000b4f
 80008fc:	08000a59 	.word	0x08000a59
 8000900:	080009ad 	.word	0x080009ad
 8000904:	08000909 	.word	0x08000909

	case 6:
		// 2 > 1
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800090a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800090e:	2201      	movs	r2, #1
 8000910:	4618      	mov	r0, r3
 8000912:	f001 f886 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000916:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800091a:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 800091e:	2201      	movs	r2, #1
 8000920:	4618      	mov	r0, r3
 8000922:	f001 f87e 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000926:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 800092a:	461a      	mov	r2, r3
 800092c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000930:	3308      	adds	r3, #8
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fe49 	bl	80025cc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 800093a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800093e:	461a      	mov	r2, r3
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fe40 	bl	80025cc <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_RESET);
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	89b9      	ldrh	r1, [r7, #12]
 8000950:	2200      	movs	r2, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f001 f865 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000958:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800095c:	461a      	mov	r2, r3
 800095e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000962:	3308      	adds	r3, #8
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fd94 	bl	8002494 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, User_Speed);
 800096c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000970:	2b00      	cmp	r3, #0
 8000972:	d104      	bne.n	800097e <Motor_Driver+0xba>
 8000974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000976:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 800097a:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 800097c:	e234      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, User_Speed);
 800097e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000982:	2b04      	cmp	r3, #4
 8000984:	d104      	bne.n	8000990 <Motor_Driver+0xcc>
 8000986:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000988:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 800098c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800098e:	e22b      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, User_Speed);
 8000990:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000994:	2b08      	cmp	r3, #8
 8000996:	d104      	bne.n	80009a2 <Motor_Driver+0xde>
 8000998:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800099a:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 800099e:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80009a0:	e222      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, User_Speed);
 80009a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009a4:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80009aa:	e21d      	b.n	8000de8 <Motor_Driver+0x524>
	case 5:
		// 3 > 2
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 80009ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80009b0:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80009b4:	2201      	movs	r2, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f833 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	89b9      	ldrh	r1, [r7, #12]
 80009c0:	2201      	movs	r2, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f82d 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 80009c8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80009cc:	461a      	mov	r2, r3
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fdf9 	bl	80025cc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 80009da:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80009de:	461a      	mov	r2, r3
 80009e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009e4:	3308      	adds	r3, #8
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fdef 	bl	80025cc <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_RESET);
 80009ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009f0:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80009f4:	2200      	movs	r2, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 f813 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_three.HS_Tim, MD_three.HST_Channel);
 80009fc:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000a00:	461a      	mov	r2, r3
 8000a02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000a06:	3308      	adds	r3, #8
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 fd42 	bl	8002494 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, User_Speed);
 8000a10:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d105      	bne.n	8000a24 <Motor_Driver+0x160>
 8000a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000a1c:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8000a22:	e1e1      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, User_Speed);
 8000a24:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d105      	bne.n	8000a38 <Motor_Driver+0x174>
 8000a2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000a30:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000a34:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000a36:	e1d7      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, User_Speed);
 8000a38:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000a3c:	2b08      	cmp	r3, #8
 8000a3e:	d105      	bne.n	8000a4c <Motor_Driver+0x188>
 8000a40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000a44:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000a48:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000a4a:	e1cd      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, User_Speed);
 8000a4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000a50:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000a56:	e1c7      	b.n	8000de8 <Motor_Driver+0x524>
	case 4:
		// 3 > 1
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a5c:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000a60:	2201      	movs	r2, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 ffdd 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a6a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 ffd6 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000a76:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a80:	3308      	adds	r3, #8
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 fda1 	bl	80025cc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000a8a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 fd98 	bl	80025cc <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_RESET);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	89b9      	ldrh	r1, [r7, #12]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 ffbd 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000aa8:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000aac:	461a      	mov	r2, r3
 8000aae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fcec 	bl	8002494 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, User_Speed);
 8000abc:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d105      	bne.n	8000ad0 <Motor_Driver+0x20c>
 8000ac4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ac8:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000acc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ace:	e018      	b.n	8000b02 <Motor_Driver+0x23e>
 8000ad0:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d105      	bne.n	8000ae4 <Motor_Driver+0x220>
 8000ad8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000adc:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000ae0:	6393      	str	r3, [r2, #56]	; 0x38
 8000ae2:	e00e      	b.n	8000b02 <Motor_Driver+0x23e>
 8000ae4:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d105      	bne.n	8000af8 <Motor_Driver+0x234>
 8000aec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000af0:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000af4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000af6:	e004      	b.n	8000b02 <Motor_Driver+0x23e>
 8000af8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000afc:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
		/* =====================================*/
		HAL_TIM_PWM_Start(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000b02:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b06:	461a      	mov	r2, r3
 8000b08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b0c:	3308      	adds	r3, #8
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 fcbf 	bl	8002494 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000b16:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d103      	bne.n	8000b26 <Motor_Driver+0x262>
 8000b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b20:	220a      	movs	r2, #10
 8000b22:	635a      	str	r2, [r3, #52]	; 0x34


		break;
 8000b24:	e160      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000b26:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d103      	bne.n	8000b36 <Motor_Driver+0x272>
 8000b2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b30:	230a      	movs	r3, #10
 8000b32:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b34:	e158      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000b36:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d103      	bne.n	8000b46 <Motor_Driver+0x282>
 8000b3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b40:	230a      	movs	r3, #10
 8000b42:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b44:	e150      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, 10);
 8000b46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b48:	230a      	movs	r3, #10
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b4c:	e14c      	b.n	8000de8 <Motor_Driver+0x524>
	case 3:
		// 1 > 3
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	89b9      	ldrh	r1, [r7, #12]
 8000b52:	2201      	movs	r2, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 ff64 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b5c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000b60:	2201      	movs	r2, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 ff5d 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000b68:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b72:	3308      	adds	r3, #8
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fd28 	bl	80025cc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000b7c:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000b80:	461a      	mov	r2, r3
 8000b82:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b86:	3308      	adds	r3, #8
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 fd1e 	bl	80025cc <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_RESET);
 8000b90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b94:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 ff41 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000ba0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fc71 	bl	8002494 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, User_Speed);
 8000bb2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <Motor_Driver+0x300>
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000bc0:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8000bc2:	e111      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, User_Speed);
 8000bc4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d104      	bne.n	8000bd6 <Motor_Driver+0x312>
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000bd2:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000bd4:	e108      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, User_Speed);
 8000bd6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d104      	bne.n	8000be8 <Motor_Driver+0x324>
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000be4:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000be6:	e0ff      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, User_Speed);
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000bf0:	e0fa      	b.n	8000de8 <Motor_Driver+0x524>
 8000bf2:	bf00      	nop
 8000bf4:	40010800 	.word	0x40010800
	case 2:
		// 2 > 3
		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_SET);
 8000bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bfa:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 ff0e 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	89b9      	ldrh	r1, [r7, #12]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 ff08 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000c12:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000c16:	461a      	mov	r2, r3
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fcd4 	bl	80025cc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000c24:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000c2e:	3308      	adds	r3, #8
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fcca 	bl	80025cc <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_RESET);
 8000c38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000c3c:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000c40:	2200      	movs	r2, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 feed 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000c48:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c52:	3308      	adds	r3, #8
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fc1c 	bl	8002494 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_two.HS_Tim, MD_two.HST_Channel, User_Speed);
 8000c5c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d104      	bne.n	8000c6e <Motor_Driver+0x3aa>
 8000c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c66:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6c:	e015      	b.n	8000c9a <Motor_Driver+0x3d6>
 8000c6e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d104      	bne.n	8000c80 <Motor_Driver+0x3bc>
 8000c76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c78:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000c7c:	6393      	str	r3, [r2, #56]	; 0x38
 8000c7e:	e00c      	b.n	8000c9a <Motor_Driver+0x3d6>
 8000c80:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d104      	bne.n	8000c92 <Motor_Driver+0x3ce>
 8000c88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c8a:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000c8e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c90:	e003      	b.n	8000c9a <Motor_Driver+0x3d6>
 8000c92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c94:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
		/* =====================================*/
		HAL_TIM_PWM_Start(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000c9a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fbf4 	bl	8002494 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000cac:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d103      	bne.n	8000cbc <Motor_Driver+0x3f8>
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	220a      	movs	r2, #10
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34


		break;
 8000cba:	e095      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000cbc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d103      	bne.n	8000ccc <Motor_Driver+0x408>
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000cca:	e08d      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000ccc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d103      	bne.n	8000cdc <Motor_Driver+0x418>
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000cda:	e085      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, 10);
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	230a      	movs	r3, #10
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000ce2:	e081      	b.n	8000de8 <Motor_Driver+0x524>
	case 1:
		// 1 > 2
		HAL_GPIO_WritePin(MD_one.LS_Pin, MD_one.LSP_Number, GPIO_PIN_SET);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	89b9      	ldrh	r1, [r7, #12]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fe99 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MD_three.LS_Pin, MD_three.LSP_Number, GPIO_PIN_SET);
 8000cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000cf4:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fe91 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000d00:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000d04:	461a      	mov	r2, r3
 8000d06:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fc5c 	bl	80025cc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&MD_two.HS_Tim, MD_two.HST_Channel);
 8000d14:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000d18:	461a      	mov	r2, r3
 8000d1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d1e:	3308      	adds	r3, #8
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fc52 	bl	80025cc <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(MD_two.LS_Pin, MD_two.LSP_Number, GPIO_PIN_RESET);
 8000d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d2a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fe76 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&MD_one.HS_Tim, MD_one.HST_Channel);
 8000d36:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fba6 	bl	8002494 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_one.HS_Tim, MD_one.HST_Channel, User_Speed);
 8000d48:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d104      	bne.n	8000d5a <Motor_Driver+0x496>
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34
 8000d58:	e015      	b.n	8000d86 <Motor_Driver+0x4c2>
 8000d5a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	d104      	bne.n	8000d6c <Motor_Driver+0x4a8>
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000d68:	6393      	str	r3, [r2, #56]	; 0x38
 8000d6a:	e00c      	b.n	8000d86 <Motor_Driver+0x4c2>
 8000d6c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d104      	bne.n	8000d7e <Motor_Driver+0x4ba>
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000d7a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d7c:	e003      	b.n	8000d86 <Motor_Driver+0x4c2>
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
		/* =====================================*/
		HAL_TIM_PWM_Start(&MD_three.HS_Tim, MD_three.HST_Channel);
 8000d86:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000d90:	3308      	adds	r3, #8
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 fb7d 	bl	8002494 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 8000d9a:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d104      	bne.n	8000dac <Motor_Driver+0x4e8>
 8000da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000da6:	220a      	movs	r2, #10
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34


		break;
 8000daa:	e01d      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 8000dac:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d104      	bne.n	8000dbe <Motor_Driver+0x4fa>
 8000db4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000db8:	230a      	movs	r3, #10
 8000dba:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000dbc:	e014      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 8000dbe:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d104      	bne.n	8000dd0 <Motor_Driver+0x50c>
 8000dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000dca:	230a      	movs	r3, #10
 8000dcc:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000dce:	e00b      	b.n	8000de8 <Motor_Driver+0x524>
		__HAL_TIM_SET_COMPARE(&MD_three.HS_Tim, MD_three.HST_Channel, 10);
 8000dd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000dd4:	230a      	movs	r3, #10
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000dd8:	e006      	b.n	8000de8 <Motor_Driver+0x524>
	default:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <Motor_Driver+0x530>)
 8000de2:	f000 fe1e 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 8000de6:	bf00      	nop
	}

}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr
 8000df4:	40010800 	.word	0x40010800

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_MspInit+0x60>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_MspInit+0x60>)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000

08000e68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HAL_CAN_MspInit+0x8c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d131      	bne.n	8000eec <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <HAL_CAN_MspInit+0x90>)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <HAL_CAN_MspInit+0x90>)
 8000e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e92:	61d3      	str	r3, [r2, #28]
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_CAN_MspInit+0x90>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_CAN_MspInit+0x90>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_CAN_MspInit+0x90>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_CAN_MspInit+0x90>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <HAL_CAN_MspInit+0x94>)
 8000ece:	f000 fc15 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_CAN_MspInit+0x94>)
 8000ee8:	f000 fc08 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40006400 	.word	0x40006400
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010800 	.word	0x40010800

08000f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <HAL_TIM_Base_MspInit+0x8c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d114      	bne.n	8000f3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <HAL_TIM_Base_MspInit+0x90>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	4a1e      	ldr	r2, [pc, #120]	; (8000f90 <HAL_TIM_Base_MspInit+0x90>)
 8000f18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f1c:	6193      	str	r3, [r2, #24]
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HAL_TIM_Base_MspInit+0x90>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2019      	movs	r0, #25
 8000f30:	f000 fbad 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f34:	2019      	movs	r0, #25
 8000f36:	f000 fbc6 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f3a:	e022      	b.n	8000f82 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d10c      	bne.n	8000f60 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_TIM_Base_MspInit+0x90>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <HAL_TIM_Base_MspInit+0x90>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_TIM_Base_MspInit+0x90>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
}
 8000f5e:	e010      	b.n	8000f82 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_TIM_Base_MspInit+0x94>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10b      	bne.n	8000f82 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_TIM_Base_MspInit+0x90>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_TIM_Base_MspInit+0x90>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_TIM_Base_MspInit+0x90>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40012c00 	.word	0x40012c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40000400 	.word	0x40000400

08000f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb6:	d12b      	bne.n	8001010 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <HAL_TIM_MspPostInit+0xec>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a31      	ldr	r2, [pc, #196]	; (8001084 <HAL_TIM_MspPostInit+0xec>)
 8000fbe:	f043 0308 	orr.w	r3, r3, #8
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <HAL_TIM_MspPostInit+0xec>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4828      	ldr	r0, [pc, #160]	; (8001088 <HAL_TIM_MspPostInit+0xf0>)
 8000fe6:	f000 fb89 	bl	80016fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <HAL_TIM_MspPostInit+0xf4>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
 8001008:	4a20      	ldr	r2, [pc, #128]	; (800108c <HAL_TIM_MspPostInit+0xf4>)
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800100e:	e034      	b.n	800107a <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1e      	ldr	r2, [pc, #120]	; (8001090 <HAL_TIM_MspPostInit+0xf8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12f      	bne.n	800107a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_TIM_MspPostInit+0xec>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	4a19      	ldr	r2, [pc, #100]	; (8001084 <HAL_TIM_MspPostInit+0xec>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6193      	str	r3, [r2, #24]
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_TIM_MspPostInit+0xec>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_TIM_MspPostInit+0xec>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a13      	ldr	r2, [pc, #76]	; (8001084 <HAL_TIM_MspPostInit+0xec>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_TIM_MspPostInit+0xec>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2302      	movs	r3, #2
 8001054:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <HAL_TIM_MspPostInit+0xfc>)
 800105e:	f000 fb4d 	bl	80016fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001062:	2302      	movs	r3, #2
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2302      	movs	r3, #2
 800106c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <HAL_TIM_MspPostInit+0xf0>)
 8001076:	f000 fb41 	bl	80016fc <HAL_GPIO_Init>
}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	; 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	40010c00 	.word	0x40010c00
 800108c:	40010000 	.word	0x40010000
 8001090:	40000400 	.word	0x40000400
 8001094:	40010800 	.word	0x40010800

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010de:	f000 f87f 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <TIM1_UP_IRQHandler+0x10>)
 80010ee:	f001 fad1 	bl	8002694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000050 	.word	0x20000050

080010fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	; (800114c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800112e:	f7ff ffe5 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001132:	f002 f861 	bl	80031f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001136:	f7ff f829 	bl	800018c <main>
  bx lr
 800113a:	4770      	bx	lr
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001144:	080032ac 	.word	0x080032ac
  ldr r2, =_sbss
 8001148:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800114c:	20000154 	.word	0x20000154

08001150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_2_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x28>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x28>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 fa87 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	200f      	movs	r0, #15
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fe48 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fa9f 	bl	80016e2 <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 fa67 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_IncTick+0x1c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_IncTick+0x20>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a03      	ldr	r2, [pc, #12]	; (8001200 <HAL_IncTick+0x20>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000150 	.word	0x20000150

08001204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b02      	ldr	r3, [pc, #8]	; (8001214 <HAL_GetTick+0x10>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000150 	.word	0x20000150

08001218 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0ed      	b.n	8001406 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fe16 	bl	8000e68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0201 	orr.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800124c:	f7ff ffda 	bl	8001204 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001252:	e012      	b.n	800127a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001254:	f7ff ffd6 	bl	8001204 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d90b      	bls.n	800127a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2205      	movs	r2, #5
 8001272:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0c5      	b.n	8001406 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0e5      	beq.n	8001254 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0202 	bic.w	r2, r2, #2
 8001296:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001298:	f7ff ffb4 	bl	8001204 <HAL_GetTick>
 800129c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800129e:	e012      	b.n	80012c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a0:	f7ff ffb0 	bl	8001204 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b0a      	cmp	r3, #10
 80012ac:	d90b      	bls.n	80012c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2205      	movs	r2, #5
 80012be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e09f      	b.n	8001406 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e5      	bne.n	80012a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7e1b      	ldrb	r3, [r3, #24]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d108      	bne.n	80012ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e007      	b.n	80012fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7e5b      	ldrb	r3, [r3, #25]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e007      	b.n	8001328 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001326:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7e9b      	ldrb	r3, [r3, #26]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d108      	bne.n	8001342 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0220 	orr.w	r2, r2, #32
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e007      	b.n	8001352 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0220 	bic.w	r2, r2, #32
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7edb      	ldrb	r3, [r3, #27]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d108      	bne.n	800136c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0210 	bic.w	r2, r2, #16
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e007      	b.n	800137c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0210 	orr.w	r2, r2, #16
 800137a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7f1b      	ldrb	r3, [r3, #28]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d108      	bne.n	8001396 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0208 	orr.w	r2, r2, #8
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e007      	b.n	80013a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0208 	bic.w	r2, r2, #8
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7f5b      	ldrb	r3, [r3, #29]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0204 	orr.w	r2, r2, #4
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e007      	b.n	80013d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0204 	bic.w	r2, r2, #4
 80013ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	ea42 0103 	orr.w	r1, r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	1e5a      	subs	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d12e      	bne.n	8001480 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2202      	movs	r2, #2
 8001426:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800143a:	f7ff fee3 	bl	8001204 <HAL_GetTick>
 800143e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001440:	e012      	b.n	8001468 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001442:	f7ff fedf 	bl	8001204 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b0a      	cmp	r3, #10
 800144e:	d90b      	bls.n	8001468 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2205      	movs	r2, #5
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e012      	b.n	800148e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1e5      	bne.n	8001442 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	e006      	b.n	800148e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
  }
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d002      	beq.n	80014b4 <HAL_CAN_ActivateNotification+0x1e>
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d109      	bne.n	80014c8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6959      	ldr	r1, [r3, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e006      	b.n	80014d6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
  }
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4906      	ldr	r1, [pc, #24]	; (8001578 <__NVIC_EnableIRQ+0x34>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff90 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff2d 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff42 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff90 	bl	80015d0 <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5f 	bl	800157c <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff35 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b08b      	sub	sp, #44	; 0x2c
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e161      	b.n	80019d4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001710:	2201      	movs	r2, #1
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	429a      	cmp	r2, r3
 800172a:	f040 8150 	bne.w	80019ce <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4a97      	ldr	r2, [pc, #604]	; (8001990 <HAL_GPIO_Init+0x294>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d05e      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001738:	4a95      	ldr	r2, [pc, #596]	; (8001990 <HAL_GPIO_Init+0x294>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d875      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 800173e:	4a95      	ldr	r2, [pc, #596]	; (8001994 <HAL_GPIO_Init+0x298>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d058      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001744:	4a93      	ldr	r2, [pc, #588]	; (8001994 <HAL_GPIO_Init+0x298>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d86f      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 800174a:	4a93      	ldr	r2, [pc, #588]	; (8001998 <HAL_GPIO_Init+0x29c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d052      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001750:	4a91      	ldr	r2, [pc, #580]	; (8001998 <HAL_GPIO_Init+0x29c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d869      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 8001756:	4a91      	ldr	r2, [pc, #580]	; (800199c <HAL_GPIO_Init+0x2a0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d04c      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 800175c:	4a8f      	ldr	r2, [pc, #572]	; (800199c <HAL_GPIO_Init+0x2a0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d863      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 8001762:	4a8f      	ldr	r2, [pc, #572]	; (80019a0 <HAL_GPIO_Init+0x2a4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d046      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001768:	4a8d      	ldr	r2, [pc, #564]	; (80019a0 <HAL_GPIO_Init+0x2a4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d85d      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 800176e:	2b12      	cmp	r3, #18
 8001770:	d82a      	bhi.n	80017c8 <HAL_GPIO_Init+0xcc>
 8001772:	2b12      	cmp	r3, #18
 8001774:	d859      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <HAL_GPIO_Init+0x80>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	080017f7 	.word	0x080017f7
 8001780:	080017d1 	.word	0x080017d1
 8001784:	080017e3 	.word	0x080017e3
 8001788:	08001825 	.word	0x08001825
 800178c:	0800182b 	.word	0x0800182b
 8001790:	0800182b 	.word	0x0800182b
 8001794:	0800182b 	.word	0x0800182b
 8001798:	0800182b 	.word	0x0800182b
 800179c:	0800182b 	.word	0x0800182b
 80017a0:	0800182b 	.word	0x0800182b
 80017a4:	0800182b 	.word	0x0800182b
 80017a8:	0800182b 	.word	0x0800182b
 80017ac:	0800182b 	.word	0x0800182b
 80017b0:	0800182b 	.word	0x0800182b
 80017b4:	0800182b 	.word	0x0800182b
 80017b8:	0800182b 	.word	0x0800182b
 80017bc:	0800182b 	.word	0x0800182b
 80017c0:	080017d9 	.word	0x080017d9
 80017c4:	080017ed 	.word	0x080017ed
 80017c8:	4a76      	ldr	r2, [pc, #472]	; (80019a4 <HAL_GPIO_Init+0x2a8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ce:	e02c      	b.n	800182a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	623b      	str	r3, [r7, #32]
          break;
 80017d6:	e029      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	3304      	adds	r3, #4
 80017de:	623b      	str	r3, [r7, #32]
          break;
 80017e0:	e024      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	3308      	adds	r3, #8
 80017e8:	623b      	str	r3, [r7, #32]
          break;
 80017ea:	e01f      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	330c      	adds	r3, #12
 80017f2:	623b      	str	r3, [r7, #32]
          break;
 80017f4:	e01a      	b.n	800182c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017fe:	2304      	movs	r3, #4
 8001800:	623b      	str	r3, [r7, #32]
          break;
 8001802:	e013      	b.n	800182c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800180c:	2308      	movs	r3, #8
 800180e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	611a      	str	r2, [r3, #16]
          break;
 8001816:	e009      	b.n	800182c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001818:	2308      	movs	r3, #8
 800181a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	615a      	str	r2, [r3, #20]
          break;
 8001822:	e003      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
          break;
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x130>
          break;
 800182a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d801      	bhi.n	8001836 <HAL_GPIO_Init+0x13a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	e001      	b.n	800183a <HAL_GPIO_Init+0x13e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3304      	adds	r3, #4
 800183a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2bff      	cmp	r3, #255	; 0xff
 8001840:	d802      	bhi.n	8001848 <HAL_GPIO_Init+0x14c>
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	e002      	b.n	800184e <HAL_GPIO_Init+0x152>
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	3b08      	subs	r3, #8
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	210f      	movs	r1, #15
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	401a      	ands	r2, r3
 8001860:	6a39      	ldr	r1, [r7, #32]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	431a      	orrs	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80a9 	beq.w	80019ce <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800187c:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <HAL_GPIO_Init+0x2ac>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a49      	ldr	r2, [pc, #292]	; (80019a8 <HAL_GPIO_Init+0x2ac>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_GPIO_Init+0x2ac>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001894:	4a45      	ldr	r2, [pc, #276]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3d      	ldr	r2, [pc, #244]	; (80019b0 <HAL_GPIO_Init+0x2b4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00d      	beq.n	80018dc <HAL_GPIO_Init+0x1e0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3c      	ldr	r2, [pc, #240]	; (80019b4 <HAL_GPIO_Init+0x2b8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_Init+0x1dc>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a3b      	ldr	r2, [pc, #236]	; (80019b8 <HAL_GPIO_Init+0x2bc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d101      	bne.n	80018d4 <HAL_GPIO_Init+0x1d8>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e004      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018d4:	2303      	movs	r3, #3
 80018d6:	e002      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018dc:	2300      	movs	r3, #0
 80018de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e0:	f002 0203 	and.w	r2, r2, #3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4093      	lsls	r3, r2
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ee:	492f      	ldr	r1, [pc, #188]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001908:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	492b      	ldr	r1, [pc, #172]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001916:	4b29      	ldr	r3, [pc, #164]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	43db      	mvns	r3, r3
 800191e:	4927      	ldr	r1, [pc, #156]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 8001920:	4013      	ands	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4921      	ldr	r1, [pc, #132]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	43db      	mvns	r3, r3
 8001946:	491d      	ldr	r1, [pc, #116]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 8001948:	4013      	ands	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4917      	ldr	r1, [pc, #92]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	4913      	ldr	r1, [pc, #76]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 8001970:	4013      	ands	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01f      	beq.n	80019c0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	490d      	ldr	r1, [pc, #52]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
 800198c:	e01f      	b.n	80019ce <HAL_GPIO_Init+0x2d2>
 800198e:	bf00      	nop
 8001990:	10320000 	.word	0x10320000
 8001994:	10310000 	.word	0x10310000
 8001998:	10220000 	.word	0x10220000
 800199c:	10210000 	.word	0x10210000
 80019a0:	10120000 	.word	0x10120000
 80019a4:	10110000 	.word	0x10110000
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010000 	.word	0x40010000
 80019b0:	40010800 	.word	0x40010800
 80019b4:	40010c00 	.word	0x40010c00
 80019b8:	40011000 	.word	0x40011000
 80019bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_GPIO_Init+0x2f4>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	4909      	ldr	r1, [pc, #36]	; (80019f0 <HAL_GPIO_Init+0x2f4>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f47f ae96 	bne.w	8001710 <HAL_GPIO_Init+0x14>
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	372c      	adds	r7, #44	; 0x2c
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e001      	b.n	8001a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	807b      	strh	r3, [r7, #2]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a32:	787b      	ldrb	r3, [r7, #1]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a38:	887a      	ldrh	r2, [r7, #2]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a3e:	e003      	b.n	8001a48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	041a      	lsls	r2, r3, #16
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	611a      	str	r2, [r3, #16]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e272      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8087 	beq.w	8001b82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a74:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d00c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a80:	4b8f      	ldr	r3, [pc, #572]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d112      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x5e>
 8001a8c:	4b8c      	ldr	r3, [pc, #560]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a98:	d10b      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9a:	4b89      	ldr	r3, [pc, #548]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d06c      	beq.n	8001b80 <HAL_RCC_OscConfig+0x12c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d168      	bne.n	8001b80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e24c      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x76>
 8001abc:	4b80      	ldr	r3, [pc, #512]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a7f      	ldr	r2, [pc, #508]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e02e      	b.n	8001b28 <HAL_RCC_OscConfig+0xd4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x98>
 8001ad2:	4b7b      	ldr	r3, [pc, #492]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a7a      	ldr	r2, [pc, #488]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e01d      	b.n	8001b28 <HAL_RCC_OscConfig+0xd4>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0xbc>
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a71      	ldr	r2, [pc, #452]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0xd4>
 8001b10:	4b6b      	ldr	r3, [pc, #428]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a6a      	ldr	r2, [pc, #424]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a67      	ldr	r2, [pc, #412]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d013      	beq.n	8001b58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fb68 	bl	8001204 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fb64 	bl	8001204 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e200      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0xe4>
 8001b56:	e014      	b.n	8001b82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb54 	bl	8001204 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fb50 	bl	8001204 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1ec      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x10c>
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d063      	beq.n	8001c56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b9a:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d11c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x18c>
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d116      	bne.n	8001be0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x176>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e1c0      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4939      	ldr	r1, [pc, #228]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	e03a      	b.n	8001c56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff fb09 	bl	8001204 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7ff fb05 	bl	8001204 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1a1      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4927      	ldr	r1, [pc, #156]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fae8 	bl	8001204 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff fae4 	bl	8001204 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e180      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d03a      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d019      	beq.n	8001c9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7ff fac8 	bl	8001204 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff fac4 	bl	8001204 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e160      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f000 faa6 	bl	80021e8 <RCC_Delay>
 8001c9c:	e01c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff faae 	bl	8001204 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001caa:	e00f      	b.n	8001ccc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff faaa 	bl	8001204 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d908      	bls.n	8001ccc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e146      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	42420000 	.word	0x42420000
 8001cc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	4b92      	ldr	r3, [pc, #584]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1e9      	bne.n	8001cac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80a6 	beq.w	8001e32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cea:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10d      	bne.n	8001d12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a87      	ldr	r2, [pc, #540]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	61d3      	str	r3, [r2, #28]
 8001d02:	4b85      	ldr	r3, [pc, #532]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d12:	4b82      	ldr	r3, [pc, #520]	; (8001f1c <HAL_RCC_OscConfig+0x4c8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d118      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1e:	4b7f      	ldr	r3, [pc, #508]	; (8001f1c <HAL_RCC_OscConfig+0x4c8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7e      	ldr	r2, [pc, #504]	; (8001f1c <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fa6b 	bl	8001204 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d32:	f7ff fa67 	bl	8001204 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b64      	cmp	r3, #100	; 0x64
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e103      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	4b75      	ldr	r3, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x4c8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x312>
 8001d58:	4b6f      	ldr	r3, [pc, #444]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4a6e      	ldr	r2, [pc, #440]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6213      	str	r3, [r2, #32]
 8001d64:	e02d      	b.n	8001dc2 <HAL_RCC_OscConfig+0x36e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x334>
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a69      	ldr	r2, [pc, #420]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	4b67      	ldr	r3, [pc, #412]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a66      	ldr	r2, [pc, #408]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	e01c      	b.n	8001dc2 <HAL_RCC_OscConfig+0x36e>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d10c      	bne.n	8001daa <HAL_RCC_OscConfig+0x356>
 8001d90:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4a60      	ldr	r2, [pc, #384]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6213      	str	r3, [r2, #32]
 8001d9c:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	e00b      	b.n	8001dc2 <HAL_RCC_OscConfig+0x36e>
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a5a      	ldr	r2, [pc, #360]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	4b58      	ldr	r3, [pc, #352]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a57      	ldr	r2, [pc, #348]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d015      	beq.n	8001df6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dca:	f7ff fa1b 	bl	8001204 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f7ff fa17 	bl	8001204 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e0b1      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ee      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x37e>
 8001df4:	e014      	b.n	8001e20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7ff fa05 	bl	8001204 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7ff fa01 	bl	8001204 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e09b      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e14:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ee      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4a3b      	ldr	r2, [pc, #236]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8087 	beq.w	8001f4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e3c:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d061      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d146      	bne.n	8001ede <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7ff f9d5 	bl	8001204 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7ff f9d1 	bl	8001204 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e06d      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e70:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	d108      	bne.n	8001e98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	4921      	ldr	r1, [pc, #132]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a19      	ldr	r1, [r3, #32]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	491b      	ldr	r1, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f9a5 	bl	8001204 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff f9a1 	bl	8001204 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e03d      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x46a>
 8001edc:	e035      	b.n	8001f4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f98e 	bl	8001204 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff f98a 	bl	8001204 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e026      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x498>
 8001f0a:	e01e      	b.n	8001f4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e019      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x500>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d106      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0d0      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d910      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b67      	ldr	r3, [pc, #412]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	4965      	ldr	r1, [pc, #404]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0b8      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a58      	ldr	r2, [pc, #352]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fcc:	4b53      	ldr	r3, [pc, #332]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b50      	ldr	r3, [pc, #320]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	494d      	ldr	r1, [pc, #308]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d040      	beq.n	8002078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d115      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e07f      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e073      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06b      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4936      	ldr	r1, [pc, #216]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002048:	f7ff f8dc 	bl	8001204 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	e00a      	b.n	8002066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7ff f8d8 	bl	8001204 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e053      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 020c 	and.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	429a      	cmp	r2, r3
 8002076:	d1eb      	bne.n	8002050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d210      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 0207 	bic.w	r2, r3, #7
 800208e:	4922      	ldr	r1, [pc, #136]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e032      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4916      	ldr	r1, [pc, #88]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	490e      	ldr	r1, [pc, #56]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020e6:	f000 f821 	bl	800212c <HAL_RCC_GetSysClockFreq>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	490a      	ldr	r1, [pc, #40]	; (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x1cc>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_ClockConfig+0x1d0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f83a 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40022000 	.word	0x40022000
 800211c:	40021000 	.word	0x40021000
 8002120:	08003294 	.word	0x08003294
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800212c:	b490      	push	{r4, r7}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002132:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002134:	1d3c      	adds	r4, r7, #4
 8002136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800213c:	f240 2301 	movw	r3, #513	; 0x201
 8002140:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x40>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x46>
 800216a:	e02b      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800216e:	623b      	str	r3, [r7, #32]
      break;
 8002170:	e02b      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3328      	adds	r3, #40	; 0x28
 800217c:	443b      	add	r3, r7
 800217e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002182:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d012      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	0c5b      	lsrs	r3, r3, #17
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	3328      	adds	r3, #40	; 0x28
 800219a:	443b      	add	r3, r7
 800219c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021a6:	fb03 f202 	mul.w	r2, r3, r2
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	e004      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	623b      	str	r3, [r7, #32]
      break;
 80021c2:	e002      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021c6:	623b      	str	r3, [r7, #32]
      break;
 80021c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ca:	6a3b      	ldr	r3, [r7, #32]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc90      	pop	{r4, r7}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	08003284 	.word	0x08003284
 80021dc:	40021000 	.word	0x40021000
 80021e0:	007a1200 	.word	0x007a1200
 80021e4:	003d0900 	.word	0x003d0900

080021e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <RCC_Delay+0x34>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <RCC_Delay+0x38>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0a5b      	lsrs	r3, r3, #9
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002204:	bf00      	nop
  }
  while (Delay --);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	60fa      	str	r2, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f9      	bne.n	8002204 <RCC_Delay+0x1c>
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000000 	.word	0x20000000
 8002220:	10624dd3 	.word	0x10624dd3

08002224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e041      	b.n	80022ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fe58 	bl	8000f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f000 fcc4 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d001      	beq.n	80022dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e02d      	b.n	8002338 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a16      	ldr	r2, [pc, #88]	; (8002344 <HAL_TIM_Base_Start+0x80>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_TIM_Base_Start+0x3e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f6:	d004      	beq.n	8002302 <HAL_TIM_Base_Start+0x3e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a12      	ldr	r2, [pc, #72]	; (8002348 <HAL_TIM_Base_Start+0x84>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d111      	bne.n	8002326 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b06      	cmp	r3, #6
 8002312:	d010      	beq.n	8002336 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002324:	e007      	b.n	8002336 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400

0800234c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d001      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e035      	b.n	80023d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a16      	ldr	r2, [pc, #88]	; (80023dc <HAL_TIM_Base_Start_IT+0x90>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d009      	beq.n	800239a <HAL_TIM_Base_Start_IT+0x4e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238e:	d004      	beq.n	800239a <HAL_TIM_Base_Start_IT+0x4e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <HAL_TIM_Base_Start_IT+0x94>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d111      	bne.n	80023be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	d010      	beq.n	80023ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023bc:	e007      	b.n	80023ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40000400 	.word	0x40000400

080023e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e041      	b.n	800247a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f839 	bl	8002482 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f000 fbe4 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_TIM_PWM_Start+0x24>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e022      	b.n	80024fe <HAL_TIM_PWM_Start+0x6a>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d109      	bne.n	80024d2 <HAL_TIM_PWM_Start+0x3e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	e015      	b.n	80024fe <HAL_TIM_PWM_Start+0x6a>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d109      	bne.n	80024ec <HAL_TIM_PWM_Start+0x58>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e008      	b.n	80024fe <HAL_TIM_PWM_Start+0x6a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e059      	b.n	80025ba <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d104      	bne.n	8002516 <HAL_TIM_PWM_Start+0x82>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002514:	e013      	b.n	800253e <HAL_TIM_PWM_Start+0xaa>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d104      	bne.n	8002526 <HAL_TIM_PWM_Start+0x92>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002524:	e00b      	b.n	800253e <HAL_TIM_PWM_Start+0xaa>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d104      	bne.n	8002536 <HAL_TIM_PWM_Start+0xa2>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002534:	e003      	b.n	800253e <HAL_TIM_PWM_Start+0xaa>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2202      	movs	r2, #2
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2201      	movs	r2, #1
 8002544:	6839      	ldr	r1, [r7, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fdc8 	bl	80030dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_TIM_PWM_Start+0x130>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d107      	bne.n	8002566 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <HAL_TIM_PWM_Start+0x130>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_TIM_PWM_Start+0xf0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002578:	d004      	beq.n	8002584 <HAL_TIM_PWM_Start+0xf0>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_TIM_PWM_Start+0x134>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d111      	bne.n	80025a8 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b06      	cmp	r3, #6
 8002594:	d010      	beq.n	80025b8 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a6:	e007      	b.n	80025b8 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40000400 	.word	0x40000400

080025cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2200      	movs	r2, #0
 80025dc:	6839      	ldr	r1, [r7, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fd7c 	bl	80030dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a29      	ldr	r2, [pc, #164]	; (8002690 <HAL_TIM_PWM_Stop+0xc4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d117      	bne.n	800261e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a1a      	ldr	r2, [r3, #32]
 80025f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_TIM_PWM_Stop+0x52>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	f240 4344 	movw	r3, #1092	; 0x444
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d107      	bne.n	800261e <HAL_TIM_PWM_Stop+0x52>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	f241 1311 	movw	r3, #4369	; 0x1111
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <HAL_TIM_PWM_Stop+0x82>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	f240 4344 	movw	r3, #1092	; 0x444
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <HAL_TIM_PWM_Stop+0x82>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d104      	bne.n	800265e <HAL_TIM_PWM_Stop+0x92>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800265c:	e013      	b.n	8002686 <HAL_TIM_PWM_Stop+0xba>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d104      	bne.n	800266e <HAL_TIM_PWM_Stop+0xa2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800266c:	e00b      	b.n	8002686 <HAL_TIM_PWM_Stop+0xba>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d104      	bne.n	800267e <HAL_TIM_PWM_Stop+0xb2>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800267c:	e003      	b.n	8002686 <HAL_TIM_PWM_Stop+0xba>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40012c00 	.word	0x40012c00

08002694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d122      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d11b      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0202 	mvn.w	r2, #2
 80026c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fa6f 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fa62 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fa71 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d122      	bne.n	8002744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b04      	cmp	r3, #4
 800270a:	d11b      	bne.n	8002744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0204 	mvn.w	r2, #4
 8002714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fa45 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002730:	e005      	b.n	800273e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fa38 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fa47 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b08      	cmp	r3, #8
 8002750:	d122      	bne.n	8002798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b08      	cmp	r3, #8
 800275e:	d11b      	bne.n	8002798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0208 	mvn.w	r2, #8
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2204      	movs	r2, #4
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fa1b 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fa0e 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fa1d 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d122      	bne.n	80027ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d11b      	bne.n	80027ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0210 	mvn.w	r2, #16
 80027bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2208      	movs	r2, #8
 80027c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f9f1 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 80027d8:	e005      	b.n	80027e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f9e4 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f9f3 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0201 	mvn.w	r2, #1
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fd fc9a 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d107      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fcd1 	bl	80031e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d107      	bne.n	8002870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f9b7 	bl	8002bde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b20      	cmp	r3, #32
 800287c:	d10e      	bne.n	800289c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b20      	cmp	r3, #32
 800288a:	d107      	bne.n	800289c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0220 	mvn.w	r2, #32
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fc9c 	bl	80031d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0ac      	b.n	8002a18 <HAL_TIM_PWM_ConfigChannel+0x174>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	f200 809f 	bhi.w	8002a0c <HAL_TIM_PWM_ConfigChannel+0x168>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	08002909 	.word	0x08002909
 80028d8:	08002a0d 	.word	0x08002a0d
 80028dc:	08002a0d 	.word	0x08002a0d
 80028e0:	08002a0d 	.word	0x08002a0d
 80028e4:	08002949 	.word	0x08002949
 80028e8:	08002a0d 	.word	0x08002a0d
 80028ec:	08002a0d 	.word	0x08002a0d
 80028f0:	08002a0d 	.word	0x08002a0d
 80028f4:	0800298b 	.word	0x0800298b
 80028f8:	08002a0d 	.word	0x08002a0d
 80028fc:	08002a0d 	.word	0x08002a0d
 8002900:	08002a0d 	.word	0x08002a0d
 8002904:	080029cb 	.word	0x080029cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f9c6 	bl	8002ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0208 	orr.w	r2, r2, #8
 8002922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0204 	bic.w	r2, r2, #4
 8002932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6999      	ldr	r1, [r3, #24]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	619a      	str	r2, [r3, #24]
      break;
 8002946:	e062      	b.n	8002a0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fa0c 	bl	8002d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6999      	ldr	r1, [r3, #24]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	021a      	lsls	r2, r3, #8
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	619a      	str	r2, [r3, #24]
      break;
 8002988:	e041      	b.n	8002a0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fa55 	bl	8002e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0208 	orr.w	r2, r2, #8
 80029a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0204 	bic.w	r2, r2, #4
 80029b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69d9      	ldr	r1, [r3, #28]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	61da      	str	r2, [r3, #28]
      break;
 80029c8:	e021      	b.n	8002a0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fa9f 	bl	8002f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69da      	ldr	r2, [r3, #28]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69d9      	ldr	r1, [r3, #28]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	021a      	lsls	r2, r3, #8
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	61da      	str	r2, [r3, #28]
      break;
 8002a0a:	e000      	b.n	8002a0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002a0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_TIM_ConfigClockSource+0x18>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e0b3      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x180>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a70:	d03e      	beq.n	8002af0 <HAL_TIM_ConfigClockSource+0xd0>
 8002a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a76:	f200 8087 	bhi.w	8002b88 <HAL_TIM_ConfigClockSource+0x168>
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7e:	f000 8085 	beq.w	8002b8c <HAL_TIM_ConfigClockSource+0x16c>
 8002a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a86:	d87f      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x168>
 8002a88:	2b70      	cmp	r3, #112	; 0x70
 8002a8a:	d01a      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0xa2>
 8002a8c:	2b70      	cmp	r3, #112	; 0x70
 8002a8e:	d87b      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x168>
 8002a90:	2b60      	cmp	r3, #96	; 0x60
 8002a92:	d050      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x116>
 8002a94:	2b60      	cmp	r3, #96	; 0x60
 8002a96:	d877      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x168>
 8002a98:	2b50      	cmp	r3, #80	; 0x50
 8002a9a:	d03c      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0xf6>
 8002a9c:	2b50      	cmp	r3, #80	; 0x50
 8002a9e:	d873      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x168>
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d058      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x136>
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d86f      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x168>
 8002aa8:	2b30      	cmp	r3, #48	; 0x30
 8002aaa:	d064      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x156>
 8002aac:	2b30      	cmp	r3, #48	; 0x30
 8002aae:	d86b      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x168>
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d060      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x156>
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d867      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x168>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d05c      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x156>
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d05a      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ac0:	e062      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f000 fae4 	bl	800309e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ae4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	609a      	str	r2, [r3, #8]
      break;
 8002aee:	e04e      	b.n	8002b8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f000 facd 	bl	800309e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b12:	609a      	str	r2, [r3, #8]
      break;
 8002b14:	e03b      	b.n	8002b8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f000 fa44 	bl	8002fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2150      	movs	r1, #80	; 0x50
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fa9b 	bl	800306a <TIM_ITRx_SetConfig>
      break;
 8002b34:	e02b      	b.n	8002b8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f000 fa62 	bl	800300c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2160      	movs	r1, #96	; 0x60
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fa8b 	bl	800306a <TIM_ITRx_SetConfig>
      break;
 8002b54:	e01b      	b.n	8002b8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f000 fa24 	bl	8002fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2140      	movs	r1, #64	; 0x40
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fa7b 	bl	800306a <TIM_ITRx_SetConfig>
      break;
 8002b74:	e00b      	b.n	8002b8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f000 fa72 	bl	800306a <TIM_ITRx_SetConfig>
        break;
 8002b86:	e002      	b.n	8002b8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b88:	bf00      	nop
 8002b8a:	e000      	b.n	8002b8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <TIM_Base_SetConfig+0xa8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <TIM_Base_SetConfig+0x28>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d003      	beq.n	8002c18 <TIM_Base_SetConfig+0x28>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <TIM_Base_SetConfig+0xac>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d108      	bne.n	8002c2a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <TIM_Base_SetConfig+0xa8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <TIM_Base_SetConfig+0x52>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d003      	beq.n	8002c42 <TIM_Base_SetConfig+0x52>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <TIM_Base_SetConfig+0xac>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <TIM_Base_SetConfig+0xa8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d103      	bne.n	8002c88 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	615a      	str	r2, [r3, #20]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400

08002ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f023 0201 	bic.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f023 0302 	bic.w	r3, r3, #2
 8002ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <TIM_OC1_SetConfig+0xc8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10c      	bne.n	8002d16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f023 0308 	bic.w	r3, r3, #8
 8002d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <TIM_OC1_SetConfig+0xc8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d111      	bne.n	8002d42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	621a      	str	r2, [r3, #32]
}
 8002d5c:	bf00      	nop
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40012c00 	.word	0x40012c00

08002d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0210 	bic.w	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f023 0320 	bic.w	r3, r3, #32
 8002db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <TIM_OC2_SetConfig+0xd0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10d      	bne.n	8002de8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <TIM_OC2_SetConfig+0xd0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d113      	bne.n	8002e18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00

08002e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <TIM_OC3_SetConfig+0xd0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10d      	bne.n	8002eba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <TIM_OC3_SetConfig+0xd0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d113      	bne.n	8002eea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	621a      	str	r2, [r3, #32]
}
 8002f04:	bf00      	nop
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40012c00 	.word	0x40012c00

08002f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	031b      	lsls	r3, r3, #12
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <TIM_OC4_SetConfig+0x98>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d109      	bne.n	8002f88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	019b      	lsls	r3, r3, #6
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	621a      	str	r2, [r3, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	40012c00 	.word	0x40012c00

08002fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f023 0201 	bic.w	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 030a 	bic.w	r3, r3, #10
 8002fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	621a      	str	r2, [r3, #32]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f023 0210 	bic.w	r2, r3, #16
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003036:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	031b      	lsls	r3, r3, #12
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003048:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	621a      	str	r2, [r3, #32]
}
 8003060:	bf00      	nop
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	f043 0307 	orr.w	r3, r3, #7
 800308c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	609a      	str	r2, [r3, #8]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800309e:	b480      	push	{r7}
 80030a0:	b087      	sub	sp, #28
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	021a      	lsls	r2, r3, #8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	609a      	str	r2, [r3, #8]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	2201      	movs	r2, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a1a      	ldr	r2, [r3, #32]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	431a      	orrs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003138:	2302      	movs	r3, #2
 800313a:	e041      	b.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d004      	beq.n	8003194 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a10      	ldr	r2, [pc, #64]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d10c      	bne.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800319a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400

080031d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <__libc_init_array>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	2600      	movs	r6, #0
 80031fc:	4d0c      	ldr	r5, [pc, #48]	; (8003230 <__libc_init_array+0x38>)
 80031fe:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <__libc_init_array+0x3c>)
 8003200:	1b64      	subs	r4, r4, r5
 8003202:	10a4      	asrs	r4, r4, #2
 8003204:	42a6      	cmp	r6, r4
 8003206:	d109      	bne.n	800321c <__libc_init_array+0x24>
 8003208:	f000 f830 	bl	800326c <_init>
 800320c:	2600      	movs	r6, #0
 800320e:	4d0a      	ldr	r5, [pc, #40]	; (8003238 <__libc_init_array+0x40>)
 8003210:	4c0a      	ldr	r4, [pc, #40]	; (800323c <__libc_init_array+0x44>)
 8003212:	1b64      	subs	r4, r4, r5
 8003214:	10a4      	asrs	r4, r4, #2
 8003216:	42a6      	cmp	r6, r4
 8003218:	d105      	bne.n	8003226 <__libc_init_array+0x2e>
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003220:	4798      	blx	r3
 8003222:	3601      	adds	r6, #1
 8003224:	e7ee      	b.n	8003204 <__libc_init_array+0xc>
 8003226:	f855 3b04 	ldr.w	r3, [r5], #4
 800322a:	4798      	blx	r3
 800322c:	3601      	adds	r6, #1
 800322e:	e7f2      	b.n	8003216 <__libc_init_array+0x1e>
 8003230:	080032a4 	.word	0x080032a4
 8003234:	080032a4 	.word	0x080032a4
 8003238:	080032a4 	.word	0x080032a4
 800323c:	080032a8 	.word	0x080032a8

08003240 <memcpy>:
 8003240:	440a      	add	r2, r1
 8003242:	4291      	cmp	r1, r2
 8003244:	f100 33ff 	add.w	r3, r0, #4294967295
 8003248:	d100      	bne.n	800324c <memcpy+0xc>
 800324a:	4770      	bx	lr
 800324c:	b510      	push	{r4, lr}
 800324e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003252:	4291      	cmp	r1, r2
 8003254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003258:	d1f9      	bne.n	800324e <memcpy+0xe>
 800325a:	bd10      	pop	{r4, pc}

0800325c <memset>:
 800325c:	4603      	mov	r3, r0
 800325e:	4402      	add	r2, r0
 8003260:	4293      	cmp	r3, r2
 8003262:	d100      	bne.n	8003266 <memset+0xa>
 8003264:	4770      	bx	lr
 8003266:	f803 1b01 	strb.w	r1, [r3], #1
 800326a:	e7f9      	b.n	8003260 <memset+0x4>

0800326c <_init>:
 800326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326e:	bf00      	nop
 8003270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003272:	bc08      	pop	{r3}
 8003274:	469e      	mov	lr, r3
 8003276:	4770      	bx	lr

08003278 <_fini>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	bf00      	nop
 800327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327e:	bc08      	pop	{r3}
 8003280:	469e      	mov	lr, r3
 8003282:	4770      	bx	lr
